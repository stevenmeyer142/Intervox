// VulkanMesh.h// Created by Steve on Fri, Jun 23, 2000 @ 12:16 PM.#ifndef __VulkanMesh__#define __VulkanMesh__#pragma once// TODO make these defines global#define GLM_FORCE_RADIANS#define GLM_FORCE_DEPTH_ZERO_TO_ONE#include <glm/glm.hpp>#include "VulkanBuffer.h"#include "VulkanDevice.h"class CTriangleList;class CVertexList;struct MeshVertex{    float pos[3];    float normal[3];    float color[3];    MeshVertex(const float p[3], const float n[3], const glm::vec3& c)    {        pos[0] = p[0];        pos[1] = p[1];        pos[2] = p[2];        color[0] = c.x;        color[1] = c.y;        color[2] = c.z;        normal[0] = n[0];        normal[1] = n[1];        normal[2] = n[2];    }    MeshVertex(const glm::vec3& p, const glm::vec3& n, const glm::vec3& c)    {        pos[0] = p.x;        pos[1] = p.y;        pos[2] = p.z;        color[0] = c.x;        color[1] = c.y;        color[2] = c.z;        normal[0] = n.x;        normal[1] = n.y;        normal[2] = n.z;    }};class VulkanMesh{public:	VulkanMesh(vks::VulkanDevice *vulkanDevice);		void Draw(VkCommandBuffer cmdbuffer, VkPipelineLayout pipelineLayout);		void AddTriangles(CTriangleList &triangles, CVertexList &vertices, VkQueue queue);        void addVertexData(std::vector<MeshVertex>& vBuffer, std::vector<uint32_t>& iBuffer,                       const glm::vec3& position, VkQueue queue);        void updateUniformBuffer(glm::mat4 perspective, glm::mat4 view);        void setupDescriptorSet(VkDescriptorPool pool, VkDescriptorSetLayout descriptorSetLayout);		virtual ~VulkanMesh();		static void DebugTestDraw();		void DebugDrawNormals();        void offset(const glm::vec3 offset);private:        void prepareUniformBuffer();		void DebugLookAtTriangles();	void freeBuffers();	     struct UBO    {        glm::mat4 projection;        glm::mat4 model;        glm::mat4 normal;        glm::mat4 view;        glm::vec3 lightPos;//        glm::vec3 color;  // TODO uncomment this    };    vks::VulkanDevice *vulkanDevice;    glm::vec3 color;    glm::vec3 pos;    vks::Buffer vertexBuffer;    vks::Buffer indexBuffer;    uint32_t indexCount = 0;    UBO ubo;    vks::Buffer uniformBuffer;    VkDescriptorSet descriptorSet = VK_NULL_HANDLE;};#endif