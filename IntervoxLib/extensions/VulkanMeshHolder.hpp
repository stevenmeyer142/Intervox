//VulkanMeshHolder.hpp#ifndef __VULKANMESHHOLDER__#define __VULKANMESHHOLDER__#include <cstddef>#include <jni.h>#include "utility/C3DPoint.h"#include <vulkan/vulkan.h>#define kUseMeshRenderer 0class VulkanMesh;class CSlicesSet;class VulkanMeshHolder {	long			fGeomID;//	GLenum 			fMaterialFace;	#if kUseMeshRenderer		bool			fOwnsMeshRenderer;//	CGLMeshRenderer		*fMeshRenderer;#else//	VulkanMesh		*fLowResMesh;	VulkanMesh		*fHighResMesh;	//	GLuint		fHighResListID;//	GLuint		fLowResListID;		C3DPoint	fCenter;	long		fWeight; #endif	float		fColor[4];	float		fSpecularity;	float		fAmbience;	float		fDiffuseness;	float		fShininess;            static const float kDefaultSpecularity;    static const float kDefaultAmbience;    static const float kDefaultDiffuseness;    static const float kDefaultShininess;public:	  //      static const GLenum kDefaultGLFace;		VulkanMeshHolder();		virtual ~VulkanMeshHolder();		void Draw(VkCommandBuffer cmdbuffer, VkPipelineLayout pipelineLayout);            jint GetResolution();	#ifndef kNOJNI	void CreateGeometries(JNIEnv *env, jint width, jint height, jobjectArray objArrays,                         jint regionValue, jint geomID, int resolution);#endif		long GetGeomID()  { return fGeomID; }	static void DebugTestDraw();		void SetGeometryColor(float red, float green, float blue);		void SetTransparency(float transparency) { fColor[3] = transparency; }		bool IsOpaque() { return fColor[3] == 1.0f; }	virtual void DebugDraw(bool lowRes); //Override	void SetGeomID(long id) { fGeomID = id; }		bool GetCenter(C3DPoint &center, long &weight);	    void SetMaterialProperties(float specularity, float ambience, float diffuseness, float shininess);    void GetMaterialProperties(float& specularity, float& ambience, float& diffuseness, float& shininess);		void GrabGeometries(VulkanMeshHolder *other, jint geomID);#if !kUseMeshRenderer		//void SetLowResMesh(VulkanMesh *mesh) { fLowResMesh = mesh; }		void SetHighResMesh(VulkanMesh *mesh) { fHighResMesh = mesh; }	//	void SetMaterialFace(GLenum face) { fMaterialFace = face; } 	void DebugShowNormals(bool lowRes);	private :		void ComputeWeightedCenter(CSlicesSet &slicesSet, short region);	#endif	private:	void Deallocate();};#endif