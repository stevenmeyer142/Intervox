// CCubeMarcher.h// Created by Steve on Mon, Dec 21, 1998 @ 1:41 PM.#ifndef __CCubeMarcher__#define __CCubeMarcher__#include "CTriangleList.h"#include "CVertexList.h"#include "C3DPoint.h"#include "vulkan/vulkan.h"#define kScaleTriangles 0const float kScaleFactor = .1;struct GeometryInfo{	long  numOfVertices;	long  numOfTriangles;};class CSlicesSet;class VulkanMesh;class CCubeMarcher{	bool 		*fBoolArray;	short		fWidth;		//	x values	short		fHeight;	// y values	short		fDepth;	short		fResolution;	short 		fThreshold;		CVertexList 	fVertices;	CTriangleList	fTriangles;	C3DPoint		fStartPoint;	CSlicesSet		*fSlicesSet;	public:		CCubeMarcher(CSlicesSet *slicesSet, short resolution, short threshold, const C3DPoint &startPoint);		CCubeMarcher(bool *boolArray, short resolution, const C3DPoint &startPoint, short width, short height, short depth);	    // TODO is GeometryInfo needed    bool Get3DMesh(short resolution, GeometryInfo &geomInfo, std::shared_ptr<VulkanMesh> vulkanMesh, VkQueue queue);		virtual ~CCubeMarcher();		bool GetBool(short x, short y, short z);		bool GetBool(float x, float y, float z);		void SetBool(short x, short y, short z, bool set)  { fBoolArray[(z * fHeight + y) * fWidth + x] = set; }protected:	void MarchTheCubes(short resolution);	void AddFacet(short x, short y, short z);	void Cleanup();	};#endif