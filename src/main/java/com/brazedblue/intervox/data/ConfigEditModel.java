package com.brazedblue.intervox.data;import com.brazedblue.intervox.display.LayoutModel;import com.brazedblue.intervox.display.LayoutSelectionsModel;public class ConfigEditModel extends DataModel {  private Configuration fSelectedConfiguration;  private PatientData fSelectedDataFile;  private LayoutSelectionsNS fClonedSelections;  private boolean fDataFileSelected = false;  //	private int 			fChanges;  private static final String kSaveString = "Save";  private static final String kDontSaveString = "Don't Save";  public ConfigEditModel() {}  public void SetDataFileSelected(boolean selected) {    fDataFileSelected = selected && (fSelectedDataFile != null);    if (selected) {      SetSelectedConfiguration(fSelectedDataFile.GetConfiguration());    }  }  public void SetSelectedConfiguration(Configuration selectedConfig) {    //		AskToSaveCurrentConfiguration();    /*		if (fSelectedConfiguration != null)    {    	fSelectedConfiguration.RemoveListener(this);    } */    fSelectedConfiguration = selectedConfig;    /*		if (fSelectedConfiguration != null)    {    	fSelectedConfiguration.AddListener(this);    } */    //		fSelectedDataFile = null;    PostChanged(new DataChangedEvent(this, DataChangedEvent.SELECTED, 0, null));  }  public void SetSelectedDataFile(PatientData selectedDataFile) {    fSelectedDataFile = selectedDataFile;    fDataFileSelected = selectedDataFile != null;    if (selectedDataFile != null) {      fClonedSelections = (LayoutSelectionsNS) selectedDataFile.GetLayoutSelections().clone();    }  }  public PatientData GetSelectedDataFile() {    return fSelectedDataFile;  }  public Configuration GetSelectedConfiguration() {    return fSelectedConfiguration;  }  /*  	private void AskToSaveCurrentConfiguration()  	{  		if (fChanges > 0 && fSelectedConfiguration != null)  		{  			String[] saveChoices = {kDontSaveString, kSaveString};  			String result = NeuroSynchUtil.AskUser("Configuration Save", "Save the configuration, \"" +  					GetSelectedCongurationName() +"\"?", saveChoices, 1, 0);  			if (kSaveString.equals(result))  			{  				if (fSelectedDataFile != null)  				{  					fSelectedDataFile.SetConfiguration(fSelectedConfiguration);  				}  				else  				{  					try  					{  						fSelectedConfiguration.WriteToFile();  					}  					catch (java.io.IOException e)  					{  						NeuroSynchUtil.ErrorMessage("Couldn't write configuration file. " + e.getMessage(),  														NeuroSynchUtil.kShowDlog);  					}  				}  			}  			fChanges = 0;  		}  	}  */  public LayoutSelectionsModel GetLayoutSelections() {    LayoutSelectionsModel result = null;    if (fDataFileSelected) {      result = fClonedSelections;    } else {      result = fSelectedConfiguration.GetLayoutSelections();    }    return result;  }  public String GetSelectedCongurationName() {    String result = null;    if (fSelectedDataFile != null) {      result = fSelectedDataFile.GetConfigurationName();    } else if (fSelectedConfiguration != null) {      result = fSelectedConfiguration.GetName();    }    return result;  }  public void Finish() {    if (fClonedSelections != null && fSelectedDataFile != null) {      LayoutModel[] layouts = fClonedSelections.GetLayoutSelections();      LayoutSelectionsModel dataLayout = fSelectedDataFile.GetLayoutSelections();      dataLayout.SetLayoutSelections(layouts);    }  }}