package com.brazedblue.intervox.data;import java.io.*;import java.util.*;import com.brazedblue.intervox.file.*;import com.brazedblue.intervox.util.*;import com.brazedblue.intervox.device.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.display.OffsetCalculationDisplay;import com.brazedblue.intervox.display.LayoutSelectionsModel;import com.brazedblue.intervox.display.ConfigurationManager;public class Configuration extends DataModel implements Serializable, java.lang.Cloneable, DataModelListener {  		private File 						fFile;		//	 move to FileBasedDataModel		private Vector 						fOffsets = new Vector();	private int							fSavedSelectionIndex = -1; 	//	use only for serialization	transient private CalculatedOffset	fSelectedOffset = null;	private boolean						fUsingOffset = false;	private LayoutSelectionsModel		fLayoutSelections;		private Localizer					fLocalizer = new Localizer();	//	private transient boolean			fDirty = true;		static final long					serialVersionUID = -6378679034736921325L;	static public final String 		kOffsetNameProperty = "Offset: ";	static public final String 		kDeviceNameProperty = "Device: ";	static public final String 		kPortNameProperty = "Port: ";	static public final String 		kBlankString = "NONE";	static private final String		kNoFileName = "NO FILE";		static private final String[]	kProperties = { kOffsetNameProperty, kDeviceNameProperty, kPortNameProperty };    	public Configuration(File file) 	{		fFile = file;				InitializeListenedTos();				fLayoutSelections = new LayoutSelectionsNS();    }		public synchronized void SetFile(File file)	{		if (fFile == null)		{			fFile = file;		}		else		{			// doesn't reset file name, bug java 1.4.2_5 4/5/05			// fFile.renameTo(file);						File oldFile = fFile;			fFile = file;			try			{				WriteToFile();			}			catch (IOException e)			{				NeuroSynchUtil.ErrorMessage("Error in Configuration.SetFile " + e, NeuroSynchUtil.kNoDlog);			}			oldFile.delete();		}	}		private void InitializeListenedTos()	{		fLocalizer.AddListener(this);					if (fSelectedOffset != null)		{			fSelectedOffset.AddListener(this);		}		}		public void Dispose()	{		if (fLocalizer != null)		{			fLocalizer.RemoveListener(this);			fLocalizer = null;		}		if (fSelectedOffset != null)		{			fSelectedOffset.RemoveListener(this);			fSelectedOffset = null;		}	}		public void CopySettings(Configuration otherConfig)	{		//	can't clone fFile, shouldn't matter		fFile = new File(otherConfig.fFile.getPath()); 		fOffsets.removeAllElements();		Enumeration iter = otherConfig.fOffsets.elements();		fSelectedOffset = null;				while (iter.hasMoreElements()) 		{			CalculatedOffset nextElement = (CalculatedOffset)iter.nextElement();			CalculatedOffset newOffset = (CalculatedOffset)nextElement.clone();			fOffsets.addElement(newOffset);						if (nextElement == otherConfig.fSelectedOffset)			{				fSelectedOffset = newOffset;			}		}				fLocalizer = (Localizer)otherConfig.fLocalizer.clone();				SetLayoutSelections(otherConfig.fLayoutSelections);//		fDirty = true;	}		static public String[] GetProperties()	{		return kProperties;	}		public String GetPropertyString(String property)	{			String result = null;				if (kOffsetNameProperty.equals(property))		{			result = (GetSelectedOffsetPoint() != null) ? fSelectedOffset.GetLabel() : kBlankString;		}		else if (kDeviceNameProperty.equals(property))		{			result = fLocalizer.GetDeviceLabel();		}		else if (kPortNameProperty.equals(property))		{			result = fLocalizer.GetPortLabel();		}		else if (Debug.fgDebugging)		{			Debug.PrintStackTrace("Configuration.GetPropertyString, unknown property- " + property);		}				return result;	}		public void SetLayoutSelections(LayoutSelectionsModel layoutSelections)	{		fLayoutSelections.SetLayoutSelections(layoutSelections.GetLayoutSelections());	}			public LayoutSelectionsModel GetLayoutSelections()	{		return fLayoutSelections;	}		public String GetFullPathName()	{		return (fFile != null) ? fFile.getAbsolutePath() : kNoFileName;		}		public void DataModelChanged(DataModel model, DataChangedEvent event)	{			//	this should only be children changed 			// propagate only		Changed(event);	}		public synchronized Object clone() {	    Configuration config = (Configuration)super.clone();				//	can't clone fFile, shouldn't matter		config.fFile = new File(fFile.getPath()); 		config.fOffsets = new Vector();		Enumeration iter = fOffsets.elements();			while (iter.hasMoreElements()) 		{			CalculatedOffset nextElement = (CalculatedOffset)iter.nextElement();			CalculatedOffset newOffet = (CalculatedOffset)nextElement.clone();			   	config.fOffsets.addElement(newOffet);						if (nextElement == fSelectedOffset)			{				config.SelectOffset(newOffet);			}		}				config.fLocalizer = (Localizer)fLocalizer.clone();				config.InitializeListenedTos();	    return config;    }		public String GetName()	{		return (fFile != null) ? fFile.getName() : kNoFileName;	}		public boolean IsUsingTrackerOffset()	{		return fUsingOffset;	}			public void NotifyLayoutsChanged()	{		//	this should fire to the listeners		fLayoutSelections.SetSelectedLayout(fLayoutSelections.GetSelectedLayout());	}		public void SetUsingTrackerOffset(boolean set)	{		fUsingOffset = set;	}			static public Configuration ReadFromFile(File file) throws IOException	{		Configuration result = null;		InputStream stream = new FileInputStream(file);			// the buffer speeds up read/writes by a factor of ~4		stream = new BufferedInputStream(stream, 1000000);	//	1 megs		DataInputStream dataIn = new DataInputStream(stream);		FileHandler.ReadVersion(dataIn);		try		{			ObjectInputStream objectIn = new ObjectInputStream(dataIn);						result = (Configuration)objectIn.readObject();			result.fFile = file;			objectIn.close();		}		catch (ClassNotFoundException e)		{			throw new IOException("Unknown data type, " + e.getMessage());		}				return result;	}		public File GetFile()	{		if (Debug.fgDebugging && fFile == null)		{			NeuroSynchUtil.ErrorMessage("Configuration.GetFile, fFile: " + fFile, NeuroSynchUtil.kNoDlog);		}		return fFile;	}		public void AddOffset(String label)	{		CalculatedOffset offset = new CalculatedOffset(label);		fOffsets.addElement(offset);		SelectOffset(offset);//		fDirty = true;	}		public Localizer GetLocalizer()	{		return fLocalizer;	}		public void DeleteSelectedOffset()	{		if (fSelectedOffset != null)		{			int index = fOffsets.indexOf(fSelectedOffset);			fOffsets.removeElement(fSelectedOffset);						if (index >= fOffsets.size())			{				index--;			}						if (index >= 0)			{				SelectOffset((CalculatedOffset)fOffsets.elementAt(index));			}			else			{				SelectOffset(null);			}		}		//		fDirty = true;	}		public void WriteToFile() throws IOException	{				OutputStream stream = new FileOutputStream(fFile);			// the buffer speeds up read/writes by a factor of ~4		stream = new BufferedOutputStream(stream, 1000000);	//	1 megs		DataOutputStream dataOut = new DataOutputStream(stream);		FileHandler.WriteVersion(dataOut);		ObjectOutputStream objectOut = new ObjectOutputStream(dataOut);				objectOut.writeObject(this);		objectOut.close();	}		public Vector GetOffsets()	{		return fOffsets;	}		public void SelectOffset(CalculatedOffset offset)	{		if (fSelectedOffset != null)		{			fSelectedOffset.RemoveListener(this);		}				fSelectedOffset = offset;				if (fSelectedOffset != null)		{			fSelectedOffset.AddListener(this);		}				PostChanged(new DataChangedEvent(offset, DataChangedEvent.SELECTED, 0, null));				if (Debug.fgDebugging && offset != null && !fOffsets.contains(offset))		{			NeuroSynchUtil.ErrorMessage("Configuration.SelectOffset, offset not in list", NeuroSynchUtil.kNoDlog);		}	}		public CalculatedOffset GetSelectedOffset()	{		if (fSelectedOffset == null && (fOffsets.size() > 0))		{			SelectOffset((CalculatedOffset)fOffsets.elementAt(0));		}				return fSelectedOffset;	}		public FloatPoint GetSelectedOffsetPoint()	{		return (fSelectedOffset != null) ? fSelectedOffset.GetOffset() : null;	}		public void ProcessLocalizerPoint(LocalizerPointOutput output)	{		if (fUsingOffset && IsOffsetStation(output.GetStation()))		{			FloatPoint offset = GetSelectedOffsetPoint();						Object realPoint = output.GetDataOfType(DeviceOutput.ORIG_COORDINATE);			Object rotation = output.GetDataOfType(DeviceOutput.ROTATION_MATRIX);						if (offset != null && rotation != null && realPoint != null)			{				FloatPoint offsetPoint = new FloatPoint((FloatPoint)realPoint);				OffsetCalculationDisplay.OffsetPoint(offsetPoint, offset, (Matrix3)rotation);				output.SetPointCoordinate(offsetPoint);			}			else			{				NeuroSynchUtil.ErrorMessage("Configuration.ProcessLocalizerPoint, offset- " + offset					+ " angle- " + rotation, NeuroSynchUtil.kNoDlog);			}		}	}		private void readObject(ObjectInputStream s)      	throws ClassNotFoundException, IOException     {	     	s.defaultReadObject();				if (fSavedSelectionIndex >= 0 && fSavedSelectionIndex < fOffsets.size())		{			fSelectedOffset = (CalculatedOffset)fOffsets.elementAt(fSavedSelectionIndex);		}					//	interim code for backward compatibility		if (fLayoutSelections == null)		{			fLayoutSelections = new LayoutSelectionsNS();		}		InitializeListenedTos();   }				// obsolete	private void writeObject(ObjectOutputStream s)      throws IOException     {		fSavedSelectionIndex = fOffsets.indexOf(fSelectedOffset);	      	s.defaultWriteObject();    }		private boolean IsOffsetStation(int station)	{		return station == DeviceOutput.STATION1;	}/*		public boolean IsDirty()	{		return fDirty || fLocalizer.IsDirty() || (fLayoutSelections != null && fLayoutSelections.IsDirty());	} */			// not complete	public String toString()	{		String result = super.toString();		result += "/rFile - " + fFile + "/rLocalizer - " + fLocalizer;				return result;	}}