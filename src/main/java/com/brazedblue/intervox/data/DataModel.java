package com.brazedblue.intervox.data;import java.awt.*;import java.util.*;public class DataModel implements java.lang.Cloneable {  transient Vector fListeners = new Vector();  public DataModel() {}  public void AddListener(DataModelListener listener) {    if (!fListeners.contains(listener)) {      fListeners.addElement(listener);    }  }  public synchronized Object clone() {    try {      DataModel model = (DataModel) super.clone();      //	cloned model has no listeners      model.fListeners = new Vector();      return model;    } catch (CloneNotSupportedException e) {      // this shouldn't happen, since we are Cloneable      throw new InternalError();    }  }  public void RemoveListener(DataModelListener listener) {    fListeners.removeElement(listener);  }  public void PostChanged(DataChangedEvent event) {    // Changed should be called from the eventQueue, therefore post    javax.swing.SwingUtilities.invokeLater(new ChangeNotify(event));  }  protected void Changed(DataChangedEvent event) {    //	I guess cloning is the safe thing    Enumeration listeners = ((Vector) fListeners.clone()).elements();    while (listeners.hasMoreElements()) {      DataModelListener listener = (DataModelListener) listeners.nextElement();      event.DebugCheckListenedToList(listener);      listener.DataModelChanged(this, event);    }  }  protected class ChangeNotify implements Runnable {    DataChangedEvent fEvent;    ChangeNotify(DataChangedEvent event) {      fEvent = event;    }    public void run() {      DataModel.this.Changed(fEvent);    }  }}