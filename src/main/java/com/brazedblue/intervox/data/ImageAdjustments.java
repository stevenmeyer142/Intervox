package com.brazedblue.intervox.data;public class ImageAdjustments  implements java.io.Serializable, Cloneable { 	float	fBrightness = 1;	float	fContrast = 1;		static public final boolean kUseHighLow = true;		int		fHigh;	int 	fLow;		int fMaxValue = -1;		static final long serialVersionUID =  -6246537881432847756L;    public ImageAdjustments() 	{    }		public int GetAdjustedMaxValue()	{		if (kUseHighLow)		{			return fHigh;		}		else		{			float contrastAdjustedMax = fMaxValue / fContrast;						float brightnessDelta = fMaxValue * (fBrightness - 1);						return Math.round(contrastAdjustedMax + brightnessDelta);		}	}		public void SetAdjustedMaxValue(int value)	{		fHigh = value;	}		public void SetAdjustedMinValue(int value)	{		fLow = value;	}		public int GetAdjustedMinValue()	{		if (kUseHighLow)		{			return fLow;		}		else		{			float contrastAdjustedMax = fMaxValue / fContrast;									float brightnessDelta = fMaxValue * (fBrightness - 1);						return Math.round(fMaxValue - contrastAdjustedMax + brightnessDelta);		}	}		public Object clone () {	    try { 			Object me = super.clone();						return me;					} catch (CloneNotSupportedException e) { 			// this shouldn't happen, since we are Cloneable			throw new InternalError();		}	}		public int GetMaxValue()	{		return fMaxValue;	}			public boolean Equals(ImageAdjustments other)	{		if (kUseHighLow)		{			return (other.fHigh == fHigh)  && (other.fLow == fLow);		}		else		{			return (other.fBrightness == fBrightness)  && (other.fContrast == fContrast);		}	}		public void SetBrightness(float brightness)	{		fBrightness = brightness;	}	public float GetBrightness()	{		return fBrightness;	}	public void SetContrast(float contrast)	{		fContrast = contrast;	}	public float GetContrast()	{		return fContrast;	}		public void SetMaxValue(int maxValue)	{		fMaxValue = maxValue;		if (kUseHighLow)		{			fHigh = fMaxValue;		}	} }