package com.brazedblue.intervox.data;import com.brazedblue.intervox.display.*;import com.brazedblue.intervox.util.NeuroSynchUtil;import java.io.*;import java.util.Vector;class LayoutSelectionsNS    implements java.io.Serializable, LayoutSelectionsModel, java.lang.Cloneable {  private Vector fLayouts = new Vector();  private LayoutModel fCurrentLayout;  private static final long serialVersionUID = -2369455766639413026L;  private transient Vector fListeners = new Vector();  //	private transient boolean			fDirty = true;  private static LayoutModel[] kDefaultLayouts =      new LayoutModel[] {        new ImageViewsLayout(ImageViewsLayout.kDefaultLayout),        new ImageViewsLayout(ImageViewsLayout.kLargePrimaryCoronal),        new ImageViewsLayout(ImageViewsLayout.kLargePrimarySagittal),        new ImageViewsLayout(ImageViewsLayout.kLargePrimaryAxial),        new ImageViewsLayout(ImageViewsLayout.kSmallPrimaryCoronal),        new ImageViewsLayout(ImageViewsLayout.kSmallPrimarySagittal),        new ImageViewsLayout(ImageViewsLayout.kSmallPrimaryAxial),        new ImageViewsLayout(ImageViewsLayout.k3ViewTrajectory),        new ImageViewsLayout(ImageViewsLayout.k1ViewTrajectory),        new ImageViewsLayout(ImageViewsLayout.k3ViewInterceptCoronal),        new ImageViewsLayout(ImageViewsLayout.k3ViewInterceptSagittal),        new ImageViewsLayout(ImageViewsLayout.k3ViewInterceptAxial),        new ImageViewsLayout(ImageViewsLayout.k3ViewCoronalAnd3D),        new ImageViewsLayout(ImageViewsLayout.kDoubleDefaultLayout)      };  public LayoutSelectionsNS() {    CreateDefaultLayouts();  }  private void CreateDefaultLayouts() {    fLayouts.removeAllElements();    for (int i = 0; i < kDefaultLayouts.length; i++) {      fLayouts.addElement(kDefaultLayouts[i]);    }    fCurrentLayout = kDefaultLayouts[0];    //		fDirty = true;  }  public LayoutModel GetSelectedLayout() {    return fCurrentLayout;  }  //	synchronized because fListeners can't change between array creation and "copyInto"  public synchronized LayoutModel[] GetLayoutSelections() {    LayoutModel[] result = new LayoutModel[fLayouts.size()];    fLayouts.copyInto(result);    return result;  }  public void AddLayoutListener(LayoutListener listener) {    if (!fListeners.contains(listener)) {      fListeners.addElement(listener);    }  }  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {    s.defaultReadObject();    fListeners = new Vector();    //		fDirty = false;  }  public void RemoveLayoutListener(LayoutListener listener) {    fListeners.removeElement(listener);  }  public void SetSelectedLayout(LayoutModel model) {    if (model != null) {      fCurrentLayout = model;      FireLayoutEvent(new LayoutEvent(LayoutEvent.kLayoutSelected));      //			fDirty = true;    }  }  void FireLayoutEvent(LayoutEvent event) {    if (fListeners.size() > 0) {      LayoutListener[] listeners;      synchronized (fListeners) {        listeners = new LayoutListener[fListeners.size()];        fListeners.copyInto(listeners);      }      for (int i = 0; i < listeners.length; i++) {        listeners[i].ProcessLayoutEvent(event);      }    }  }  public synchronized void SetLayoutSelections(LayoutModel[] layouts) {    int selectionIndex = fLayouts.indexOf(fCurrentLayout);    fLayouts.removeAllElements();    for (int i = 0; i < layouts.length; i++) {      fLayouts.addElement(layouts[i]);    }    if (selectionIndex >= 0 && selectionIndex < fLayouts.size()) {      fCurrentLayout = (LayoutModel) fLayouts.elementAt(selectionIndex);    } else {      fCurrentLayout = (LayoutModel) fLayouts.elementAt(0);    }    FireLayoutEvent(new LayoutEvent(LayoutEvent.kLayoutsModified));    FireLayoutEvent(new LayoutEvent(LayoutEvent.kLayoutSelected));  }  public synchronized Object clone() {    try {      LayoutSelectionsNS result = (LayoutSelectionsNS) super.clone();      result.fListeners = new Vector();      result.fLayouts = new Vector();      for (int i = 0; i < fLayouts.size(); i++) {        LayoutModel layout = (LayoutModel) fLayouts.elementAt(i);        LayoutModel newLayout = (LayoutModel) layout.clone();        result.fLayouts.addElement(newLayout);        if (layout == fCurrentLayout) {          result.fCurrentLayout = newLayout;        }      }      return result;    } catch (CloneNotSupportedException e) {      // this shouldn't happen, since we are Cloneable      throw new InternalError();    }  }  /*  	public boolean IsDirty()  	{  		return fDirty;  	}  */  private void writeObject(ObjectOutputStream s) throws IOException {    s.defaultWriteObject();    //		fDirty = false;  }  public void AddLayout(LayoutModel layout) {    LayoutModel newLayout = (LayoutModel) layout.clone();    fLayouts.add(newLayout);    FireLayoutEvent(new LayoutEvent(LayoutEvent.kLayoutsModified));  }  public void DeleteLayout(LayoutModel layout) {    fLayouts.removeElement(layout);    if (layout == fCurrentLayout) {      if (fLayouts.size() > 0) {        SetSelectedLayout((LayoutModel) fLayouts.firstElement());      } else {        fCurrentLayout = null;        NeuroSynchUtil.ErrorMessage("Last Layout Deleted", NeuroSynchUtil.kNoDlog);      }    }    FireLayoutEvent(new LayoutEvent(LayoutEvent.kLayoutsModified));  }}