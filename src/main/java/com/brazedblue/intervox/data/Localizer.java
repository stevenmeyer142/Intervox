package com.brazedblue.intervox.data;import com.brazedblue.intervox.device.PortDevice;import com.brazedblue.intervox.serial.SerialPort;import com.brazedblue.intervox.util.Debug;import java.lang.*;import java.io.*;public class Localizer extends DataModel implements java.io.Serializable, Cloneable {  			//	 when adding data members, add relevant code to "clone" and "equals"	private String 	fDeviceType = PortDevice.kDefaultDevice;	private String	fSerialPort = SerialPort.GetDefaultPort();//	private transient boolean fDirty = true;		public static final String 	kDeviceLabelChanged = "DeviceLabelChanged";		static final long			serialVersionUID = -5228598564881087387L;    public Localizer() 	{		if (true)		{			Debug.PrintStackTrace("Localizer created");		}    }	public boolean equals(Object obj) 	{		boolean result = false;		if (obj instanceof Localizer)		{			Localizer other = (Localizer)obj;						result = other.fDeviceType.equals(fDeviceType) && other.fSerialPort.equals(fSerialPort);		}        return result;    }		public SerialPort GetSerialPort()	{		String port = SerialPort.GetExistingPort(fSerialPort);				if (!fSerialPort.equals(port) && port != null)		{			// mark changed for saving			SetPortLabel(port);		}				return SerialPort.NewSerialPort(fSerialPort);	}		public String GetDeviceLabel()	{		return fDeviceType;	}		public String GetPortLabel()	{		return fSerialPort;	}		public void SetDeviceLabel(String deviceType)	{		if (deviceType != fDeviceType)		{			fDeviceType = deviceType;			PostChanged(new DataChangedEvent(fDeviceType, DataChangedEvent.CHANGED, 0, kDeviceLabelChanged));//			fDirty = true;		}	}		public void SetPortLabel(String portLabel)	{		if (fSerialPort != null && !fSerialPort.equals(portLabel))		{			fSerialPort = portLabel;			PostChanged(new DataChangedEvent(fSerialPort, DataChangedEvent.CHANGED, 0, null));//			fDirty = true;		}	}		public PortDevice GetPortDevice()	{		return PortDevice.NewPortDevice(fDeviceType);	}		public String[] GetSerialPortList()	{		return SerialPort.GetPortsList();	}	public String[] GetDeviceList()	{		return PortDevice.GetDeviceList();	}/*	boolean IsDirty()	{		return fDirty;	} */	 	private void readObject(ObjectInputStream s)		throws ClassNotFoundException, IOException     {      	s.defaultReadObject();      	//		fDirty = false;	}		private void writeObject(ObjectOutputStream s)		throws IOException     {      	s.defaultWriteObject();		//		fDirty = false;    }		public String toString()	{		String result = super.toString();		result += "/r" + fDeviceType + ", " + fSerialPort;				return result;	}}