package com.brazedblue.intervox.data;import java.io.*;import java.util.*;import java.awt.Dimension;import java.awt.Image;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.util.*;import com.brazedblue.intervox.dicom.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.file.*;import com.brazedblue.intervox.display.*;import com.brazedblue.intervox.registration.*;import com.brazedblue.intervox.tracker.TrackerSettingsAccess;import com.brazedblue.intervox.display.ConfigurationManager;	//	actually not everything persists	//	TASK: encapsulate versioning	//	TASK: seperate out actual persistant datapublic class PatientData  extends DataModel implements Serializable, DataModelListener  {																	// manages data associated with one 3D image 	ImagesManager					fImagesManager = new ImagesManager();	CoRegistrations 				fCoRegistrations = new CoRegistrations(fImagesManager.GetFiducialsAccess(SingleSpaceID.GetDefaultVirtualSpaceID()));// ********************		Configuration		********************		Configuration					fConfiguration;		transient ConfigurationManager	fConfigurationManager;	//	LayoutSelectionsNS			fLayoutSelections;//	Vector						fLayouts;//	ImageViewsLayout			fCurrentLayout;	//	static public final String	kNewLayoutString = "New Layout";/*	static ImageViewsLayout[]	kDefaultLayouts = new ImageViewsLayout[]										{											new ImageViewsLayout(ImageViewsLayout.kDefaultLayout),											new ImageViewsLayout(ImageViewsLayout.kLargePrimaryCoronal),											new ImageViewsLayout(ImageViewsLayout.kLargePrimarySagittal),											new ImageViewsLayout(ImageViewsLayout.kLargePrimaryAxial),											new ImageViewsLayout(ImageViewsLayout.kSmallPrimaryCoronal),											new ImageViewsLayout(ImageViewsLayout.kSmallPrimarySagittal),											new ImageViewsLayout(ImageViewsLayout.kSmallPrimaryAxial),											new ImageViewsLayout(ImageViewsLayout.k3ViewTrajectory),											new ImageViewsLayout(ImageViewsLayout.k1ViewTrajectory),											new ImageViewsLayout(ImageViewsLayout.k3ViewInterceptCoronal),											new ImageViewsLayout(ImageViewsLayout.k3ViewInterceptSagittal),											new ImageViewsLayout(ImageViewsLayout.k3ViewInterceptAxial),											new ImageViewsLayout(ImageViewsLayout.k3ViewCoronalAnd3D),											new ImageViewsLayout(ImageViewsLayout.kDoubleDefaultLayout)										}; */	transient private ImageSettingsFactory fImageSettingsFactory;	// ********************		Configuration		********************		transient DataModelListener		fChildListener;	transient String				fFileName = "Untitled-" + fgFileCounter++;		//	transient	File				fFile;		static private int				fgFileCounter = 0;	static final int 				kVersionNum = 1;	static final long				serialVersionUID = -8636249877080612702L;	static public final boolean 	kDontSerializePatientData = true;	    public PatientData() 	{//		fLayoutSelections = new LayoutSelectionsNS();				SetupChildListener();   }/*     public void SetFile(File file)   {   		fFile = file;   } */  /*     private void CreateDefaultLayouts()   {		fLayouts = new Vector();		for (int i = 0; i < kDefaultLayouts.length; i++)		{			fLayouts.addElement(kDefaultLayouts[i]);				}				fCurrentLayout = kDefaultLayouts[0];   } */      public void SetConfiguration(Configuration config)   {   		if (fConfiguration != null)		//	avoids losing listeners   		{				   			fConfiguration.CopySettings(config);   		}   		else   		{   			fConfiguration = config;   		}   }      public Configuration GetConfiguration()   {   		return fConfiguration;   }      public ImageSettingsFactory GetImageSettingsFactory()   {   		if (fImageSettingsFactory == null)		{			fImageSettingsFactory = new DefaultImageSettingsFactory();		}		   		return fImageSettingsFactory;   }   public CoRegistrationsAccess GetCoRegistrations()   {   		return fCoRegistrations;   }      public void DataModelChanged(DataModel model, DataChangedEvent event)   {//   		this.Changed(event);	// continue broadcasting								// maybe do this as special dataModel ,"Owned data"   }      protected void SetupChildListener()   {   		if (Debug.fgDebugging && fChildListener != null)		{			Debug.PrintStackTrace("Non-null fChildListener");		}				fChildListener = new DataModelListener()		{			public void DataModelChanged(DataModel model, DataChangedEvent event)			{				PostChanged(event);			}		};		//		fCoRegistrations.AddListener(fChildListener);				if (fConfiguration != null)		{			fConfiguration.AddListener(fChildListener);		}		fImagesManager.AddListener(fChildListener);   }    public void SetFileName(String fileName)   {   		fFileName = fileName;   }      public String GetConfigurationName()   {	   return fFileName; // + "(" + fConfiguration.GetName() + ")";   } 	public ImageSpacesAccessor GetImageSpacesAccessor()	{		return fImagesManager.GetImageSpacesAccessor();	}		public SingleSpaceIDResolver GetSingleSpaceIDResolver()	{		return GetImageSpacesAccessor();	}        	//	this should be obsoleted by the use of interfaces   public RegionsOfInterest GetRegionsOfInterest(SingleSpaceID whichSpace)   {		return fImagesManager.GetRegionsOfInterest(whichSpace);      }     public ImageFilterAccessor GetImageFilterAccessor()   {		return fImagesManager.GetImageFilterAccessor();   }   public Vector GetSnapshotsList(SingleSpaceID whichSpace)   {		return fImagesManager.GetSnapshotsList(whichSpace);      } /*      public void StartLoading()   {   		SetDataComplete(false);   } *//*      public void FinishLoading() throws IOException   { //  		fImagesManager.FinishLoading();		PostChanged(new DataChangedEvent(this, DataChangedEvent.LOADED, 0, ""));   }*//*      public void SetDataComplete(boolean complete)   {   		fImagesManager.SetDataComplete(complete);   }*//*     public Histogram GetSeriesHistogram(SingleSpaceID whichSpace)   {		return fImagesManager.GetSeriesHistogram(whichSpace);   }*/		public boolean IsComplete()	{		return fImagesManager.IsComplete();	}		public SingleSpaceID ReconcileSpace(SingleSpaceID space)	{		//	this gets specific ID for default space		return fImagesManager.GetImage3DData(space).GetSpaceID();	}	public LayoutSelectionsModel GetLayoutSelections()	{		return fConfiguration.GetLayoutSelections();	}/*		public ImageViewsLayout GetCurrentLayout()	{		return fCurrentLayout;	}*/	/*	public void SetCurrentLayout(ImageViewsLayout layout)	{		fCurrentLayout = layout;		PostChanged(new DataChangedEvent(this, DataChangedEvent.CHANGED, 0, kNewLayoutString));	} */	/*	public Vector GetLayoutsList()	{		return fLayouts;	} */		public void UpdateTrackerSettingsAccess(TrackerSettingsAccess trackerSettings)	{		fCoRegistrations.UpdateTrackerSettingsAccess(trackerSettings);	}	public void Dispose()	{		fImagesManager.Dispose();				if (Debug.fgDebugging)		{			System.out.println(fFileName + "fFileName disposed");		}//		fImageSeries = null;//		fFiducialPoints = null;	}		protected void finalize() throws Throwable	{		super.finalize();	}	/*	public void validateObject() throws InvalidObjectException	{			} */		private void WriteObjectsToStream(ObjectOutput objectOut) throws IOException	{		objectOut.writeInt(kVersionNum);		objectOut.writeObject(fImagesManager);		objectOut.writeObject(fCoRegistrations);		objectOut.writeObject(fConfiguration);//		objectOut.writeObject(fLayoutSelections);	}		public void WriteFile(File file) throws IOException	{		OutputStream outStream = new FileOutputStream(file);			// the buffer speeds up read/writes by a factor of ~4		outStream = new BufferedOutputStream(outStream, 5000000);	//	5 megs				DataOutputStream dataOut = new DataOutputStream(outStream);		WriteHeader(dataOut);		ObjectOutputStream objectOut = new ObjectOutputStream(dataOut);		if (kDontSerializePatientData)		{			WriteObjectsToStream(objectOut);		}		else		{			objectOut.writeObject(this);		}		objectOut.close();				SetFileName(file.getName());						//  until there are multiple configurations, always update default/*		if (fConfigurationManager != null)		{			Configuration selectedConfig = fConfigurationManager.GetSelectedConfiguration();						selectedConfig.SetLayoutSelections(fConfiguration.GetLayoutSelections());			selectedConfig.WriteToFile();		} */	}		private void NotifyConfigurationChanged()	{		fConfiguration.NotifyLayoutsChanged();	}		public void ReadObjectsFromStream(ObjectInput input) throws ClassNotFoundException, IOException	{		input.readInt();	// kVersionNum		fImagesManager = (ImagesManager)input.readObject();		fCoRegistrations = (CoRegistrations)input.readObject();		fConfiguration = (Configuration)input.readObject();//		fLayoutSelections = (LayoutSelectionsNS)input.readObject();		input.close();		SetupCoRegistrations();		SetupChildListener();	}		public void SetCofigurationManager(ConfigurationManager configManager)	{		fConfigurationManager = configManager;	}		public void ChooseConfiguration()	{		if (fConfigurationManager != null)		{			Configuration newConfiguration = fConfigurationManager.GetConfigurationFromUser();			if (newConfiguration != null)			{				fConfiguration = newConfiguration;			}		}	}		static public PatientData ReadFile(File file, ProgressBroadcaster broadcaster, TrackerSettingsAccess trackerSettings) throws IOException	{			InputStream stream = new FileInputStream(file);			// the buffer speeds up read/writes by a factor of ~4		stream = new BufferedInputStream(stream, 5000000);	//	5 megs				if (kDontSerializePatientData)		{			ProgressInputStream progressStream = new ProgressInputStream("Reading serialized file", stream, broadcaster);			stream = progressStream;		}				DataInputStream dataIn = new DataInputStream(stream);		ReadHeader(dataIn);				PatientData result = null;		try		{			ObjectInputStream objectIn = new ObjectInputStream(dataIn);			if (kDontSerializePatientData)			{				result = new PatientData();				PatientDataSeriesFileLoaderThread thread = 						new PatientDataSeriesFileLoaderThread(result, broadcaster, objectIn, trackerSettings);							thread.start();			}			else			{				result = (PatientData)objectIn.readObject();				objectIn.close();			}		}		catch (ClassNotFoundException e)		{			throw new IOException("Unknown data type, " + e.getMessage());		}				if (result != null)		{			result.SetFileName(file.getName());		}								return result;	}/*	public ImageAdjustments GetImageAdjustments(SingleSpaceID whichSpace)	{		return fImagesManager.GetImageAdjustments(whichSpace);	}*/		private void WriteHeader(DataOutputStream out) throws IOException	{		FileHandler.WriteVersion(out);	}	private static void ReadHeader(DataInputStream in) throws IOException	{		FileHandler.ReadVersion(in);	}/* 	public TransformationMatrix GetTransformationMatrix()	{		return fTransformer.GetTransformationMatrix();	}*//*		public void SetTransformationMatrix(TransformationMatrix transformMatrix)	{		fTransformer.SetTransformationMatrix(transformMatrix);	}*/		public Image3DField GetImage3DField(SingleSpaceID whichSpace)	{		return fImagesManager.GetImage3DField(whichSpace);	}		public AWTImageReceiver GetAWTImageReceiver()	{		return fImagesManager;	}	public DicomSeriesReceiver GetDicomImageReceiver()	{		return fImagesManager;	}		/*public ProgressBroadcaster GetProgressBroadcaster()	{		return this;	} */		public FiducialSetsAccess GetFiducialSetsAccess(SingleSpaceID whichSpace)	{		return fImagesManager.GetFiducialsAccess(whichSpace);	}/*		public void StartLoadingNotify(int loadingNum, String message)	{		PostChanged(new DataChangedEvent(this, DataChangedEvent.START_L0ADING, loadingNum, message));	} *//*		public boolean IsUsingReference()	{		return fTransformer.IsUsingReference();	}	*/	/*	public void LoadingNotify(int value, String message)	{		PostChanged(new DataChangedEvent(this, DataChangedEvent.L0ADING, value, message));	} *//*		public void EndLoadingNotify()	{		PostChanged(new DataChangedEvent(this, DataChangedEvent.LOADED, 0, ""));	}*/		public Location3D GetSelectedPoint(SingleSpaceID whichSpace)	{		return fImagesManager.GetSelectedPoint(whichSpace);	}	public void SetSelectedPoint(Location3D point, SingleSpaceID whichSpace)	{		fImagesManager.SetSelectedPoint(point, whichSpace);	}/*		public void SetUsingReference(boolean set)	{		fTransformer.SetUsingReference(set);	}	*//*		public Vector GetSnapshotsList()	{		if (fSnapshots == null)		{			fSnapshots = new Vector();		}				return fSnapshots;	} *//*		public void AddDataSet(DicomImageDataSet dataSet) throws java.io.IOException	{		GetImageSlicesStorage().AddDataSet(dataSet);			} */ 	private void readObject(ObjectInputStream s)      	throws ClassNotFoundException, IOException     {      	s.defaultReadObject();		s.readInt();	// kVersionNum/*		if (fLayouts == null)		{			CreateDefaultLayouts();		} */		SetupCoRegistrations();		SetupChildListener();   }	private void writeObject(ObjectOutputStream s)      throws IOException     {      	s.defaultWriteObject();		s.writeInt(kVersionNum);    }		protected void SetupCoRegistrations()	{		fCoRegistrations.SetFiducialsAccess(fImagesManager.GetFiducialsAccess(SingleSpaceID.GetDefaultVirtualSpaceID()));		fCoRegistrations.SetSingleSpaceIDResolver(GetSingleSpaceIDResolver());	}/*  	public void Start(String message, int low, int high)	{		PostChanged(new DataChangedEvent(this, DataChangedEvent.START_L0ADING, high, message));	}		public void UpdateCurrentValue(String note, int value)	{		PostChanged(new DataChangedEvent(this, DataChangedEvent.L0ADING, value, note));	} */	/*	public void End()	{		PostChanged(new DataChangedEvent(this, DataChangedEvent.LOADED, 0, ""));	} */		private class DefaultImageSettingsFactory implements ImageSettingsFactory	{		private DefaultImageSettingsFactory()		{		}				public ImageControlSettings GetCurrentSettings()		{			DefaultImageControlSettings result = new DefaultImageControlSettings();			result.SetData(PatientData.this);			return result;		}	}}class PatientDataSeriesFileLoaderThread extends Thread {	PatientData				fData;	ProgressBroadcaster		fBroadcaster;	ObjectInput				fInput;	TrackerSettingsAccess 	fSettings;	    public PatientDataSeriesFileLoaderThread(PatientData data, ProgressBroadcaster broadcaster, 					ObjectInput input, TrackerSettingsAccess settings) 	{		fData = data;		fBroadcaster = new SwingSafeProgress(broadcaster);		fInput = input;		fSettings = settings;   	}		public void run() 	{		try		{			fData.ReadObjectsFromStream(fInput);			if (fSettings != null)			{				fData.UpdateTrackerSettingsAccess(fSettings);			}						fBroadcaster.Finish(true);					}		catch (IOException e)		{			NeuroSynchUtil.ErrorMessage("Couldn't load series file. " + e.getMessage(), true);			fBroadcaster.Finish(false);		} 		catch (ClassNotFoundException e2)		{			NeuroSynchUtil.ErrorMessage("Couldn't load series file. " + e2.getMessage(), true);			fBroadcaster.Finish(false);		}    }}