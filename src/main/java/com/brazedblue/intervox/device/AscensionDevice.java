package com.brazedblue.intervox.device;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.util.*;public class AscensionDevice extends PortDevice {  private byte[] fByteDataBuffer = new byte[kDataRecordLength * 2];  private short[] fShortDataBuffer = new short[kDataRecordLength];  private float[] fPositionDataBuffer = new float[kPositionCount];  private float[] fMatrixDataBuffer = new float[kMatrixCount];  private static final int kPositionCount = 3;  private static final int kMatrixCount = 9;  private static final int kDataRecordLength =      kMatrixCount + kPositionCount; // Ascension Manual, p72 "Position/Matrix"  private static final float kcmPerInch = 2.54f;  private static final float kMaxInches = 36;  // Ascension Manual, p72 "Position"  private static final float kMaxCentimeters = kMaxInches * kcmPerInch;  private static final short kMaxHex = 0x7FFF;  private static final float kPositionScaleFactor = kMaxCentimeters / kMaxHex;  // Ascension Manual, p72 "Position/Quaternion"  private static final float kMaxMatrix = .99996f;  private static final float kMatrixScaleFactor = kMaxMatrix / kMaxHex;  private static final String kPositionMatrixCmd = "Z";  private static final String kStreamCmd = "@";  private static final String kPointCmd = "B";  private static int gDebugCounter = 0;  public AscensionDevice() {}  public void Connecting(Tracker tracker) {    tracker.SendString(kPositionMatrixCmd);    tracker.SendString(kStreamCmd);  }  private static void TranslateAscensionData(byte[] data, int length, short[] result) {    for (int i = 0; i < length; i++) {      result[i] = (short) (((short) (data[i * 2] & 0x7F) | (short) (data[i * 2 + 1] << 7)) << 2);    }  }  private static void TranslateHexToFloat(      short[] data, int dataStart, int length, float[] result, int resultStart, float scaleFactor) {    for (int i = 0; i < length; i++) {      result[resultStart + i] = data[dataStart + i] * scaleFactor;    }  }  private static void DebugCheckTranslation(byte[] data, int length, short[] result) {    if (gDebugCounter > 200) {      for (int i = 0; i < length; i++) {        System.out.println(            "Data   "                + Debug.ByteToBinaryString(data[i * 2 + 1])                + Debug.ByteToBinaryString(data[i * 2]));        System.out.println("Result " + Debug.ShortToBinaryString(result[i]));      }    } else {      gDebugCounter++;    }  }  public void Disconnecting(Tracker tracker) {    tracker.SendString(kPointCmd);  }  public void HandleOutput(DeviceOutput output, Tracker tracker) {}  public void SendToTracker(Tracker tracker) {}  //	 synchronize to ensure integrity of various buffers  public synchronized DeviceOutput CreateOutputObject(ScrollingBuffer buffer) {    DeviceOutput result = null;    // for now just find data records    int dataStart = -1;    for (int i = 0; i < buffer.Length(); i++) {      int ch = buffer.GetByte(i);      if ((ch & 0x80) != 0) {        dataStart = i;        break;      }    }    if (dataStart > 0) {      buffer.Scroll(dataStart);    }    if (kDataRecordLength * 2 <= buffer.Length()) {      try {        if (buffer.GetByteArray(fByteDataBuffer, kDataRecordLength * 2)) {          TranslateAscensionData(fByteDataBuffer, kDataRecordLength, fShortDataBuffer);          TranslateHexToFloat(              fShortDataBuffer, 0, kPositionCount, fPositionDataBuffer, 0, kPositionScaleFactor);          TranslateHexToFloat(              fShortDataBuffer,              kPositionCount,              kMatrixCount,              fMatrixDataBuffer,              0,              kMatrixScaleFactor);          FloatPoint pos =              new FloatPoint(                  fPositionDataBuffer[0], fPositionDataBuffer[1], fPositionDataBuffer[2]);          Matrix3 rotation = new Matrix3(fMatrixDataBuffer);          rotation.invert();          result = LocalizerPointOutput.GetNewLocalizerPoint(pos, rotation, DeviceOutput.STATION1);        } else {          NeuroSynchUtil.ErrorMessage(              "AscensionDevice.CreateOutputObject bugginess", NeuroSynchUtil.kNoDlog);        }      } finally {        buffer.Scroll(kDataRecordLength);      }    }    return result;  }}