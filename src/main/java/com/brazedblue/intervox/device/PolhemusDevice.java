package com.brazedblue.intervox.device;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.util.*;public class PolhemusDevice extends PortDevice {  private static final String kContinuous = "C";  private static final String kNonContinuous = "c";  private static final char[] kChar25 = {'\25'};  private static final String kReset = new String(kChar25);  private static final String kStatus = "S";  private static final String kToggleAtPoint = "Y";  private static final String kDecimalUnits = "u";  private static final String kOutputFormat = "O2,11,1\r";  public PolhemusDevice() {}  public void AskForStatus(Tracker tracker) {    String statusCmd = GetStatusCommand();    if (statusCmd != null) {      tracker.SendString(statusCmd);    }  }  public void Connecting(Tracker tracker) {    AskForStatus(tracker);  }  public void Disconnecting(Tracker tracker) {    String cmd = GetNonContinuousCommand();    if (cmd != null) {      tracker.SendString(cmd);    }  }  public DeviceOutput CreateOutputObject(ScrollingBuffer buffer) {    DeviceOutput result = null;    int crPos = buffer.FindPos((byte) '\r');    if (crPos < buffer.Length() + 1) {      if (buffer.GetByte(crPos + 1) == '\n') // we have a line of data      {        try {          if (crPos >= 3) // must be at least 3 status bytes          {            result = CreateOutputObject(buffer.GetString(crPos));          }        } finally {          buffer.Scroll(crPos + 2); // scroll off everything include cr and new line        }      } else // some sort of gibberish or exception, just scroll off cr      {        buffer.Scroll(crPos + 1);      }    }    return result;  }  private DeviceOutput CreateOutputObject(String string) {    DeviceOutput result = null;    if (string.length() > 0) {      if (string.charAt(0) == '0' && string.length() >= 52) {        try {          int station = Short.parseShort(string.substring(1, 2));          FloatPoint coordinate =              new FloatPoint(                  string.substring(3, 10), string.substring(10, 17), string.substring(17, 24));          float w = FloatPoint.ToFloat(string.substring(24, 31));          float x = FloatPoint.ToFloat(string.substring(31, 38));          float y = FloatPoint.ToFloat(string.substring(38, 45));          float z = FloatPoint.ToFloat(string.substring(45, 52));          Matrix3 rotationMatrix = new Matrix3();          rotationMatrix.RotationFromQuat(x, y, z, w);          result = LocalizerPointOutput.GetNewLocalizerPoint(coordinate, rotationMatrix, station);        } catch (NumberFormatException e) {          NeuroSynchUtil.ErrorMessage(              "Polhemus output constructor err- " + e.getMessage(), NeuroSynchUtil.kNoDlog);        }      } else if (string.charAt(0) == '2' && string.charAt(2) == 'S' && string.length() > 6) {        int type = DeviceOutput.STATUS;        String status = string.substring(3, 6);        status = status.trim();        try {          int statusFlags = Integer.valueOf(status).intValue();          String binaryStr = Integer.toBinaryString(statusFlags);          boolean continuous = binaryStr.charAt(binaryStr.length() - 4) == '1';          boolean toPoint = binaryStr.charAt(0) == '1' && binaryStr.length() == 7;          boolean decimal = binaryStr.charAt(binaryStr.length() - 2) == '1';          DeviceStatus devStatus = new DeviceStatus(continuous, toPoint, decimal);          result = new DeviceOutput(devStatus, type);        } catch (NumberFormatException e) {          NeuroSynchUtil.ErrorMessage(              "Couldn't parse Polhemus status " + e.getMessage(), NeuroSynchUtil.kNoDlog);        }      }    }    return result;  }  //	usually responding to a status output  public void HandleOutput(DeviceOutput output, Tracker tracker) {    if (output.GetDataOfType(DeviceOutput.STATUS) != null) {      DeviceStatus status = (DeviceStatus) output.GetDataOfType(DeviceOutput.STATUS);      if (!status.IsContinuous()) {        String cmd = GetContinuousCommand();        if (cmd != null) {          tracker.SendString(cmd);        }      }      if (!status.AtPoint()) {        String cmd = GetAtPointCommand();        if (cmd != null) {          tracker.SendString(cmd);        }      }      if (!status.DecimalUnits()) {        String cmd = GetDecimalUnitsCommand();        if (cmd != null) {          tracker.SendString(cmd);        }      }      String cmd = GetOutputFormatCommand();      if (cmd != null) {        tracker.SendString(cmd);      }    }  }  //	called within tracker run loop  public void SendToTracker(Tracker tracker) {    //	do nothing for now  }  public String GetContinuousCommand() {    return kContinuous;  }  public String GetNonContinuousCommand() {    return kNonContinuous;  }  public String GetResetCommand() {    return kReset;  }  public String GetStatusCommand() {    return kStatus;  }  public String GetAtPointCommand() {    return kToggleAtPoint;  }  public String GetDecimalUnitsCommand() {    return kDecimalUnits;  }  public String GetOutputFormatCommand() {    return kOutputFormat;  }}