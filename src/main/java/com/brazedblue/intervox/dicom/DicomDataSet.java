package com.brazedblue.intervox.dicom;import com.brazedblue.intervox.util.NeuroSynchUtil;import java.io.IOException;import java.util.*;public class DicomDataSet {  Hashtable fData = new Hashtable();  public DicomDataSet() {}  public void RemoveElement(String tag) {    fData.remove(tag);  }  public String GetStringValue(String tag) throws IOException {    return GetStringValue(tag, true);  }  public String GetStringValueCanBeNull(String tag) { // convenience routine takes care of try/catch    String result = null;    try {      result = GetStringValue(tag, false);    } catch (IOException e) {    }    return result;  }  public String GetStringValue(String tag, boolean throwsException) throws IOException {    String result = null;    byte[] byteArr = GetByteArray(tag, throwsException);    if (byteArr != null) {      int length = byteArr.length;      // remove padding      if (length > 0 && (byteArr[length - 1] == 0)) {        length--;      }      result = new String(byteArr, 0, length);    } else {      NeuroSynchUtil.ErrorMessage(          "Couldn't find \"" + DicomDataDictionary.GetDescription(new DicomElementTag(tag)) + "\"",          NeuroSynchUtil.kNoDlog);    }    return result;  }  public Object GetValue(String tag, boolean throwException) throws IOException {    Object result = null;    DicomDataElement element = (DicomDataElement) fData.get(tag);    if (element != null) {      result = element.GetValue();      if (result == null && throwException) {        throw new IOException("No value exists for data element tag- " + tag);      }    } else if (throwException) {      throw new IOException("No data element exist for tag- " + tag);    }    return result;  }  public Object GetValue(String tag) throws IOException {    return GetValue(tag, true);  }  public byte[] GetByteArray(String tag) throws IOException {    return GetByteArray(tag, true);  }  public byte[] GetByteArray(String tag, boolean throwException) throws IOException {    byte[] result;    try {      result = (byte[]) GetValue(tag, throwException);    } catch (ClassCastException e1) {      throw new IOException("Data element not a byte array- " + tag);    }    return result;  }  public void Read(DicomDataSetInputStream stream) throws IOException {    fData.clear();    DicomElementFilter filter = GetElementFilter();    while (!stream.AtEnd()) {      try {        DicomDataElement element = new DicomDataElement();        element.Read(stream, filter);        if (DicomDataElement.gDebugSpitOutContents && !element.Ignored()) // debugging code        {          element.DebugDump();        }        if (!element            .Ignored()) // have encounter multiple values for transfer id types, use only the first,                        // for now        {          fData.put(element.GetTagString(), element);          Process(element, stream);        }      } catch (java.io.IOException e) {        for (Enumeration keys = fData.keys(); keys.hasMoreElements(); ) {          DicomDataElement element = (DicomDataElement) fData.get(keys.nextElement());          element.DebugDump();        }        stream.DebugDump();        throw e;      }    }  }  void Process(DicomDataElement element, DicomDataSetInputStream stream) throws IOException {}  public int GetIntValue(String tag) throws IOException {    return (int) GetLongValue(tag);  }  public Vector GetDecimalArray(String tag) throws IOException {    Vector result = null;    String string = GetStringValue(tag, false);    if (string != null) {      int i = 0;      while (i < string.length()) {        int start = i;        int end = start;        while (i <= string.length()) {          if (i == string.length() || string.charAt(i) == '\\') {            end = i;            break;          }          i++;        }        if (end > start) {          String decString = string.substring(start, end);          Float aFloat = null;          try {            aFloat = new Float(decString);          } catch (NumberFormatException e) {            throw new IOException("Bad decimal string");          }          if (result == null) {            result = new Vector();          }          result.addElement(aFloat);        }        i++;      }    }    return result;  }  public long GetLongValue(String tag) throws IOException {    long result;    Object value = GetValue(tag);    if (value == null) {      throw new IOException(          "Data element has a null value, tag- "              + tag              + ", name- "              + DicomDataDictionary.GetDescription(new DicomElementTag(tag)));    }    String className = value.getClass().getName();    if (value.getClass().getName().equals("java.util.Vector")) {      throw new IOException(          "Multiple value vector in DicomDataSet.GetLongValue(tag), tag- "              + tag              + ", name- "              + DicomDataDictionary.GetDescription(new DicomElementTag(tag))              + value.toString());    }    if (value.getClass().getName().equals("java.lang.Short")) {      result = ((Short) value).shortValue();    } else if (value.getClass().getName().equals("java.lang.Integer")) {      result = ((Integer) value).intValue();    } else if (value.getClass().getName().equals("java.lang.Long")) {      result = ((Long) value).longValue();    } else {      throw new IOException(          "Data element not an integer type- "              + tag              + ", name- "              + DicomDataDictionary.GetDescription(new DicomElementTag(tag))              + ", Object is "              + value.getClass().getName());    }    return result;  }  public DicomElementFilter GetElementFilter() {    return new DicomElementFilter(null);  }}