package com.brazedblue.intervox.dicom;import com.brazedblue.intervox.util.Debug;import java.io.IOException;import java.util.Vector;class DicomElementHeader {  DicomElementTag fTag;  DicomValueRep fValueRep;  int fLength;  private static final int kUndefinedLength = 0xFFFFFFFF;  // from "DICOM PART 5 Data Structures and Encoding  public DicomElementHeader() {}  public int GetLength() {    return fLength;  }  boolean IsEvenGroup() {    return fTag.IsEvenGroup();  }  public void Read(DicomDataSetInputStream stream) throws IOException {    fTag = stream.ReadTag();    fValueRep = stream.ReadValueRep();    if (fValueRep == null) {      if (IsEvenGroup()) {        fValueRep = DicomDataDictionary.GetImplicitValueRep(fTag);      } else {        fValueRep = new DicomValueRep("  ", DicomValueRep.IMPLICIT);      }    }    fLength = (int) fValueRep.ReadElementLength(stream);    if (DicomDataSetInputStream.kOpenEarlyFormatDicom && fLength == 13) {      fLength = 10; // 	this is a hack, don't know why this should happen    }    // read the length  }  public Object ReadValue(DicomDataSetInputStream stream, DicomElementFilter filter)      throws IOException {    Object result = null;    if (fValueRep.IsSequence()) {      Vector vector = new Vector();      if (fLength == kUndefinedLength) {        while (!stream.AtEnd()) {          DicomDataElement element = new DicomDataElement();          element.Read(stream, filter);          if (!element.IsSequenceDelimitor()) {            vector.addElement(element);          } else {            break;          }        }      } else {        long lengthRead = 0;        while (!stream.AtEnd()) {          DicomDataElement element = new DicomDataElement();          lengthRead += element.Read(stream, filter);          if (lengthRead < fLength) {            vector.addElement(element);          } else {            break;          }        }      }      result = vector;    } else if (fValueRep.IsByteString()) {      result = stream.ReadByteString(fLength);    } else if (fValueRep.IsSignedShort()) {      if (fLength <= DicomDataSetInputStream.kShortSize) {        result = new Short(stream.ReadSignedShort());      } else {        Vector list = new Vector();        for (int i = 0; i < fLength; i += DicomDataSetInputStream.kShortSize) {          list.addElement(new Short(stream.ReadSignedShort()));        }        result = list;      }    } else if (fValueRep.IsUnsignedShort()) {      if (fLength <= DicomDataSetInputStream.kShortSize) {        result = new Integer(stream.ReadUnsignedShort());      } else {        Vector list = new Vector();        for (int i = 0; i < fLength; i += DicomDataSetInputStream.kShortSize) {          list.addElement(new Integer(stream.ReadUnsignedShort()));        }        result = list;      }    } else if (fValueRep.IsSignedLong()) {      if (fLength <= DicomDataSetInputStream.kLongSize) {        result = new Integer(stream.ReadSignedLong());      } else {        Vector list = new Vector();        for (int i = 0; i < fLength; i += DicomDataSetInputStream.kLongSize) {          list.addElement(new Integer(stream.ReadSignedLong()));        }        result = list;      }    } else if (fValueRep.IsUnsignedLong()) {      if (fLength <= DicomDataSetInputStream.kLongSize) {        result = new Long(stream.ReadUnsignedLong());      } else {        Vector list = new Vector();        for (int i = 0; i < fLength; i += DicomDataSetInputStream.kLongSize) {          list.addElement(new Long(stream.ReadUnsignedLong()));        }        result = list;      }    } else if (fValueRep.IsPixelDataRep()) {      result = stream.ReadBytesToEnd();    } else if (fValueRep.IsFloatSingle()) {      if (fLength <= DicomDataSetInputStream.kFloatSingleSize) {        result = new Float(stream.ReadFloatSingle());      } else {        Vector list = new Vector();        for (int i = 0; i < fLength; i += DicomDataSetInputStream.kFloatSingleSize) {          list.addElement(new Float(stream.ReadFloatSingle()));        }        result = list;      }    } else if (fValueRep.IsFloatDouble()) {      if (fLength <= DicomDataSetInputStream.kFloatDoubleSize) {        result = new Double(stream.ReadFloatDouble());      } else {        Vector list = new Vector();        for (int i = 0; i < fLength; i += DicomDataSetInputStream.kFloatDoubleSize) {          list.addElement(new Double(stream.ReadFloatDouble()));        }        result = list;      }    } else {      if (Debug.fgDebugging) {        System.out.println("Unknown value representation \r" + toString());      }      stream.skip(fLength);    }    return result;  }  String GetTagString() {    return fTag.GetString();  }  public String toString() {    return super.toString()        + "\r    "        + fValueRep.toString()        + "\r    "        + fTag.toString()        + "\r"        + DicomDataDictionary.GetDescription(fTag)        + "\r    Length- "        + Integer.toString(fLength);  }}