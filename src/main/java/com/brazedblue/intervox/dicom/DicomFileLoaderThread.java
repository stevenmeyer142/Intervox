package com.brazedblue.intervox.dicom;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.display.ProgressBroadcaster;import com.brazedblue.intervox.display.ProgressCancelledException;import com.brazedblue.intervox.display.SwingSafeProgress;import com.brazedblue.intervox.file.*;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.util.*;import java.awt.*;import javax.swing.*;public class DicomFileLoaderThread extends FileLoaderThread /* implements anInterface */ {  private String fDirectory;  private String[] fFileList;  private ProgressBroadcaster fBroadcaster;  private DicomSeriesReceiver fReceiver;  private DicomDataSetInputStream fInputStream =      new DicomDataSetInputStream(200000); // files are smaller than 2k  private int fResolution = 1;  public DicomFileLoaderThread(      String directory,      String[] fileList,      ProgressBroadcaster broadcaster,      DicomSeriesReceiver receiver,      int resolution) {    fFileList = fileList;    fDirectory = directory;    fBroadcaster = new SwingSafeProgress(broadcaster);    fReceiver = receiver;    fResolution = resolution;  }  public void run() {    try {      //			fBroadcaster.Start();      for (int i = 0; i < fFileList.length; i++) {        DicomImageDataSet dataSet =            ImageHandler.GetDicomDataSet(fDirectory + fFileList[i], fInputStream);        if (dataSet != null) {          fReceiver.AddDataSet(dataSet, fResolution);          fBroadcaster.UpdateCurrentValue(fFileList[i], i);        }        MyYield();      }      if (fReceiver.SeriesAddedCount() > 1) {        String[] yesNo = {"Yes", "No"};        String result =            NeuroSynchUtil.AskUser(                "Save Largest Series",                "Multiple series were loaded. Save only the largest series?",                yesNo,                0,                0);        if (result.equals(yesNo[0])) {          fReceiver.SaveLargestSeriesOnly();        }      }      fReceiver.FinishReceiving(fBroadcaster);      fBroadcaster.Finish(true);    } catch (java.io.IOException e) {      fBroadcaster.Finish(false);      NeuroSynchUtil.ErrorMessage("Couldn't load dicom files. " + e.getMessage(), true);    } catch (ProgressCancelledException e2) {      fBroadcaster.Finish(false);    } catch (java.lang.OutOfMemoryError e3) {      fBroadcaster.Finish(false);      NeuroSynchUtil.ErrorMessage("Out of memory error." + e3.getMessage(), true);    }  }}