package com.brazedblue.intervox.dicom;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.util.*;import java.awt.*;import java.io.*;import java.util.*;public class DicomImageDataSet extends DicomDataSet {  public static final String kTransferSyntaxUID = "0002,0010";  public static final String kSeriesDateTag = "0008,0021";  public static final String kSeriesTimeTag = "0008,0031";  public static final String kModalityTag = "0008,0060";  public static final String kPatientNameTag = "0010,0010";  public static final String kImageWidthTag = "0028,0011";  public static final String kImageHeightTag = "0028,0010";  public static final String kBitsAllocatedTag = "0028,0100";  public static final String kBitsStoredTag = "0028,0101";  public static final String kHighBitTag = "0028,0102";  //	static public final String kSmallestPixelInSeriesTag = "0028,0108";  //	static public final String kLargestPixelInSeriesTag = "0028,0109";  public static final String kPixelDataTag = "7FE0,0010";  public static final String kSliceThicknessTag = "0018,0050"; // in cm as byte string  public static final String kPixelSpacingTag = "0028,0030"; // in cm as byte string  public static final String kPatientImageOrientTag = "0020,0037";  public static final String kPatientImagePositionTag = "0020,0032";  public static final String kSeriesInstanceIDTag = "0020,000E";  private static final String[] kImageTagStrings = {    kTransferSyntaxUID,    kSeriesDateTag,    kSeriesTimeTag,    kModalityTag,    kPatientNameTag,    kBitsAllocatedTag,    kBitsStoredTag,    kHighBitTag,    kSliceThicknessTag,    kPixelSpacingTag,    kImageHeightTag,    kImageWidthTag,    kPixelDataTag,    kSeriesInstanceIDTag,    kPatientImageOrientTag,    kPatientImagePositionTag  };  private static final String kImplicitVRLittleEndianUID = "1.2.840.10008.1.2";  public DicomImageDataSet() {}  public String GetPatientName() {    return GetStringValueCanBeNull(kPatientNameTag);  }  boolean IsLittleEndian() throws IOException {    boolean littleEndian = true;    String transferUID = GetStringValue(kTransferSyntaxUID);    if (transferUID == null) {      throw new IOException("Couldn't find Transfer UID");    }    if (transferUID.indexOf("1.2.4") > -1 || transferUID.indexOf("1.2.5") > -1) {      String msg = "Intervox cannot open compressed DICOM images.\n \n";      msg += "Transfer Syntax UID = " + transferUID;      throw new IOException(msg);    }    if (transferUID.indexOf("1.2.840.10008.1.2.2") >= 0) {      littleEndian = true;    }    return littleEndian;  }  public String GetModality() {    return GetStringValueCanBeNull(kModalityTag);  }  public Date GetSeriesDateAndTime() {    Date result = null;    String dateString = GetStringValueCanBeNull(kSeriesDateTag);    String timeString = GetStringValueCanBeNull(kSeriesTimeTag);    if (dateString != null && timeString != null) {      try {        Calendar calendar = Calendar.getInstance();        final int kYearStart = 0;        final int kYearLength = 4;        final int kMonthStart = kYearStart + kYearLength;        final int kMonthLength = 2;        final int kDayStart = kMonthStart + kMonthLength;        final int kDayLength = 2;        if (kDayStart + kDayLength != dateString.length()) {          throw new NumberFormatException("Bad date " + dateString);        }        calendar.set(            Calendar.YEAR,            Integer.parseInt(dateString.substring(kYearStart, kYearStart + kYearLength)));        //      Month value is 0-based. e.g., 0 for January.        calendar.set(            Calendar.MONTH,            Integer.parseInt(dateString.substring(kMonthStart, kMonthStart + kMonthLength)) - 1);        calendar.set(            Calendar.DATE,            Integer.parseInt(dateString.substring(kDayStart, kDayStart + kDayLength)));        final int kHourStart = 0;        final int kHourLength = 2;        final int kMinutesStart = kHourStart + kHourLength;        final int kMinutesLength = 2;        if (kMinutesStart + kMinutesLength > timeString.length()) {          throw new NumberFormatException("Bad time " + timeString);        }        calendar.set(            Calendar.HOUR_OF_DAY,            Integer.parseInt(timeString.substring(kHourStart, kHourStart + kHourLength)));        calendar.set(            Calendar.MINUTE,            Integer.parseInt(dateString.substring(kMinutesStart, kMinutesStart + kMinutesLength)));        result = calendar.getTime();      } catch (NumberFormatException exc) {        NeuroSynchUtil.ErrorMessage(            "DicomImageDataSet.GetSeriesDateAndTime " + exc.getMessage(), NeuroSynchUtil.kNoDlog);        result = null;      }    }    return result;  }  void Process(DicomDataElement element, DicomDataSetInputStream stream) throws IOException {    if (element.GetTagString().equals(kPixelDataTag) && IsLittleEndian()) {      int bitDepth = GetIntValue(kBitsAllocatedTag);      byte[] pixelData = GetByteArray(kPixelDataTag);      int bytesAllocated = bitDepth / 8;      if (bytesAllocated > 1) {        stream.SwapBytes(pixelData, bytesAllocated);        // null out last bytesAllocated bytes, sometimes a tag slips in, throwing the        // scaling out of whack        for (int i = 1; i <= bytesAllocated; i++) {          pixelData[pixelData.length - i] = 0;        }      }    }  }  public Dimension GetImageSize() {    Dimension result = null;    try {      int width = GetIntValue(kImageWidthTag);      int height = GetIntValue(kImageHeightTag);      result = new Dimension(width, height);    } catch (IOException e) {      NeuroSynchUtil.ErrorMessage(          "Unable to create image, " + e.getMessage(), NeuroSynchUtil.kShowDlog);      result = null;    }    return result;  }  public ThreeDVector GetPatientImagePosition() throws IOException {    Vector floatVector = GetDecimalArray(kPatientImagePositionTag);    ThreeDVector result;    if (floatVector != null && floatVector.size() == 3) {      float[] values = new float[3];      for (int i = 0; i < 3; i++) {        Float value = (Float) floatVector.elementAt(i);        values[i] = value.floatValue();      }      result = new ThreeDVector(values[0], values[1], values[2]);    } else {      throw new IOException(          "The image position is invalid (" + kPatientImageOrientTag + ") was invalid.");    }    return result;  }  public void GetPatientOrientationVectors(ThreeDVector row, ThreeDVector column)      throws IOException {    Vector floatVector = GetDecimalArray(kPatientImageOrientTag);    if (floatVector != null && floatVector.size() == 6) {      float[] rowValues = new float[3];      float[] columnValues = new float[3];      for (int i = 0; i < 3; i++) {        Float value = (Float) floatVector.elementAt(i);        rowValues[i] = value.floatValue();        value = (Float) floatVector.elementAt(3 + i);        columnValues[i] = value.floatValue();      }      row.set(rowValues);      column.set(columnValues);    } else {      throw new IOException(          "The patient orientation (" + kPatientImageOrientTag + ") was invalid.");    }  }  public String GetSeriesID() {    return GetStringValueCanBeNull(kSeriesInstanceIDTag);  }  public DicomElementFilter GetElementFilter() {    return new DicomElementFilter(kImageTagStrings);  }  public float GetSliceWidth() throws IOException {    Float classValue = null;    try {      classValue = Float.valueOf(new String((byte[]) GetValue(kSliceThicknessTag)));    } catch (NumberFormatException e) {      NeuroSynchUtil.ErrorMessage("GetImageWidth " + e.getMessage(), NeuroSynchUtil.kNoDlog);      throw new IOException();    }    return classValue.floatValue();  }  public float GetPixelSpacing() throws IOException {    float result = 1;    try {      String pixelSpacing = new String((byte[]) GetValue(kPixelSpacingTag));      result = NeuroSynchUtil.StringTofloat(pixelSpacing.substring(0, pixelSpacing.indexOf('\\')));    } catch (NumberFormatException e) {      NeuroSynchUtil.ErrorMessage("GetPixelSpacing " + e.getMessage(), NeuroSynchUtil.kNoDlog);      throw new IOException();    }    return result;  }}