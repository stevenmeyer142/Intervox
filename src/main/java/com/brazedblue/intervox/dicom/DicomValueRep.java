package com.brazedblue.intervox.dicom;import com.brazedblue.intervox.util.*;import java.io.IOException;class DicomValueRep {  private static final String[] kVRNames = {    "AE", "AS", "AT", "CS", "DA", "DS", "DT", "FL", "FD", "IS", "LO", "LT", "OB", "OW", "PN", "SH",    "SL", "SQ", "SS", "ST", "TM", "UI", "UL", "US"  };  public static final boolean EXPLICIT = true;  public static final boolean IMPLICIT = !EXPLICIT;  private String fValueRep;  private boolean fExplicit;  private static final String[] kExplicit32BitLengths = {"OB", "OW", "SQ"};  private static final String[] kOneByteStrings = {    "AE", "AS", "CS", "DA", "DS", "DT", "IS", "LO", "LT", "OB", "PN", "SH", "ST", "TM", "UI"  };  public DicomValueRep(String vrString, boolean explicit) {    fValueRep = vrString;    fExplicit = explicit;  }  public long ReadElementLength(DicomDataSetInputStream stream) throws IOException {    long result = 0;    if (!fExplicit) {      result = stream.ReadUnsignedLong();    } else if (NeuroSynchUtil.StrArrayContainsString(kExplicit32BitLengths, fValueRep)) {      stream.ReadSignedShort(); // skip 2 bytes      result = stream.ReadUnsignedLong();    } else // explicit VR with 16 bit value length    {      result = stream.ReadUnsignedShort();    }    return result;  }  public boolean IsSequence() {    return fValueRep.equals("SQ");  }  public boolean IsByteString() {    return NeuroSynchUtil.StrArrayContainsString(kOneByteStrings, fValueRep);  }  public boolean IsUnsignedShort() {    return fValueRep.equals("US");  }  public boolean IsSignedShort() {    return fValueRep.equals("SS");  }  public boolean IsUnsignedLong() {    return fValueRep.equals("UL");  }  public boolean IsSignedLong() {    return fValueRep.equals("SL");  }  public boolean IsFloatSingle() {    return fValueRep.equals("FL");  }  public boolean IsFloatDouble() {    return fValueRep.equals("FD");  }  public boolean IsPixelDataRep() {    return fValueRep.equals("OX") || fValueRep.equals("OW") || fValueRep.equals("OB");  }  public String toString() {    return super.toString()        + ", fValueRep- "        + fValueRep        + (fExplicit ? ", EXPLICIT" : ", IMPLICIT");  }  static boolean IsAValueRep(String string) {    return NeuroSynchUtil.StrArrayContainsString(kVRNames, string);  }}