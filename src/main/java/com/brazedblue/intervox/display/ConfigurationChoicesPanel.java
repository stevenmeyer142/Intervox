package com.brazedblue.intervox.display;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.file.FileHandler;import com.brazedblue.intervox.util.NeuroSynchUtil;import java.awt.event.*;import java.io.*;import javax.swing.*;import javax.swing.border.*;import javax.swing.event.*;public class ConfigurationChoicesPanel extends JPanel /* implements anInterface */ {  // 	private File					fConfigurationDirectory;  private JList fConfigurationsList;  private String[] fConfigFilesNames;  private JList fDataFilesConfigList;  private JButton fDeleteBtn;  private JButton fDefaultBtn;  //	private PatientData[]			fDataFilesList;  private ConfigurationManager fConfigManager;  private ConfigEditModel fConfigEditModel;  public ConfigurationChoicesPanel(      ConfigEditModel configEditModel, ConfigurationManager configManager) {    setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));    fConfigEditModel = configEditModel;    fConfigManager = configManager;    //		Configuration configuration = configEditModel.GetSelectedConfiguration();    //		fConfigurationDirectory =  new File(configuration.GetFile().getParent());    Box choicesBox = Box.createVerticalBox();    add(choicesBox);    choicesBox.setBorder((BorderFactory.createBevelBorder(BevelBorder.RAISED)));    choicesBox.add(new JLabel("Configuration Files"));    fConfigurationsList = new JList();    choicesBox.add(fConfigurationsList);    choicesBox.add(new JLabel("Current Data File"));    fDataFilesConfigList = new JList();    choicesBox.add(fDataFilesConfigList);    UpdateDirectory();    ConfigListListener listener = new ConfigListListener(fConfigurationsList, fDataFilesConfigList);    Box controlsbox = Box.createVerticalBox();    add(controlsbox);    controlsbox.setBorder((BorderFactory.createBevelBorder(BevelBorder.RAISED)));    JButton newButton = new JButton("New...");    controlsbox.add(newButton);    ActionListener l =        new ActionListener() {          public void actionPerformed(ActionEvent newEvent) {            AddConfigurationFile();          }        };    newButton.addActionListener(l);    fDeleteBtn = new JButton("Delete");    controlsbox.add(fDeleteBtn);    l =        new ActionListener() {          public void actionPerformed(ActionEvent newEvent) {            DeleteConfigurationFile();          }        };    fDeleteBtn.addActionListener(l);    fDefaultBtn = new JButton("Default");    controlsbox.add(fDefaultBtn);    l =        new ActionListener() {          public void actionPerformed(ActionEvent newEvent) {            MakeDefaultConfigurationFile();          }        };    fDefaultBtn.addActionListener(l);  }  private void MakeDefaultConfigurationFile() {    Configuration selectedConfig = fConfigEditModel.GetSelectedConfiguration();    fConfigManager.SetDefaultConfiguration(selectedConfig);    UpdateDirectory();  }  private void DeleteConfigurationFile() {    Configuration selectedConfig = fConfigEditModel.GetSelectedConfiguration();    fConfigManager.DeleteConfigurationFile(selectedConfig);    UpdateDirectory();  }  private void AddConfigurationFile() {    fConfigManager.AddConfigurationFile(NeuroSynchUtil.GetFrame(this));    UpdateDirectory();  }  private void UpdateDirectory() {    fConfigFilesNames = fConfigManager.GetConfigurationFileNames();    fConfigurationsList.setListData(fConfigFilesNames);    String[] dataFileNames = new String[1];    PatientData selectedData = fConfigEditModel.GetSelectedDataFile();    if (selectedData != null) {      dataFileNames[0] = selectedData.GetConfigurationName();      dataFileNames[0] = FileHandler.ShrinkPathName(dataFileNames[0], 20);    }    fDataFilesConfigList.setListData(dataFileNames);    if (selectedData != null) {      fDataFilesConfigList.setSelectedIndex(0);    } else {      String selectedConfigName = fConfigEditModel.GetSelectedCongurationName();      fConfigurationsList.setSelectedValue(selectedConfigName, true);    }  }  private void UpdateConfigEditModel() {    if (!fConfigurationsList.getValueIsAdjusting() && !fDataFilesConfigList.getValueIsAdjusting()) {      boolean enableDeleteNDefault = false;      if (!fConfigurationsList.isSelectionEmpty()) {        fConfigEditModel.SetDataFileSelected(false);        int index = fConfigurationsList.getMinSelectionIndex();        Configuration config = fConfigManager.GetConfigurationForFileName(fConfigFilesNames[index]);        fConfigEditModel.SetSelectedConfiguration(config);        enableDeleteNDefault = true;      } else if (!fDataFilesConfigList.isSelectionEmpty()) {        fConfigEditModel.SetDataFileSelected(true);      }      fDefaultBtn.setEnabled(enableDeleteNDefault);      fDeleteBtn.setEnabled(enableDeleteNDefault);    }  }  class ConfigListListener implements ListSelectionListener {    private ListSelectionModel fConfigFileModel;    private ListSelectionModel fDataFileModel;    ConfigListListener(JList configFileList, JList dataFileList) {      fConfigFileModel = configFileList.getSelectionModel();      fConfigFileModel.addListSelectionListener(this);      fConfigFileModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);      fDataFileModel = dataFileList.getSelectionModel();      fDataFileModel.addListSelectionListener(this);      fDataFileModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    }    public void valueChanged(ListSelectionEvent e) {      System.out.println("value changed " + e);      if (!e.getValueIsAdjusting()) {        if (e.getSource() == fConfigFileModel) {          if (!fConfigFileModel.isSelectionEmpty() && !fDataFileModel.isSelectionEmpty()) {            //	only one list can be selected            fDataFileModel.clearSelection();          }        } else if (e.getSource() == fDataFileModel) {          if (!fConfigFileModel.isSelectionEmpty() && !fDataFileModel.isSelectionEmpty()) {            //	only one list can be selected            fConfigFileModel.clearSelection();          }        }        UpdateConfigEditModel();        System.out.println("model updated " + e);      }    }  }  ;}