package com.brazedblue.intervox.display;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.file.*;import com.brazedblue.intervox.tracker.TrackerController;import com.brazedblue.intervox.util.*;import java.awt.*;import java.io.*;import java.util.Enumeration;import java.util.Hashtable;public class ConfigurationManager {  //	private Configuration	fDefaultConfiguration;  private Hashtable fConfigurations = new Hashtable();  private static final String kConfigurationFolderName = "Configurations";  private static final String kConfigurationSuffix = ".cfg";  private static final String kDefaultConfigurationCode = "(default)";  private static final String kDefaultConfigurationName =      "Original" + kDefaultConfigurationCode + kConfigurationSuffix;  public ConfigurationManager() {}  public void WriteOutConfigurations() {    Enumeration iter = fConfigurations.elements();    while (iter.hasMoreElements()) {      Configuration config = (Configuration) iter.nextElement();      try {        config.WriteToFile();      } catch (IOException e) {        NeuroSynchUtil.ErrorMessage(            "Error creating configuration, " + e.getMessage(), NeuroSynchUtil.kShowDlog);      }    }    fConfigurations.clear();  }  public Configuration GetDefaultConfiguration() {    Configuration result = null;    String[] fileNames = GetConfigurationFileNames();    if (fileNames.length == 0) {      result = SetUpDefaultConfiguration();    } else {      for (int i = 0; i < fileNames.length; i++) {        if (fileNames[i].lastIndexOf(kDefaultConfigurationCode) >= 0) {          result = GetConfigurationForFileName(fileNames[i]);          break;        }      }      if (result == null) {        result = GetConfigurationForFileName(fileNames[0]);      }    }    return result;  }  public Configuration GetConfigurationFromUser() {    Configuration result = null;    String[] configurations = GetConfigurationFileNames();    if (configurations.length > 1) {      String fileName =          NeuroSynchUtil.GetUserInput(              "Configurations", "Choose a configuration.", configurations, configurations[0]);      if (fileName != null) {        result = GetConfigurationForFileName(fileName);      }    } else {      if (configurations.length == 0) {        SetUpDefaultConfiguration();      }      configurations = GetConfigurationFileNames();      NeuroSynchUtil.ErrorMessage(          "Only Default file exists.  Will use as configuration.", NeuroSynchUtil.kShowDlog);      result = GetConfigurationForFileName(configurations[0]);    }    return result;  }  public Configuration GetConfigurationForFileName(String fileName) {    Configuration result = (Configuration) fConfigurations.get(fileName);    if (result == null) {      try {        result = GetConfigurationFromFile(fileName);        fConfigurations.put(fileName, result);      } catch (java.io.IOException e) {        NeuroSynchUtil.ErrorMessage(            "Error reading configuration, " + fileName + ", " + e.getLocalizedMessage(),            NeuroSynchUtil.kShowDlog);      }    }    return result;  }  public String[] GetConfigurationFileNames() {    File directory = GetDefaultDirectory();    return directory.list(GetFileFilter());  }  /*  public Configuration GetDefaultConfiguration()  {  	if (fDefaultConfiguration == null)  	{  		SetUpDefaultConfiguration();  	}  	return fDefaultConfiguration;  } */  /*  	public void SetDefaultConfiguration(Configuration config)  	{  		config = (Configuration)config.clone();  		config.SetFileName(kDefaultConfigurationName);  		try  		{  			config.WriteToFile();  		}  		catch (IOException e)  		{  			NeuroSynchUtil.ErrorMessage("ConfigurationManager.SetDefaultConfiguration- " + e.getMessage(), NeuroSynchUtil.kNoDlog);  		}  		SetSelectedConfiguration(config);  	}  */  public void SetDefaultConfiguration(Configuration config) {    Configuration defaultConfiguration = GetDefaultConfiguration();    String currentFileName = defaultConfiguration.GetName();    String newFileName = config.GetName();    if (!currentFileName.equals(newFileName)) {      fConfigurations.remove(currentFileName);      fConfigurations.remove(newFileName);      int lastIndex = currentFileName.lastIndexOf(kDefaultConfigurationCode);      if (lastIndex > 0) {        currentFileName = currentFileName.substring(0, lastIndex) + kConfigurationSuffix;        currentFileName.replaceAll(kDefaultConfigurationCode, "");        defaultConfiguration.SetFile(new File(GetDefaultDirectory(), currentFileName));      }      newFileName =          newFileName.substring(0, newFileName.length() - kConfigurationSuffix.length())              + kDefaultConfigurationCode              + kConfigurationSuffix;      config.SetFile(new File(GetDefaultDirectory(), newFileName));      fConfigurations.put(defaultConfiguration.GetName(), defaultConfiguration);      fConfigurations.put(config.GetName(), config);    }  }  void AddConfigurationFile(Frame frame) {    //		File newFile = FileHandler.GetFile(frame, "Add File in this Directory", GetFileFilter());    String label = NeuroSynchUtil.GetUserInput("Enter Configuration Name", "Label", "");    if (label != null && !label.equals("")) {      if (!label.endsWith(kConfigurationSuffix)) {        label += kConfigurationSuffix;      }      File newFile = CreateConfigFileFromName(label);      if (!newFile.exists()) {        Configuration newConfig = new Configuration(newFile);        try {          newConfig.WriteToFile();        } catch (IOException e) {          NeuroSynchUtil.ErrorMessage(              "Error creating configuration, " + e.getMessage(), NeuroSynchUtil.kShowDlog);        }        fConfigurations.put(newConfig.GetName(), newConfig);      } else {        NeuroSynchUtil.ErrorMessage(            "Configuration file \"" + label + "\" already exists.", NeuroSynchUtil.kShowDlog);      }    }  }  public void DeleteConfigurationFile(Configuration config) {    fConfigurations.remove(config.GetName());    File file = config.GetFile();    file.delete();    config.Dispose();  }  public void EditConfigurations(      TrackerController tracker, /*Container parent, */ PatientData selectedData) {    // why do I need configEditModel    ConfigEditModel configEditModel = new ConfigEditModel();    configEditModel.SetSelectedDataFile(selectedData);    Configuration selectedConfig =        (selectedData != null) ? selectedData.GetConfiguration() : GetDefaultConfiguration();    configEditModel.SetSelectedConfiguration(selectedConfig);    ConfigurationDialog configDialog = new ConfigurationDialog(this, tracker, configEditModel);    //		parent.add(configDialog);    configDialog.pack();    NeuroSynchUtil.CenterComponent(configDialog);    configDialog.setVisible(true);  }  public Localizer GetLocalizer() {    Configuration config = GetDefaultConfiguration();    if (config != null) {      return config.GetLocalizer();    } else {      NeuroSynchUtil.ErrorMessage(          "ConfigurationManager.GetLocalizer, config- " + config, NeuroSynchUtil.kShowDlog);      return new Localizer();    }  }  /*	public void UpdateFileIfNecessary()  {  	if (fSelectedConfiguration != null && fSelectedConfiguration.IsDirty())  	{  		try  		{  			fSelectedConfiguration.WriteToFile();  		}  		catch (IOException e)  		{  				System.out.println("IOException in NSMainActor.Stop: " + e.getMessage());  		}  	}  } */  // creates a directory if it doesn't exist  private File GetDefaultDirectory() {    File directory = new File(NeuroSynchUtil.GetWorkingDirectory() + kConfigurationFolderName);    boolean dirExists = directory.exists();    if (!dirExists) {      dirExists = directory.mkdir();    }    return directory;  }  private File CreateConfigFileFromName(String name) {    File directory = GetDefaultDirectory();    return new File(directory, name);  }  private Configuration GetConfigurationFromFile(String fileName) throws java.io.IOException {    Configuration result;    File configFile = CreateConfigFileFromName(fileName);    if (configFile.exists()) {      result = Configuration.ReadFromFile(configFile);    } else {      throw new FileNotFoundException(fileName);    }    return result;  }  private Configuration SetUpDefaultConfiguration() {    Configuration result = null;    try {      result = GetConfigurationFromFile(kDefaultConfigurationName);    } catch (java.io.FileNotFoundException fnf) {      // can I do a file read from a catch?    } catch (java.io.IOException e) {      NeuroSynchUtil.ErrorMessage(          "Error reading configuration, " + e.getMessage(), NeuroSynchUtil.kShowDlog);    }    if (result == null) {      try {        result = new Configuration(CreateConfigFileFromName(kDefaultConfigurationName));        result.WriteToFile(); // 	create default      } catch (java.io.IOException e) {        NeuroSynchUtil.ErrorMessage(            "Error writing configuration, " + e.getMessage(), NeuroSynchUtil.kShowDlog);      }    }    return result;  }  public static FilenameFilter GetFileFilter() {    return new FileSuffixFilter(kConfigurationSuffix);  }}