package com.brazedblue.intervox.display;import com.brazedblue.intervox.data.PatientData;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.util.Debug;import java.awt.*;import java.awt.event.*;import javax.swing.*;public class DefaultImageControlSettings    implements ImageControlSettings, ImageSpaceSelector.ImageSpaceSelectListener, ActionListener {  private ImageViewType fImageType;  private ImageSpaceSelector fImageSpaceSelector;  private boolean fShowsImageSpaceSelector = true;  private JButton fImageTypeButton;  private boolean fShowsSettings = true; // this seems to be the change view type button  private JLabel fImageTypeLabel;  private LayoutModel fLayout;  private static final String kSettingsLabel = "Settings...";  public DefaultImageControlSettings() {    fImageSpaceSelector = new ImageSpaceSelector();    fImageSpaceSelector.AddSpaceSelectListener(this);    fImageTypeButton = new JButton(kSettingsLabel);    fImageTypeButton.addActionListener(this);    fImageTypeLabel = new JLabel();  }  public static ImageControlSettings GetEditConfigSettings() {    DefaultImageControlSettings settings = new DefaultImageControlSettings();    settings.fShowsImageSpaceSelector = false;    settings.fShowsSettings = true;    return settings;  }  public void actionPerformed(ActionEvent e) {    ShowSettingsDialog();  }  private void ShowSettingsDialog() {    fLayout.LetUserChangeSettings(fImageType);  }  public void SetShowsControl(int controlType, boolean shows) {    switch (controlType) {      case kImageSpaceSelectControl:        fShowsImageSpaceSelector = shows;        break;      case kSettingsControl:        fShowsSettings = shows;        break;    }  }  public boolean ShowsControl(int controlType) {    boolean shows = true;    switch (controlType) {      case kImageSpaceSelectControl:        shows = fShowsImageSpaceSelector;        break;      case kSettingsControl:        shows = fShowsSettings;        break;    }    return shows;  }  public void SpaceSelected(ImageSpaceSelector.SelectEvent event) {    if (event.GetSelected()) {      SingleSpaceID space = event.GetSpaceID();      if (fImageType != null && space != null) {        fImageType.SetSpaceID(space);        if (fLayout != null) {          fLayout.LayoutChanged();        }      }    }  }  public void Dispose() {    fImageType = null;    if (fImageSpaceSelector != null) {      fImageSpaceSelector.RemoveSpaceSelectListener(this);      fImageSpaceSelector.Dispose();      fImageSpaceSelector = null;    }    if (fImageTypeButton != null) {      if (fImageTypeButton.getParent() != null) {        fImageTypeButton.getParent().remove(fImageTypeButton);      }      fImageTypeButton.removeActionListener(this);      fImageTypeButton = null;    }    fLayout = null;  }  public void SetUp(Container container) {    if (fShowsImageSpaceSelector) {      JComponent control = fImageSpaceSelector.GetControl();      container.add(control);    }    Box box = Box.createHorizontalBox();    boolean addBox = false;    if (fImageTypeButton != null && fShowsSettings) {      box.add(fImageTypeButton);      addBox = true;    }    if (fImageTypeLabel != null) {      box.add(fImageTypeLabel);      addBox = true;    }    if (addBox) {      container.add(box);    }  }  public void SetImageViewType(ImageViewType viewType) {    fImageType = viewType;    if (fImageType != null) {      if (fImageSpaceSelector != null) {        fImageSpaceSelector.SetSelectedSpace(fImageType.GetSingleSpaceID());      }      if (fImageTypeLabel != null) {        String text = fImageType.GetPerspectiveString();        if (fImageType.HasFeature(ImageViewType.kTracksInterceptFeature)) {          text += "(Intercept)";        }        fImageTypeLabel.setText(text);        fImageTypeLabel.setBackground(fImageType.GetColor());        fImageTypeLabel.setOpaque(true);      }      if (Debug.fgDebugging) {        if (fLayout != null && !fLayout.DebugHasViewType(fImageType)) {          Debug.PrintStackTrace("wrong ViewType");        }      }    }  }  public void SetData(PatientData data) {    ImageSpacesAccessor spaceAccessor = data.GetImageSpacesAccessor();    fImageSpaceSelector.SetImageSpacesAccessor(spaceAccessor);  }  public void SetLayout(LayoutModel layout) {    fLayout = layout;    if (Debug.fgDebugging) {      if ((fLayout != null) && (fImageType != null) && !fLayout.DebugHasViewType(fImageType)) {        Debug.PrintStackTrace("wrong ViewType");      }    }  }}