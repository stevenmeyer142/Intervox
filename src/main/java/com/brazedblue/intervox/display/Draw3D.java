package com.brazedblue.intervox.display;import java.awt.*;public class Draw3D /* implements anInterface */ {  protected int fRaiseHt = 2;  protected Color lightedColor = Color.white;  protected Color flatColor = Color.lightGray;  protected Color shadowColor = Color.gray;  protected static final int TOP = 1;  protected static final int LEFT = 2;  protected static final int BOTTOM = 3;  protected static final int RIGHT = 4;  protected static final int TOPLEFT = 5;  protected static final int BOTTOMLEFT = 6;  protected static final int TOPRIGHT = 7;  protected static final int BOTTOMRIGHT = 8;  protected static final int CENTER = 9;  public static final int NORMAL = 1;  public static final int PRESSED = 2;  public static final Draw3D normalDraw3D = new Draw3D(Color.white, Color.lightGray, Color.gray);  public static final DrawRubber3D rubberDraw3D = new DrawRubber3D();  public Draw3D() {}  public Draw3D(Color lightedCol, Color flatCol, Color shadowCol) {    lightedColor = lightedCol;    flatColor = flatCol;    shadowColor = shadowCol;  }  public void Draw(Rectangle rect, int state, Graphics g) {    Color oldColor = g.getColor();    //		DrawCenter(rect, state, g);    DrawTopEdge(rect, state, g);    DrawLeftEdge(rect, state, g);    DrawRightEdge(rect, state, g);    DrawBottomEdge(rect, state, g);    g.setColor(oldColor);  }  void DrawTopEdge(Rectangle rect, int state, Graphics g) {    int raiseHt = GetRaiseHeight(state);    for (int i = 0; i < raiseHt; i++) {      SetColor(TOP, state, g, i);      g.drawLine(rect.x + i, rect.y + i, rect.x + rect.width - i, rect.y + i);    }  }  void DrawLeftEdge(Rectangle rect, int state, Graphics g) {    int raiseHt = GetRaiseHeight(state);    for (int i = 0; i < raiseHt; i++) {      SetColor(LEFT, state, g, i);      g.drawLine(rect.x + i, rect.y + i, rect.x + i, rect.y + rect.height - i - 1);    }  }  void DrawBottomEdge(Rectangle rect, int state, Graphics g) {    int raiseHt = GetRaiseHeight(state);    for (int i = 0; i < raiseHt; i++) {      SetColor(BOTTOM, state, g, i);      g.drawLine(          rect.x + 1 + i,          rect.y + rect.height - i - 1,          rect.x + rect.width - 1 - i,          rect.y + rect.height - i - 1);    }  }  void DrawRightEdge(Rectangle rect, int state, Graphics g) {    int raiseHt = GetRaiseHeight(state);    for (int i = 0; i < raiseHt; i++) {      SetColor(RIGHT, state, g, i);      g.drawLine(          rect.x + rect.width - 1 - i,          rect.y + i,          rect.x + rect.width - 1 - i,          rect.y + rect.height - i - 1);    }  }  void DrawCenter(Rectangle rect, int state, Graphics g) {    SetColor(CENTER, state, g, 0);    g.fillRect(rect.x + 1, rect.y + 1, rect.width - 1, rect.height - 1);  }  void SetColor(int position, int state, Graphics g, int i) {    if (i == 0) {      switch (state) {        case NORMAL:          {            switch (position) {              case TOP:                g.setColor(lightedColor);                break;              case LEFT:                g.setColor(lightedColor);                break;              case BOTTOM:                g.setColor(shadowColor);                break;              case RIGHT:                g.setColor(shadowColor);                break;              case CENTER:                g.setColor(flatColor);                break;            }          }          break;        case PRESSED:          {            switch (position) {              case TOP:                g.setColor(shadowColor);                break;              case LEFT:                g.setColor(shadowColor);                break;              case BOTTOM:                g.setColor(lightedColor);                break;              case RIGHT:                g.setColor(lightedColor);                break;              case CENTER:                g.setColor(flatColor);                break;            }          }      }    }  }  protected int GetRaiseHeight(int state) {    return fRaiseHt;  }}