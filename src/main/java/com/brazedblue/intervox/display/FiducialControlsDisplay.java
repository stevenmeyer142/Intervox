package com.brazedblue.intervox.display;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.device.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.registration.*;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.util.Debug;import com.brazedblue.intervox.util.NeuroSynchUtil;import java.awt.*;import java.awt.event.*;import java.util.Vector;import javax.swing.*;class FiducialControlsDisplay extends JPanel    implements ImageSpaceSelector.ImageSpaceSelectListener {  private FiducialControlsDisplayer fCurrentDisplayer;  private FiducialControlsDisplayerVirtual fImageDisplayer;  private FiducialControlsDisplayerLocalizer fLocalizerDisplayer;  private SingleSpaceID fSpaceID;  private ImageSpaceSelector fSpaceSelector;  private JPanel fFiducialsPanel;  private JScrollPane fScrollPane;  public FiducialControlsDisplay(      SingleSpaceID space, boolean showsLocalizer, TrackerController trackerController) {    setBorder(BorderFactory.createRaisedBevelBorder());    fSpaceID = space;    setLayout(new BoxLayout(this, BoxLayout.X_AXIS));    fSpaceSelector = new ImageSpaceSelector();    fSpaceSelector.SetShowsLocalizerSpace(showsLocalizer);    fSpaceSelector.AddSpaceSelectListener(this);    add(fSpaceSelector.GetControl());    add(Box.createHorizontalGlue());    fFiducialsPanel = new JPanel();    fScrollPane = new JScrollPane(fFiducialsPanel);    add(fScrollPane);    fImageDisplayer = new FiducialControlsDisplayerVirtual();    if (showsLocalizer) {      fLocalizerDisplayer = new FiducialControlsDisplayerLocalizer(trackerController);    }  }  /*  public void doLayout()  {  	Debug.PrintStackTrace("");  	super.doLayout();  } */  void UpdateViews() {    UpdateDisplayer();  }  public SingleSpaceID GetSpaceID() {    return fSpaceSelector.GetSelectedSpace();  }  public void Dispose() {    if (fLocalizerDisplayer != null) {      fLocalizerDisplayer.Dispose();    }    if (fImageDisplayer != null) {      fImageDisplayer.Dispose();    }  }  private void UpdateDisplayer() {    boolean newDisplayer = false;    fSpaceID = fSpaceSelector.GetSelectedSpace();    if (Debug.fgDebugging && false) {      Debug.PrintStackTrace(          this + "\rfSpaceID- " + fSpaceID + "\r(fSpaceSelector) " + fSpaceSelector);    }    if (fSpaceID != null) {      if (fSpaceID.IsType(SingleSpaceID.kImageType)) {        if (fCurrentDisplayer != fImageDisplayer) {          fFiducialsPanel.removeAll();          if (fCurrentDisplayer != null) {            fCurrentDisplayer.SetShowing(false);          }          fCurrentDisplayer = fImageDisplayer;          fCurrentDisplayer.SetShowing(true);        }      }      if (fSpaceID.IsType(SingleSpaceID.kLocalizerType)) {        if (fCurrentDisplayer != fLocalizerDisplayer) {          fFiducialsPanel.removeAll();          if (fCurrentDisplayer != null) {            fCurrentDisplayer.SetShowing(false);          }          fCurrentDisplayer = fLocalizerDisplayer;          fCurrentDisplayer.SetShowing(true);        }      }      fCurrentDisplayer.UpdateSpace();      fCurrentDisplayer.UpdateViews();    }  }  public void SetFocalPoint(FocalPointModel focalPtAccess) {    //		focalPtAccess.SetSpaceID(fSpaceID);    fImageDisplayer.SetFocalPoint(focalPtAccess);  }  public void SetDataAccessors(      FiducialSetsAccess fiducialsAccess, ImageSpacesAccessor spacesAccessor) {    fiducialsAccess.SetSpaceID(fSpaceID);    fImageDisplayer.SetFiducialsAccess(fiducialsAccess);    fSpaceID = spacesAccessor.ResolveSingleSpaceID(fSpaceID);    fSpaceSelector.SetImageSpacesAccessor(spacesAccessor);    fSpaceSelector.SetSelectedSpace(fSpaceID);    UpdateDisplayer();  }  public ImageSpaceSelector GetSpaceSelector() {    return fSpaceSelector;  }  public void SpaceSelected(ImageSpaceSelector.SelectEvent event) {    if (event.GetSelected()) {      SetSpace(event.GetSpaceID());    }  }  private void SetSpace(SingleSpaceID space) {    if (fSpaceID == null || !fSpaceID.equals(space)) {      fSpaceID = space;      UpdateDisplayer();    }  }  /*  public void UpdateControls()  {  }  public void actionPerformed(ActionEvent e)  {  	int size = fPointButtonPairs.size();  	AbstractButton buttonToSelect = null;  	for (int i = 0; i < size; i++)  	{  		PointButtonPair pair = (PointButtonPair)fPointButtonPairs.elementAt(i);  		AbstractButton btn = pair.GetButton();  		if (btn != null && e.getSource() == btn)  		{  			if (btn.isSelected())  			{  				DisplaySelectedPoint(pair.GetFiducialPoint().GetLocation());  			}  			requestFocus();  			break;  		}  	}  } */  public void Advance() {    fCurrentDisplayer.Advance();  }  public FiducialPoint GetFiducialPoint() {    return fCurrentDisplayer.GetCurrentPoint();  }  static class PointButtonPair {    FiducialPoint fPoint;    AbstractButton fButton;    PointButtonPair(FiducialPoint point, AbstractButton button) {      fPoint = point;      fButton = button;    }    FiducialPoint GetFiducialPoint() {      return fPoint;    }    AbstractButton GetButton() {      return fButton;    }  }  private abstract class FiducialControlsDisplayer {    protected boolean fShowing = false;    private FiducialControlsDisplayer() {}    protected void UpdateViews() {}    protected void UpdateSpace() {}    protected void SetShowing(boolean showing) {      fShowing = showing;    }    protected abstract FiducialPoint GetCurrentPoint();    protected void Dispose() {}    protected void Advance() {}  }  private class FiducialControlsDisplayerVirtual extends FiducialControlsDisplayer      implements ActionListener, DataModelListener {    private Vector fPointButtonPairs = new Vector();    private FiducialSetsAccess fFiducials;    private FocalPointModel fFocalPoint;    private static final boolean kRegisterFocus = false;    private FiducialControlsDisplayerVirtual() {}    private void SetFocalPoint(FocalPointModel focalPt) {      fFocalPoint = focalPt;    }    protected void UpdateSpace() {      fFiducials.SetSpaceID(fSpaceID);      fFocalPoint.SetSpaceID(fSpaceID);    }    private void SetFiducialsAccess(FiducialSetsAccess fiducials) {      if (fFiducials != null) {        fFiducials.GetDataModel().RemoveListener(this);      }      fFiducials = fiducials;      if (fShowing) {        fFiducials.GetDataModel().AddListener(this);      }    }    /*    public void FocalPointChanged(Location3D focalPoint)    {    	if (kRegisterFocus)    	{    			UpdateViews();    		revalidate();    	}    }    */    protected void SetShowing(boolean showing) {      if (fShowing != showing) {        ActivateListeners(showing);        fPointButtonPairs.removeAllElements();      }      super.SetShowing(showing);      fScrollPane.setVerticalScrollBarPolicy(          showing              ? JScrollPane.VERTICAL_SCROLLBAR_NEVER              : JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);    }    protected void UpdateViews() {      if (fShowing && fFiducials != null) {        int size = fPointButtonPairs.size();        for (int i = 0; i < size; i++) {          PointButtonPair pair = (PointButtonPair) fPointButtonPairs.elementAt(i);          AbstractButton btn = pair.GetButton();          fFiducialsPanel.remove(btn);          btn.removeActionListener(this);        }        fPointButtonPairs.removeAllElements();        FiducialPoint[] fiducials = fFiducials.GetFiducials();        Location3D selectedPt = fFocalPoint.GetFocalPointLocation();        ButtonGroup group = new ButtonGroup();        for (int i = 0; i < fiducials.length; i++) {          String label = fiducials[i].GetName();          JRadioButton button = new JRadioButton(label);          group.add(button);          fFiducialsPanel.add(button);          if ((i == 0) || (selectedPt == fiducials[i].GetLocation())) {            button.setSelected(true);          }          button.addActionListener(this);          fPointButtonPairs.addElement(new PointButtonPair(fiducials[i], button));        }      }      //			requestFocus();    }    public void DataModelChanged(DataModel model, DataChangedEvent event) {      if ((event.getSource() != this)          && (model == fFiducials.GetDataModel())          && (event.GetEventNumber() == DataChangedEvent.CHANGED)) {        UpdateViews();        revalidate();      }    }    protected FiducialPoint GetCurrentPoint() {      if (kRegisterFocus) {        FloatPoint focalPoint = new FloatPoint(fFocalPoint.GetFocalPointLocation());        FiducialPoint result = fFiducials.GetFiducialPoint(focalPoint);        if (result == null) {          result = new Image3DFiducialPoint(focalPoint, focalPoint.ToString(1));        }        return result;      } else {        FiducialPoint result = null;        int length = fPointButtonPairs.size();        for (int i = 0; i < length; i++) {          PointButtonPair pair = (PointButtonPair) fPointButtonPairs.elementAt(i);          AbstractButton btn = pair.GetButton();          if (btn.isSelected()) {            result = pair.GetFiducialPoint();            break;          }        }        return result;      }    }    private void ActivateListeners(boolean activate) {      if (activate) {        fFiducials.GetDataModel().AddListener(this);        if (kRegisterFocus) {          //					fFocalPoint.AddFocalPointListener(this);        }      } else {        fFiducials.GetDataModel().RemoveListener(this);        if (kRegisterFocus) {          //					fFocalPoint.RemoveFocalPointListener(this);        }      }    }    protected void Dispose() {      ActivateListeners(false);    }    protected void Advance() {      int nextButton = -1;      int length = fPointButtonPairs.size();      for (int i = 0; i < length; i++) {        PointButtonPair pair = (PointButtonPair) fPointButtonPairs.elementAt(i);        AbstractButton btn = pair.GetButton();        if (btn.isSelected()) {          nextButton = i + 1;          if (nextButton >= length) {            nextButton = 0;          }          break;        }      }      if (nextButton >= 0) {        PointButtonPair pair = (PointButtonPair) fPointButtonPairs.elementAt(nextButton);        AbstractButton btn = pair.GetButton();        btn.doClick();      }    }    public void actionPerformed(ActionEvent e) {      int size = fPointButtonPairs.size();      AbstractButton buttonToSelect = null;      for (int i = 0; i < size; i++) {        PointButtonPair pair = (PointButtonPair) fPointButtonPairs.elementAt(i);        AbstractButton btn = pair.GetButton();        if (btn != null && e.getSource() == btn) {          if (btn.isSelected()) {            fFocalPoint.SetFocalPointLocation(pair.GetFiducialPoint().GetLocation());          }          break;        }      }    }  }  private class FiducialControlsDisplayerLocalizer extends FiducialControlsDisplayer {    TrackerController fTrackerController;    int fLocalizerStation = DeviceOutput.STATION1;    int fReferenceStation = DeviceOutput.STATION2;    TrackerCtrlBar fTrackerCtrlBar;    private FiducialControlsDisplayerLocalizer(TrackerController trackerController) {      fTrackerController = trackerController;    }    protected FiducialPoint GetCurrentPoint() {      LocalizerPointOutput output = fTrackerController.GetLatestOutput(fLocalizerStation);      LocalizerPointOutput refOutput = fTrackerController.GetLatestOutput(fReferenceStation);      refOutput = ((refOutput != null) && refOutput.IsFresh()) ? refOutput : null;      FiducialPoint result = null;      if (output != null && output.IsFresh()) {        result = new LocalizerFiducialPoint(output, refOutput);      } else {        NeuroSynchUtil.ErrorMessage("Not receiving tracker location", NeuroSynchUtil.kShowDlog);      }      return result;    }    protected void SetShowing(boolean showing) {      if (fShowing != showing) {        if (showing) {          if (fTrackerCtrlBar == null) {            fTrackerCtrlBar = new TrackerCtrlBar(fTrackerController);          }          fFiducialsPanel.add(fTrackerCtrlBar);          fTrackerCtrlBar.SetSleep(false);        } else if (fTrackerCtrlBar != null) {          fFiducialsPanel.remove(fTrackerCtrlBar);          fTrackerCtrlBar.SetSleep(true);        }      }      super.SetShowing(showing);    }    protected void Dispose() {      if (fTrackerCtrlBar != null) {        fTrackerCtrlBar.Dispose();      }    }  }}