package com.brazedblue.intervox.display;import java.awt.*;import java.awt.image.*;import javax.swing.JComponent;public class ImageAdorner implements ComponentAdorner, ImageObserver, ComponentSizer	{		protected Image						fImage = null;		protected float 					fMagnification = 1;				protected JComponent 				fView;		private Dimension					fImageSize = new Dimension();		private Dimension					fImageDrawArea = new Dimension();				public ImageAdorner(float magnification)		{			fMagnification = magnification;		}				public void SetView(JComponent view)		{			fView = view;		}				public Image GetImage()		{			return fImage;		}				public Dimension GetPreferredSize()		{			return GetImageDrawArea();		}				public void Paint(Graphics g, AdornedComponent c)		{			if (fImage != null)			{				Dimension imgSize = GetImageSize();								Insets insets = fView != null ? fView.getInsets() : null;								int left = insets != null ? insets.left : 0;				int top = insets != null ? insets.top : 0;								g.drawImage(fImage, left, top, imgSize.width, imgSize.height, this);								Dimension imageDrawArea = GetImageDrawArea();					// blacken it to make it square				if (imgSize.width < imageDrawArea.width)				{					g.setColor(Color.black);					g.fillRect(imgSize.width + left, top, imageDrawArea.width - imgSize.width, imageDrawArea.height);					g.setColor(Color.white);				}				else if (imgSize.height < imageDrawArea.height)				{					g.setColor(Color.black);					g.fillRect(left, imgSize.height + top, imageDrawArea.width, imageDrawArea.height - imgSize.height);					g.setColor(Color.white);				}						}		}				public void FlushImage()		{			if (fImage != null)			{				fImage.flush();			}		}		/*		public void ImageToView(Point pt)		{			if (fView != null)			{				Insets insets = fView.getInsets();				if (insets != null)				{					pt.x += insets.left;					pt.y += insets.top;				}			}		} */				public void TranslateImageToView(Point pt)		{			pt.x = Math.round(pt.x * fMagnification);			pt.y = Math.round(pt.y * fMagnification);			if (fView != null)			{				Insets insets = fView.getInsets();				if (insets != null)				{					pt.x += insets.left;					pt.y += insets.top;				}			}			}				public void TranslateViewToImage(Point pt)		{			if (fView != null)			{				Insets insets = fView.getInsets();				if (insets != null)				{					pt.x -= insets.left;					pt.y -= insets.top;				}			}			pt.x = Math.round(pt.x / fMagnification);			pt.y = Math.round(pt.y / fMagnification);		}				public void SetImage(Image image)		{			fImage = image;		}				public void Dispose()		{			fImage = null;		}			//	the size to draw		protected Dimension GetImageSize()		{			fImageSize.setSize(256, 256);			if (fImage != null)			{				int width = fImage.getWidth(null);	// avoid notification				int height = fImage.getHeight(null);								if (width > 0 && height > 0)				{					fImageSize.width = (int)(fMagnification * width);							fImageSize.height = (int)(fMagnification * height);				}			}			return fImageSize;		} 		public boolean imageUpdate(Image img, int flags,				       int x, int y, int w, int h){/*			if (img == fImage)			{				if ((flags & (ImageObserver.WIDTH | ImageObserver.HEIGHT)) != 0)				{					SynchSizeWithImage();				}							} */						if (((flags & (FRAMEBITS|ALLBITS)) != 0) && fView != null) 			{				fView.repaint();			}						return (flags & (ALLBITS|ABORT)) == 0;		} 						protected Dimension GetImageDrawArea()		{			fImageDrawArea.setSize(GetImageSize());						if (fImageDrawArea.height < fImageDrawArea.width)			{				fImageDrawArea.height = fImageDrawArea.width;			}			else if (fImageDrawArea.width < fImageDrawArea.height)			{				fImageDrawArea.width = fImageDrawArea.height;			}			return fImageDrawArea;		}  }