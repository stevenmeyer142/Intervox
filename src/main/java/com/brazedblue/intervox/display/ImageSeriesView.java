package com.brazedblue.intervox.display;import javax.swing.*;import javax.swing.border.*;import java.awt.image.*;import java.awt.*;import java.awt.event.*;import java.util.Vector;import java.beans.PropertyChangeSupport;import java.beans.PropertyChangeEvent;import com.brazedblue.intervox.util.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.device.*;import com.brazedblue.intervox.registration.*;  //import com.brazedblue.intervox.display.mac.CopyingImageAdorner;    // displays a series of images  public class ImageSeriesView extends JPanel implements NSImageView {		private JScrollBar 							fScrollbar;	private JLabel								fDescription;	//	this seems to not show up	private AdornedComponent					fImageView;	private ImageSeriesViewControls				fImageSeriesControls;	private ImageSViewFiducialsDisplay			fFiducialsDisplay;	private ImageSViewPopupController			fPopupController;	private ImageSeriesViewFocusHandler			fFocusHandler;	private ImageSeriesViewFocalPointAdorner	fFocalPointAdorner = new ImageSeriesViewFocalPointAdorner();	private ImageAdorner						fImageAdorner;		private FiducialSetsAccess					fPoints;	protected PatientData						fData;	private FocalPointModel						fFocalPoint;		protected ImageViewType						fImageViewType;		private ImageSettingsFactory				fImageSettingsFactory;	private ImageControlSettings			fImageControlSettings;	protected ImageSpacePerspective				fPerspective;			// fiducial display constants 	static final int kFiducialCircleSize = 4;	static final int kFiducialLineWidth = 2;				// popup menu constants	static private final String kAddFiducialStr = "Add Point";	static private final String kDeleteFiducialStr 	= "Delete Point";		static private final String	kRightLabelString	= "RIGHT";	static private final String	kLeftLabelString	= "LEFT";		static private final boolean	kDebugDrawing = false;			public ImageSeriesView(ImageViewType viewType) 		{		this(viewType, null);	}	public ImageSeriesView(ImageViewType viewType, ImageSpacePerspective perspective) 		{		setOpaque(true);                fPerspective = perspective; 				SetImageViewType(viewType);		setLayout(null);				fImageView = new AdornedComponent();		add(fImageView);        fImageView.setOpaque(true);		fImageAdorner = new ImageAdorner(viewType.GetMagnification());		fImageAdorner.SetView(fImageView);		fImageView.AddComponentAdorner(fImageAdorner);		fImageView.SetComponentSizer(fImageAdorner);		fImageView.AddComponentAdorner(fFocalPointAdorner);		fImageView.AddComponentAdorner(new ImageSeriesViewLeftRightLabelAdorner());				if (viewType.HasFeature(ImageViewType.kTracksInterceptFeature))		{			ImageSeriesViewInterceptDistanceText distanceText = new ImageSeriesViewInterceptDistanceText();			fImageView.AddComponentAdorner(distanceText);						fFocusHandler = new ImageSeriesViewInterceptFocalPoint(distanceText);		}		else		{			fFocusHandler = new ImageSeriesViewFocusHandler();		}				if (fImageViewType.GetAxis() < OrthoImageSetController.kTrajectory)		{				fImageView.addMouseListener(fFocusHandler);		}				if (viewType.HasScrollbar())		{			fScrollbar = new JScrollBar();			add(fScrollbar);						fScrollbar.addAdjustmentListener(fFocusHandler);						fImageView.addKeyListener(new ScrollKeyApapter());			fImageView.setFocusable(true);		}					fDescription = new JLabel(fPerspective.GetDescription());				add(fDescription);			fDescription.setBorder(BorderFactory.createRaisedBevelBorder());				if (viewType.HasPopup())		{			fPopupController = new ImageSViewPopupController();		}				if (viewType.DisplaysFiducials())		{			fFiducialsDisplay = new ImageSViewFiducialsDisplay();			fImageView.AddComponentAdorner(fFiducialsDisplay);		}   	}		public void SetShowsImageSpaceSelect(boolean shows)	{		ImageControlSettings settings = GetImageControlSettings();				if (settings != null)		{			settings.SetShowsControl(ImageControlSettings.kImageSpaceSelectControl, shows);		}	}	public void SetShowsSettings(boolean shows)	{		ImageControlSettings settings = GetImageControlSettings();				if (settings != null)		{			settings.SetShowsControl(ImageControlSettings.kSettingsControl, shows);		}	}	public void ImageViewTypeChanged()	{		if (fImageAdorner != null)		{			fImageAdorner.FlushImage();		}				fPerspective.SetSpaceID(GetSpaceID());				if (fPoints != null)		{			fPoints.SetSpaceID(GetSpaceID());		}		if (fFocalPoint != null)		{			fFocalPoint.SetSpaceID(GetSpaceID());		}				if (fFiducialsDisplay != null)		{			fFiducialsDisplay.UpdateRegistrationsForSelectedSpaceLink();		}		SynchWithImageSlices();				repaint();	}      	public int GetAxis()   	{   		return fImageViewType.GetAxis();   	}		public CoRegistrationsAccess GetCoRegistrations()	{		return (fData != null) ? fData.GetCoRegistrations() : null;	}		protected Dimension GetControlPanelSize(int maxWidth)	{		Dimension result = null;				if (fImageSeriesControls != null && fImageSeriesControls.isVisible())		{			fImageSeriesControls.setMaximumSize(new Dimension(maxWidth, Integer.MAX_VALUE));			result = fImageSeriesControls.getPreferredSize();		}				return result;	}                public JComponent GetImageComponent()        {            return fImageView;        }/*		public void AddMouseListener(MouseListener mouseListener)	{		fImageView.addMouseListener(mouseListener);	}		public void RemoveMouseListener(MouseListener mouseListener)	{		fImageView.removeMouseListener(mouseListener);	}*//*	public void DisplayTrackerOutput(DeviceOutput output, TransformerAccess transformer)	{		if (fImageViewType.Tracks())		{			if (transformer.CanTransform(output.GetSpaceID(), GetSpaceID()))			{				if (GetAxis() == OrthoImageSetController.kTrajectory)				{					SetTrajectorySlice(output, transformer);				}				else if (output.GetDataOfType(DeviceOutput.POINT_COORDINATE) != null)				{					Object realPoint = output.GetDataOfType(DeviceOutput.POINT_COORDINATE);					FloatPoint virtualPoint = new FloatPoint((FloatPoint)realPoint);					transformer.TransformPoint(virtualPoint, output.GetSpaceID(), GetSpaceID());					DisplayPoint(virtualPoint, null);				}			}				}	}	*/		public Location3D GetFloatPoint(Point viewPt, FloatPoint floatPt)	{		ScalePointFromView(viewPt);				return fPerspective.GetFloatPoint(viewPt, floatPt);	}		public Location3D GetFloatPoint(Point viewPt)	{		ScalePointFromView(viewPt);				return fPerspective.GetFloatPoint(viewPt);	}/*		public boolean GetAutoScrolls()	{		return fImageViewType.GetAutoScrolls();	} */		private boolean IsEditingConfiguration()	{		return fData == null;	}			//	 move this all out into it's own panel, scrollbars in seperate panel, labels, controls also	protected Dimension GetImageViewSize()	{		Dimension result = new Dimension();		if (!IsEditingConfiguration())		{			result.setSize(fImageView.getPreferredSize());		}		else	// configuration panel		{			result.setSize(fImageViewType.GetMagnification() * 100,fImageViewType.GetMagnification() * 100);		}				Insets insets = fImageView.getInsets();				result.height += insets.bottom + insets.top;		result.width += insets.left + insets.right;		return result;	}		private void AdjustImageProduction()	{		if (fImageAdorner != null)		{			fImageAdorner.FlushImage();		}				if (fPerspective == null)		{			fPerspective = new ImageSpacePerspective();		}				fPerspective.SetSpaceID(GetSpaceID());		fPerspective.SetAxis(fImageViewType.GetAxis());				if (fData != null)		{			SynchWithImageSlices();		}				repaint();	}		protected Location3D GetFocalPoint()	{		Location3D result = FloatPoint.kZero;				if (fFocalPoint != null)		{			result = fFocalPoint.GetFocalPointLocation();		}				return result;	} 	/*    * deprecated as of java 1.4*//*	public ImageCopier GetImageCopier()	{		 return fImageAdorner;	} */		public boolean HandlesClick(MouseEvent e)	{		Dimension imageSize = GetImageSize();		Point mousePt = e.getPoint();				return mousePt.x >= 0 && mousePt.x < imageSize.width &&					 mousePt.y >= 0 && mousePt.y < imageSize.height;	}			private void ScalePointToView(Point pt)	{		fImageAdorner.TranslateImageToView(pt);	}		private void ScalePointFromView(Point pt)	{		fImageAdorner.TranslateViewToImage(pt);	}		private int GetCurrentImageNumber()	{		return fPerspective.CurrentDepth();	}		public boolean DisplaysFiducials()	{		return fFiducialsDisplay != null;	}		public void Dispose()	{		if (fPerspective != null)		{			fPerspective.Dispose();			fPerspective = null;		}				if (fFiducialsDisplay != null)		{			fFiducialsDisplay.Dispose();			fFiducialsDisplay = null;		}				if (fFocusHandler != null && fFocalPoint != null)		{			fFocalPoint.RemoveFocalPointListener(fFocusHandler);					}				fFocusHandler = null;		fPoints = null;				if (fImageAdorner != null)		{			fImageAdorner.Dispose();			fImageAdorner = null;		}				fFiducialsDisplay = null;		fPopupController = null;		fScrollbar = null;	}		public ImageControlSettings GetImageControlSettings()	{		if (fImageControlSettings == null)		{			fImageControlSettings = IsEditingConfiguration() ? DefaultImageControlSettings.GetEditConfigSettings() : fImageSettingsFactory.GetCurrentSettings();		}			//	this shit don't work I need an ImageControlSettingsField		return fImageControlSettings;	}		private void SetupImageSettingsControls()	{		ImageControlSettings settings = GetImageControlSettings();		boolean shown = (settings != null);		if (shown)		{			if (fImageSeriesControls == null)			{				fImageSeriesControls = new ImageSeriesViewControls();				add(fImageSeriesControls);			}						fImageSeriesControls.SetImageControlSettings(settings);			fImageSeriesControls.SetImageViewType(fImageViewType);		}				if (fImageSeriesControls != null)		{			fImageSeriesControls.setVisible(shown);		}				if (fDescription != null)		{			fDescription.setVisible(!shown);		}		 	}		private void SetTrajectorySlice(DeviceOutput output, TransformerAccess transformer)	{			Location3D realPoint = (Location3D)output.GetDataOfType(DeviceOutput.POINT_COORDINATE);			Matrix3 rotation = (Matrix3)output.GetDataOfType(DeviceOutput.ROTATION_MATRIX);						if (rotation != null && 						realPoint != null)			{								ThreeDVector xIncVector = new ThreeDVector(0, 1, 0);				ThreeDVector yIncVector = new ThreeDVector(1, 0, 0);								TrackerSettingsAccess trackerSettings = output.GetTrackerSettings();								if (trackerSettings.IsUsingTrackerOffset())				{					CalculatedOffset offsetCalculations = trackerSettings.GetTrackerCalculatedOffset();										Location3D offset = offsetCalculations.GetOffset();										if (offset != null && !offset.equals(FloatPoint.kZero))					{						yIncVector.Set(offset);						xIncVector.Set(offsetCalculations.GetOrthogonalVector());					}				}				rotation.transform(xIncVector);				rotation.transform(yIncVector);								fPerspective.SetTrajectorySlice(transformer, output.GetSpaceID(), new FloatPoint(realPoint), xIncVector, yIncVector);			} 	}    public Dimension getPreferredSize() 	{		int labelHeight = (fDescription != null && fDescription.isVisible()) ? fDescription.getPreferredSize().height : 0;		Dimension result = GetImageViewSize();				result.height += labelHeight;		result.width += GetScrollbarWidth();				Dimension cntrlPanelSize = GetControlPanelSize(result.width);				if (cntrlPanelSize != null)		{			result.height += cntrlPanelSize.height;		}				return result;    }		public SingleSpaceID GetSpaceID()	{		SingleSpaceID result = fImageViewType.GetSingleSpaceID();		if (fData != null)		{			result = fData.ReconcileSpace(result);		}				return result;	}/*		public void DisplayPoint(Location3D point, NSImageView source)	{		if (GetAxis() != OrthoImageSetController.kTrajectory)		{			int slice = GetSliceForPoint(point);			if (slice == GetCurrentImageNumber() || 					(!fImageViewType.GetAutoScrolls() && 						source != null && source != this))			{				DrawNewFocalPoint(point);			}			else				{					SetFocalPointLocation(point);							}		}	} */		public boolean PointDisplayed(Location3D point)	{		int slice = GetSliceForPoint(point);				return (GetCurrentImageNumber() == slice);	}	   	public JScrollBar GetScrollbar()   	{   		return fScrollbar;   	}      	public int GetScrollbarWidth()   	{   		int result = 0;				if (fScrollbar != null)		{			Dimension prefSize = fScrollbar.getPreferredSize();			result = prefSize.width;		}				return result;   	}   	public void doLayout() 	{		int scrollbarWidth = GetScrollbarWidth();		Dimension preferredSize = getPreferredSize();		Dimension imageSize = GetImageViewSize();				fImageView.setBounds(0, 0, imageSize.width, imageSize.height);				int currentBottom = imageSize.height;		if (scrollbarWidth > 0)		{			fScrollbar.setBounds(preferredSize.width - scrollbarWidth, 0, scrollbarWidth, imageSize.height);		}				if (fDescription != null && fDescription.isVisible())		{			Dimension descriptSize = fDescription.getPreferredSize();			fDescription.setBounds(0, currentBottom, preferredSize.width, descriptSize.height);			currentBottom += descriptSize.height;		}				Dimension cntrlPanelSize = GetControlPanelSize(preferredSize.width);				if (cntrlPanelSize != null)		{			fImageSeriesControls.setBounds(0, currentBottom, cntrlPanelSize.width, cntrlPanelSize.height);			fImageSeriesControls.doLayout();		}				if (fPopupController != null)		{			fPopupController.UpdateActiveArea();		}    }/*		public ImageControlSettings GetImageControlSettings()	{		return (fImageSeriesViewControls != null) ? fImageSeriesViewControls.GetImageControlSettings() : null;	}*/		void SynchWithImageSlices()	{		Image image = createImage(fPerspective.GetImageProducer());		fImageAdorner.SetImage(image);				if (fScrollbar != null)		{			//	update scroller settings;			int numOfImages = fPerspective.MaxDepth();			int currentImage = GetCurrentImageNumber();						int pageIncrement = (numOfImages / 10 > 0) ? numOfImages / 10 : 1;						fScrollbar.setValues(currentImage, 0, 0, numOfImages - 1);		}				if (fDescription != null && fDescription.isVisible())		{			fDescription.setText(fPerspective.GetDescription());		}	}		private int GetSliceForPoint(Location3D pt)	{		int coord = Math.round(pt.GetFloat(GetAxis()));						return NeuroSynchUtil.Limit(coord, 0, fPerspective.MaxDepth() - 1);	}	public void SetFocalPoint(FocalPointModel focalPoint)	{		if (fFocusHandler != null && fFocalPoint != null)		{			fFocalPoint.RemoveFocalPointListener(fFocusHandler);		}				fFocalPoint = focalPoint;				if (fFocusHandler != null && fFocalPoint != null)		{			fFocalPoint.AddFocalPointListener(fFocusHandler);		}	}				public void SetData(PatientData data)	{				fData = data;				if (fData != null)		{			fPoints = data.GetFiducialSetsAccess(GetSpaceID());						if (fFiducialsDisplay != null && fPoints != null)			{				fPoints.GetDataModel().AddListener(fFiducialsDisplay);			}			if (fImageSettingsFactory == null)			{				fImageSettingsFactory = data.GetImageSettingsFactory();			}						fPerspective.SetData(data.GetImageSpacesAccessor(), data.GetImageFilterAccessor());			SynchWithImageSlices();		}				SetupImageSettingsControls();				repaint();	}		private Point GetViewPoint(Location3D location, Point toPoint)	{		toPoint = fPerspective.GetViewPoint(location, toPoint);		ScalePointToView(toPoint);				return toPoint;	}			//	the size to draw	protected Dimension GetImageSize()	{		return fImageAdorner.GetImageSize();	} 		private void SetFocalPointLocation(Location3D newFocus)	{		if (fImageViewType.GetAxis() < OrthoImageSetController.kTrajectory)		{			int slice = GetSliceForPoint(newFocus);			fPerspective.SetToDepth(slice);			fFocalPointAdorner.SetFocalPointLocation(newFocus);		}			}	/*	protected void DrawNewFocalPoint(Location3D newFocus)	{		if (isVisible())		{						SetFocalPointLocation(newFocus);			fImageView.repaint();		}	} */		FiducialPoint GetFiducialForPoint(Point pt)	{		FiducialPoint result = null;				FiducialPoint[] fiducials = fPoints.GetFiducials();				int size = fiducials.length;				Point fiducialPt = new Point();		for (int i = 0; i < fiducials.length; i++)		{			Location3D location = fiducials[i].GetLocation();			int slice = GetSliceForPoint(location);						if (slice == GetCurrentImageNumber()) 			{				fiducialPt = GetViewPoint(location, fiducialPt);				if (NeuroSynchUtil.GetDistanceBetweenPts(fiducialPt.x, fiducialPt.y, 						pt.x, pt.y) <= (kFiducialCircleSize + 2 * kFiducialLineWidth)) 				{					result = fiducials[i];					break;				}			}		}				return result;	}	public void ImageAdjustmentsChanged()	{		fPerspective.ImageAdjustmentsChanged();	}		public Component GetComponent()	{		return this;	}	/*	public void Repaint()	{		repaint();	} */	/*	public void Removed()	{		// do nothing	} */		class ImageSViewPopupController implements NSPopupController, ActionListener	{		NSPopup				fPopup;			ImageSViewPopupController()		{			fPopup = new NSPopup(GetImageComponent(), this);			String[] items = new String[1];			items[0] = kAddFiducialStr;						fPopup.SetItems(items);			fPopup.AddActionListener(this);		}				private void UpdateActiveArea()		{			Dimension imageSize = GetImageSize();			fPopup.SetActiveArea(new Rectangle(0, 0, imageSize.width, imageSize.height));		}				public String[] GetPopupItems(Point pt)		{			String[] result = new String[1];			FiducialPoint point = GetFiducialForPoint(pt);						result[0] = (point == null) ? kAddFiducialStr : kDeleteFiducialStr;					return result;		}			public void actionPerformed(ActionEvent e)		{			if (fPoints != null)			{				if (e.getActionCommand().equals(kAddFiducialStr))				{					Point pressPt = fPopup.GetPressedPoint();					float zCoord = GetCurrentImageNumber();										Location3D location = GetFloatPoint(pressPt);										fPoints.AddPoint(location);				}				else if (e.getActionCommand().equals(kDeleteFiducialStr))				{					Point pressPt = fPopup.GetPressedPoint();					FiducialPoint fiducialPt = GetFiducialForPoint(pressPt);										if (fiducialPt != null)					{						fPoints.DeletePoint(fiducialPt.GetLocation());					}				}			}		}		}		class ImageSViewFiducialsDisplay implements DataModelListener, ComponentAdorner	{		private RegistrationsAccess	 	fRegistrations;		private CoRegistrationsAccess	fCoRegistrations;		private boolean 				fDiplayingRegistrations;				ImageSViewFiducialsDisplay()		{		}				private void Dispose()		{			if (fRegistrations != null)			{				fRegistrations.GetDataModel().RemoveListener(this);			}						if (fCoRegistrations != null)			{				fCoRegistrations.GetDataModel().RemoveListener(this);			}						if (fPoints != null)			{				fPoints.GetDataModel().RemoveListener(this);			}		}				public void DataModelChanged(DataModel model, DataChangedEvent event)		{			if (CoRegistrations.kRegistrationAdded.equals(event.GetMessage()) || 						CoRegistrations.kRegistrationDeleted.equals(event.GetMessage()))			{				repaint();			}			else if (CoRegistrationsAccess.kSetSelectedSpaceLink.equals(event.GetMessage()))			{				UpdateRegistrationsForSelectedSpaceLink();				repaint();			}			else if (fPoints != null && fPoints.GetDataModel() == model)			{				repaint();			}		}				private void UpdateRegistrationsForSelectedSpaceLink()		{			if (fRegistrations != null)			{				SpaceLink link = fCoRegistrations.GetSelectedSpaceLink();								fDiplayingRegistrations = false;								if (link.GetSpace1().equals(GetSpaceID()))				{					fRegistrations.SetSpacePair(GetSpaceID(), link.GetSpace2());					fDiplayingRegistrations = true;				}				else if (link.GetSpace2().equals(GetSpaceID()))				{					fRegistrations.SetSpacePair(GetSpaceID(), link.GetSpace1());					fDiplayingRegistrations = true;				}								if (fDiplayingRegistrations)				{					fRegistrations.GetDataModel().AddListener(this);								}				else				{					fRegistrations.GetDataModel().RemoveListener(this);				}			}		}				private RegistrationsAccess GetLocalizerRegistrations()		{			if (fRegistrations == null)			{				if (fData != null)				{					fCoRegistrations = fData.GetCoRegistrations();					fCoRegistrations.GetDataModel().AddListener(this);					fRegistrations = fCoRegistrations.GetRegistrationsAccess(GetSpaceID(), SingleSpaceID.GetRealSpaceID());										UpdateRegistrationsForSelectedSpaceLink();				}			}						return fRegistrations;		}				public void Paint(Graphics g, AdornedComponent c)		{                    if (fPoints != null)                    {			FiducialPoint[] fiducials = fPoints.GetFiducials();					int currentImage = GetCurrentImageNumber();						Point drawPt = new Point();			fRegistrations = GetLocalizerRegistrations();			for (int i = 0; i < fiducials.length; i++)			{				Location3D location = fiducials[i].GetLocation();				int slice = GetSliceForPoint(location);								if (slice == currentImage)				{					Color color = Color.yellow;										if (fDiplayingRegistrations && fRegistrations !=null && fRegistrations.HasLocation(location, null))					{						color = Color.blue;					}										g.setColor(color);															drawPt = GetViewPoint(location, drawPt);										for (int j = 0; j < kFiducialLineWidth; j++)					{						g.drawOval(drawPt.x - kFiducialCircleSize - j, drawPt.y - kFiducialCircleSize - j, 								2 * (kFiducialCircleSize + j) + 1, 2 * (kFiducialCircleSize + j) + 1);					}														}			}						g.setColor(Color.black);                    }		}	}		protected void SetImageViewType(ImageViewType imageViewType)	{		if (fImageAdorner != null)		{			fImageAdorner.FlushImage();		}				fImageViewType = imageViewType;		if (fImageViewType != null)		{			AdjustImageProduction();		}	}			class ImageSeriesViewLeftRightLabelAdorner implements ComponentAdorner	{				ImageSeriesViewLeftRightLabelAdorner()		{		}				public void Paint(Graphics g, AdornedComponent c)		{			int axis = GetAxis();	   		if (axis == OrthoImageSetController.kCoronal || axis == OrthoImageSetController.kAxial)			{				Dimension imageSize = GetImageSize();				final int kInset = 4;				FontMetrics fMetrics = c.getFontMetrics(c.getFont());				Color oldColor =  g.getColor();				g.setColor(Color.red);				g.drawString(kRightLabelString, kInset, fMetrics.getAscent() + kInset);				g.drawString(kLeftLabelString, imageSize.width - kInset - fMetrics.stringWidth(kLeftLabelString), 									fMetrics.getAscent() + kInset);				g.setColor(oldColor);			}				}	}		class ImageSeriesViewFocalPointAdorner implements ComponentAdorner	{		private Point	fFocus = new Point();		ImageSeriesViewFocalPointAdorner()		{		}				private void SetFocalPointLocation(Location3D focus)		{			fFocus = GetViewPoint(focus, fFocus);			if (Debug.fgDebugging && false && fImageViewType.HasFeature(fImageViewType.kTracksInterceptFeature))			{				System.out.println("FocalPointAdorner.SetFocalPointLocation  " + fFocus.toString());			}		}				public void Paint(Graphics g, AdornedComponent c)		{			if (fImageAdorner.GetImage() != null)			{				if (Debug.fgDebugging && kDebugDrawing)				{					System.out.println("Paint focus " + fFocus + " slice " + Integer.toString(GetCurrentImageNumber()));								}								Dimension imgSize = GetImageSize();				Color oldColor = g.getColor();				g.setXORMode(Color.cyan);				//g.setColor(Color.cyan);								int height = Math.min(imgSize.height, getHeight());				int width = Math.min(imgSize.width, getWidth());											if (fFocus.y >= 0 && fFocus.y < height)				{					g.drawLine(0, fFocus.y, width, fFocus.y);				}					if (fFocus.x >= 0 && fFocus.x < width)				{					g.drawLine(fFocus.x, 0, fFocus.x, height);				}								g.setPaintMode();				g.setColor(oldColor);				}		}	}		class ImageSeriesViewFocusHandler extends MouseAdapter implements FocalPointListener, AdjustmentListener	{		private int fScrollAdjustPropagate = 0;				ImageSeriesViewFocusHandler()		{				}		public void adjustmentValueChanged(AdjustmentEvent e)		{			if (fScrollAdjustPropagate <= 0 && fFocalPoint != null)			{				FloatPoint newFocalPoint = new FloatPoint(fFocalPoint.GetFocalPointLocation());				newFocalPoint.Set(e.getValue(), GetAxis());				fFocalPoint.SetFocalPointLocation(newFocalPoint);								if (Debug.fgDebugging && false && fImageViewType.HasFeature(fImageViewType.kTracksInterceptFeature))				{					System.out.println("adjustmentValueChanged  " + newFocalPoint.toString() + e);				}			}		}			public void HandleMouseClicked(MouseEvent e)		{			if (HandlesClick(e) && fFocalPoint != null)			{				Location3D focalPt = GetFloatPoint(e.getPoint());								fFocalPoint.SetFocalPointLocation(focalPt);			}						fImageView.requestFocusInWindow();		}			public void mousePressed(MouseEvent e)		{			HandleMouseClicked(e);		}		protected void UpdateFocalPoint()		{			if (fFocalPoint != null)			{				Location3D focalPoint = fFocalPoint.GetFocalPointLocation();				UpdateFocalPoint(focalPoint);			}		}				protected void UpdateFocalPoint(Location3D focalPoint)		{			SetScrollBar(focalPoint);			SetFocalPointLocation(focalPoint);			repaint();		}				public void FocalPointChanged(Location3D focalPoint)		{			UpdateFocalPoint();		}				protected void SetScrollBar(Location3D point)		{			if (fScrollbar != null)			{				PushScrollAdjust();				int value = (int)Math.rint(point.GetFloat(GetAxis()));							int oldValue = fScrollbar.getValue();								if (value != oldValue)				{					fScrollbar.setValue(value);				}								PopScrollAdjust();			}		}				private void PushScrollAdjust()		{			fScrollAdjustPropagate++;		}		private void PopScrollAdjust()		{			fScrollAdjustPropagate--;		}				public void DisplayTrackerOutput(DeviceOutput output, TransformerAccess transformer)		{			if (fImageViewType.Tracks())			{				if (transformer.CanTransform(output.GetSpaceID(), GetSpaceID()))				{					if (GetAxis() == OrthoImageSetController.kTrajectory)					{						SetTrajectorySlice(output, transformer);					}					else if (output.GetDataOfType(DeviceOutput.POINT_COORDINATE) != null)					{						UpdateFocalPoint();					}				}					}		}	}		private class ImageSeriesViewInterceptDistanceText implements ComponentAdorner	{  		private String 	fDistanceText;		private int		fDistanceTextOffset = 0;		private Font	fDistanceTextFont;					// can't have static for inner class		/* static */ private final String kDistanceTextLabel = " cm";		/* static */ private final String kNoDistanceTextLabel = "... cm";		/* static */ private final String kMaxDistanceText = "999.9"; // ~10  meters)		/* static */ private final float kMaxValue = 999.9f;				private Font GetDistanceTextFont()		{			if (fDistanceTextFont == null)			{				Font font = getFont();				int size = font.getSize();								if (size < 18)				{					size = 18;				}								fDistanceTextFont = new Font(font.getName(), Font.BOLD, size);			}						return fDistanceTextFont;		}/**************			private void UpdateDistanceText(float distance)		{			if (isVisible())			{				Graphics g = getGraphics();								g.setColor(Color.black);					PaintDistanceText(g);				SetDistanceText(distance);				g.setColor(Color.white);					PaintDistanceText(g);									g.dispose();			}		}***************/		public void Paint(Graphics g, AdornedComponent c) 		{			PaintDistanceText(g,  c);		}				private void SetDistanceText(float distance)		{			if (distance >= kMaxValue /*|| distance < 0 */) // allow negative distance			{				fDistanceText = kNoDistanceTextLabel;			}			else			{								fDistanceText = NeuroSynchUtil.GetDecimalString(distance,1);								fDistanceText += kDistanceTextLabel;			}		}				private void PaintDistanceText(Graphics g, Component c)		{			if (fDistanceText != null)			{				Font oldFont = g.getFont();				Font distanceTextFont = GetDistanceTextFont();								g.setFont(distanceTextFont);				FontMetrics fontMetrics =  c.getFontMetrics(distanceTextFont);				Dimension imageDrawSize = GetImageViewSize();				int textbottom = imageDrawSize.height;				int vPos = textbottom - fontMetrics.getDescent();								if (fDistanceTextOffset <= 0)				{					fDistanceTextOffset = fontMetrics.stringWidth(kMaxDistanceText + kDistanceTextLabel) + 6;				}				Color oldColor = g.getColor();				g.setColor(Color.white);				g.fillRect(0, textbottom - fontMetrics.getHeight(), fDistanceTextOffset,  fontMetrics.getHeight());				g.setColor(Color.red);				g.drawString(fDistanceText, fDistanceTextOffset - fontMetrics.stringWidth(fDistanceText), vPos);								g.setFont(oldFont);				g.setColor(oldColor);			}		}	}		private class ImageSeriesViewInterceptFocalPoint extends ImageSeriesViewFocusHandler	{		private ImageSeriesViewInterceptDistanceText	fDistanceText;						private ImageSeriesViewInterceptFocalPoint(ImageSeriesViewInterceptDistanceText text)		{			fDistanceText = text;		}		/*		protected void SetScrollBar(Location3D point)		{			if (Debug.fgDebugging)			{				System.out.println("ImageSeriesViewInterceptFocalPoint.SetScrollbar  " + point.toString());			}		} */				protected void UpdateFocalPoint(Location3D focalPoint)		{			if (fScrollbar != null)			{				FloatPoint nonScrolledLocation = new FloatPoint(focalPoint);								nonScrolledLocation.Set(fScrollbar.getValue(), GetAxis());								if (Debug.fgDebugging && false)				{					System.out.println("ImageSeriesViewInterceptFocalPoint.UpdateFocalPoint  " + nonScrolledLocation.toString());				}								SetFocalPointLocation(nonScrolledLocation);								repaint();			}			else			{				super.UpdateFocalPoint(focalPoint);			}		}					public void DisplayTrackerOutput(DeviceOutput output, TransformerAccess transformer)		{			Object realPoint = output.GetDataOfType(DeviceOutput.POINT_COORDINATE);			Object rotation = output.GetDataOfType(DeviceOutput.ROTATION_MATRIX);			if (transformer.CanTransform(output.GetSpaceID(), GetSpaceID()) && rotation != null 						&& realPoint != null)			{				FloatPoint virtualPoint = new FloatPoint((FloatPoint)realPoint);				virtualPoint = transformer.TransformPoint(virtualPoint, output.GetSpaceID(), GetSpaceID());				Matrix3 matrix = (Matrix3)rotation;								ThreeDVector xIncVector = new ThreeDVector(1, 0, 0);				TrackerSettingsAccess trackerSettings = output.GetTrackerSettings();									if (trackerSettings.IsUsingTrackerOffset())				{					CalculatedOffset offsetCalculations = trackerSettings.GetTrackerCalculatedOffset();										Location3D offset = offsetCalculations.GetOffset();										if (offset != null && !offset.equals(FloatPoint.kZero))					{						xIncVector.Set(offset);					}				}											//	rotate x vector to pointer direction				matrix.transform(xIncVector);										//	rotate pointer direction from device space to local space				xIncVector = transformer.TransformVector(xIncVector, output.GetSpaceID(), GetSpaceID());				xIncVector.normalize();								FloatPoint trackerPos = (FloatPoint)virtualPoint;								int myAxis = fImageViewType.GetAxis();								float distance = Float.NEGATIVE_INFINITY;				if (xIncVector.Get(myAxis) != 0)				{					distance = (fPerspective.CurrentDepth() - trackerPos.Get(myAxis)) / xIncVector.Get(myAxis);							}								FloatPoint floatPoint = new FloatPoint(-1, -1, -1);				floatPoint.Set(fPerspective.CurrentDepth(), myAxis);				if (distance >= 0)				{					for (int axis = FloatPoint.X; axis <= FloatPoint.Z; axis++)					{						if (axis != myAxis)						{							float value = trackerPos.Get(axis)  + xIncVector.Get(axis) * distance;														floatPoint.Set(value, axis);						}					}					FloatPoint inverseTransformedPoint = new FloatPoint(floatPoint);												// transform back to DeviceOutput space to get distance in Localizer space					inverseTransformedPoint = transformer.TransformPoint(inverseTransformedPoint, GetSpaceID(), output.GetSpaceID());										FloatPoint realTrackerPos = (FloatPoint)realPoint;					distance = realTrackerPos.distance(inverseTransformedPoint);				}				if (Debug.fgDebugging && false)				{					System.out.println("ImageSeriesViewInterceptFocalPoint.DisplayTrackerOutput  " + floatPoint.toString());				}								UpdateFocalPoint(floatPoint);								if (fDistanceText != null)				{					fDistanceText.SetDistanceText(distance);				}				repaint();			}		}		}		/*	 *  scroll up and down one increment with 'u' and 'd' in case the scrollbars do not have arrows (with Mac for instance)	 */	private class ScrollKeyApapter extends KeyAdapter {		public void keyTyped(KeyEvent e)		{			if (fScrollbar != null)			{				System.out.println("key typed " + e.getKeyChar());				char key = e.getKeyChar();				if ('u' == key)				{					int value = fScrollbar.getValue();					if (value < fScrollbar.getMaximum())					{						fScrollbar.setValue(value + 1);					}				}				else if ('d' == key)				{					int value = fScrollbar.getValue();					if (value > fScrollbar.getMinimum())					{						fScrollbar.setValue(value - 1);					}									}			}		}	}}