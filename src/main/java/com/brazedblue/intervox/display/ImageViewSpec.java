package com.brazedblue.intervox.display;import java.awt.*;import java.awt.event.ActionListener;import javax.vecmath.*;import java.util.*;import javax.swing.*;import com.brazedblue.intervox.image.*;class ImageViewSpec implements java.io.Serializable, java.lang.Cloneable {	ImageViewType	fViewType;		ImageViewSpec	fNextRightSpec = null;	ImageViewSpec	fNextBottomSpec = null;		transient NSImageView	fSeriesView;			static ImageViewSpec 	fgBlockingViewSpec = new ImageViewSpec(null);		static final long serialVersionUID =  3000775034137003519L;    ImageViewSpec(ImageViewType viewType) 	{		fViewType = viewType;    }		public boolean DeleteViewSpec(ImageViewSpec viewSpec)	{		boolean result = false;		if (viewSpec == fNextBottomSpec)		{			fNextBottomSpec = fNextBottomSpec.GetNextBottomSpec();			result = true;		}		else if (viewSpec == fNextRightSpec)		{			result = true;		 	if (fNextRightSpec.GetNextBottomSpec() != null)			{				fNextRightSpec = fNextRightSpec.GetNextBottomSpec();				fNextRightSpec.fNextRightSpec = viewSpec.fNextRightSpec;			}			else 			{				fNextRightSpec = fNextRightSpec.GetNextRightSpec();			}		}		else		{			if (fNextBottomSpec != null)			{				result = fNextBottomSpec.DeleteViewSpec(viewSpec);			}						if (!result && fNextRightSpec != null)			{				result = fNextRightSpec.DeleteViewSpec(viewSpec);			}		}				return result;	}		Color GetColor()	{		return fViewType != null ? fViewType.GetColor() : Color.white;	}		public ImageViewSpec GetSpecForType(ImageViewType type)	{		ImageViewSpec result = null;				if (fViewType == type)		{			result = this;		}				else		{			if  (fNextBottomSpec != null)			{				result = fNextBottomSpec.GetSpecForType(type);			}						if (result == null && fNextRightSpec != null)			{				result = fNextRightSpec.GetSpecForType(type);			}		}				return result;	}			String GetIDText()	{		String result = "";				if (fViewType != null)		{			result = fViewType.GetIDText();		}		return result;	}		int GetAxis()	{		return fViewType != null ? fViewType.GetAxis() : OrthoImageSetController.kAxial;	}		void GetIconDimension(Point2f maxSize, float x, float y)	{		float magnification = 0;		if (fViewType != null)		{			magnification = fViewType.GetMagnification();			maxSize.x = Math.max(maxSize.x, x + magnification);			maxSize.y = Math.max(maxSize.y, y + magnification);		}		if (fNextBottomSpec != null)		{			fNextBottomSpec.GetIconDimension(maxSize, x, y + magnification);		}		if (fNextRightSpec != null)		{			fNextRightSpec.GetIconDimension(maxSize, x + magnification, y);		}	}		void IconPaint(Graphics g, int x, int y, float scale)	{		int size = 0;		if (fViewType != null)		{			size = Math.round(scale * fViewType.GetMagnification());						int axis = fViewType.GetAxis();						g.setColor(GetColor());			g.fillRect(x, y, size, size);						String label = GetIDText();			g.setColor(Color.black);						FontMetrics fontMetrics = g.getFontMetrics();						int strHt = fontMetrics.getAscent();			int strWidth = fontMetrics.stringWidth(label);						g.drawString(label, x + (size - strWidth) / 2, y + size - (size - strHt) / 2);		}		if (fNextBottomSpec != null)		{			fNextBottomSpec.IconPaint(g, x, y + size, scale);		}		if (fNextRightSpec != null)		{			fNextRightSpec.IconPaint(g, x + size, y, scale);		}	} 			float GetMagnification()	{		return fViewType != null ? fViewType.GetMagnification() : 1.0f;	}		ImageViewSpec GetNextRightSpec()	{		return fNextRightSpec;	}	ImageViewSpec GetNextBottomSpec()	{		return fNextBottomSpec;	}		NSImageView GetView()	{		return fSeriesView;	}	void SetNextRightSpec(ImageViewSpec spec)	{		fNextRightSpec = spec;	}	void SetNextBottomSpec(ImageViewSpec spec)	{		fNextBottomSpec = spec;				if (spec != null)		{			spec.SetNextRightSpec(fgBlockingViewSpec);		}	}/*		void SetView(NSImageView view)	{		fSeriesView = view;	} */		void SetViewType(ImageViewType viewType)	{		fViewType = viewType;	}		void LayoutViews(Point topLeft, Dimension totalSize)	{		if (fSeriesView != null)		{			Component component = fSeriesView.GetComponent();			Dimension size = component.getPreferredSize();			Rectangle viewBounds = new Rectangle(topLeft, size);			component.setBounds(viewBounds);			totalSize.width = Math.max(totalSize.width, viewBounds.x + viewBounds.width);			totalSize.height = Math.max(totalSize.height, viewBounds.y + viewBounds.height);			component.setVisible(true);						if (fNextRightSpec != null)			{				Point newPoint = new Point(viewBounds.x + viewBounds.width, viewBounds.y);				fNextRightSpec.LayoutViews(newPoint, totalSize);			}						if (fNextBottomSpec != null)			{				Point newPoint = new Point(viewBounds.x, viewBounds.y + viewBounds.height);				fNextBottomSpec.LayoutViews(newPoint, totalSize);			}		}	}	void CreateViews(Container container, Vector viewList)	{		if (fViewType != null)		{			fSeriesView = fViewType.CreateView();			Component component = fSeriesView.GetComponent();			component.setVisible(false);			container.add(component);			viewList.addElement(fSeriesView);		}		if (fNextRightSpec != null)		{			fNextRightSpec.CreateViews(container, viewList);		}				if (fNextBottomSpec != null)		{			fNextBottomSpec.CreateViews(container, viewList);		}	}		void GetTotalSize(Point topLeft, Dimension maxSize)	{		if (fSeriesView != null)		{			Component component = fSeriesView.GetComponent();			Dimension size = component.getPreferredSize();			maxSize.width = Math.max(maxSize.width, topLeft.x + size.width);			maxSize.height = Math.max(maxSize.height, topLeft.y + size.height);						if (fNextRightSpec != null)			{				Point newPoint = new Point(topLeft.x + size.width, topLeft.y);				fNextRightSpec.LayoutViews(newPoint, maxSize);			}						if (fNextBottomSpec != null)			{				Point newPoint = new Point(topLeft.x, topLeft.y + size.height);				fNextBottomSpec.LayoutViews(newPoint, maxSize);			}		}	}		public synchronized Object clone()	{		try 		{ 		    ImageViewSpec result = (ImageViewSpec)super.clone();						result.fSeriesView = null;						if (fNextBottomSpec != null)			{				result.fNextBottomSpec = (ImageViewSpec)fNextBottomSpec.clone();			}			if (fNextRightSpec != null)			{				result.fNextRightSpec = (ImageViewSpec)fNextRightSpec.clone();			}						if (fViewType != null)			{				result.fViewType = (ImageViewType)fViewType.clone();				result.fViewType.SetSpaceID(SingleSpaceID.GetDefaultVirtualSpaceID());			}					    return result;		} 		catch (CloneNotSupportedException e) 		{ 		    // this shouldn't happen, since we are Cloneable		    throw new InternalError();		}	}}