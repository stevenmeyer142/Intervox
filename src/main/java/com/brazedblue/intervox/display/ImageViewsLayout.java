package com.brazedblue.intervox.display;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.util.NeuroSynchUtil;import java.awt.*;import java.awt.event.*;import java.util.*;import java.io.*;import javax.vecmath.*;import javax.swing.*;public class ImageViewsLayout  implements java.io.Serializable, LayoutModel, java.lang.Cloneable { 		ImageViewSpec						fSpecs;		public static final int kDefaultLayout = 1;	public static final int kLargePrimaryCoronal = kDefaultLayout + 1;	public static final int kLargePrimarySagittal = kLargePrimaryCoronal + 1;	public static final int kLargePrimaryAxial = kLargePrimarySagittal + 1;	public static final int kSmallPrimaryCoronal = kLargePrimaryAxial + 1;	public static final int kSmallPrimarySagittal = kSmallPrimaryCoronal + 1;	public static final int kSmallPrimaryAxial = kSmallPrimarySagittal + 1;	public static final int k3ViewTrajectory = kSmallPrimaryAxial + 1;	public static final int k1ViewTrajectory = k3ViewTrajectory + 1;	public static final int k3ViewCoronalAnd3D = k1ViewTrajectory + 1;	public static final int k3ViewInterceptCoronal = k3ViewCoronalAnd3D + 1;	public static final int k3ViewInterceptSagittal = k3ViewInterceptCoronal + 1;	public static final int k3ViewInterceptAxial = k3ViewInterceptSagittal + 1;	public static final int kDoubleDefaultLayout = k3ViewInterceptAxial + 1;			static final long serialVersionUID =  7827964230233616762L;	transient Vector			fListeners = new Vector();    public ImageViewsLayout(int layoutType) 	{		SetLayoutType(layoutType);    }		void SetLayoutType(int layoutType)	{		final boolean kHasPopup = true;		final boolean kShowsFiducial = true;		switch (layoutType)		{			case kDefaultLayout :			{				fSpecs = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kCoronal, 1, true, kHasPopup, kShowsFiducial, true));				ImageViewSpec nextSpec = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kSagittal, 1, true, kHasPopup, kShowsFiducial, true));				fSpecs.SetNextRightSpec(nextSpec);				nextSpec.SetNextRightSpec(new ImageViewSpec(new ImageViewType(OrthoImageSetController.kAxial, 1, true, kHasPopup, kShowsFiducial, true)));			}			break;			case kLargePrimaryCoronal :			case kSmallPrimaryCoronal :						{				float factor = (layoutType == kLargePrimaryCoronal ? 2f : 1.5f);				fSpecs = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kCoronal, factor * 1, true, kHasPopup, kShowsFiducial, true));				ImageViewSpec nextSpec = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kSagittal, factor * .5f, true, kHasPopup, kShowsFiducial, true));				fSpecs.SetNextRightSpec(nextSpec);				nextSpec.SetNextBottomSpec(new ImageViewSpec(new ImageViewType(OrthoImageSetController.kAxial, factor * .5f, true, kHasPopup, kShowsFiducial, true)));			}			break;			case kLargePrimaryAxial :			case kSmallPrimaryAxial :			{				float factor = layoutType == kLargePrimaryAxial ? 2f : 1.5f;				fSpecs = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kSagittal, factor * 1, true, kHasPopup, kShowsFiducial, true));				ImageViewSpec nextSpec = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kCoronal, factor * .5f, kHasPopup, kShowsFiducial, false, true));				fSpecs.SetNextRightSpec(nextSpec);				nextSpec.SetNextBottomSpec(new ImageViewSpec(new ImageViewType(OrthoImageSetController.kAxial, factor * .5f, true, kHasPopup, kShowsFiducial, true)));			}			break;			case kLargePrimarySagittal :			case kSmallPrimarySagittal :			{				float factor = layoutType == kLargePrimarySagittal ? 2f : 1.5f;				fSpecs = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kAxial, factor * 1, true, kHasPopup, kShowsFiducial, true));				ImageViewSpec nextSpec = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kSagittal, factor * .5f, true, kHasPopup, kShowsFiducial, true));				fSpecs.SetNextRightSpec(nextSpec);				nextSpec.SetNextBottomSpec(new ImageViewSpec(new ImageViewType(OrthoImageSetController.kCoronal, factor * .5f, true, kHasPopup, kShowsFiducial, true)));			}			break;			case k3ViewTrajectory :			{				fSpecs = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kTrajectory, 2, false,!kHasPopup, !kShowsFiducial, true));								ImageViewSpec spec2 = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kAxial, 1, true, kHasPopup, kShowsFiducial, true));				fSpecs.SetNextRightSpec(spec2);								ImageViewSpec spec3 = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kCoronal, 1, true, kHasPopup, kShowsFiducial, true));				spec2.SetNextBottomSpec(spec3);			}			break;			case k3ViewInterceptCoronal :			case k3ViewInterceptSagittal :			case k3ViewInterceptAxial :			{				int axis = OrthoImageSetController.kCoronal;				switch (layoutType)				{					case k3ViewInterceptSagittal:						axis = OrthoImageSetController.kSagittal;						break;					case k3ViewInterceptAxial:						axis = OrthoImageSetController.kAxial;						break;				}								fSpecs = new ImageViewSpec(new ImageViewType(axis, 2, true, kHasPopup, kShowsFiducial, true, ImageViewType.kTracksInterceptFeature));				ImageViewSpec spec = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kTrajectory, 2, false, false, false, true));				fSpecs.SetNextRightSpec(spec);								axis = NextOrthogonalAxis(axis);				ImageViewSpec spec2 = new ImageViewSpec(new ImageViewType(axis, 1, true, kHasPopup, kShowsFiducial, true));				spec.SetNextRightSpec(spec2);								axis = NextOrthogonalAxis(axis);				ImageViewSpec spec3 = new ImageViewSpec(new ImageViewType(axis, 1, true, kHasPopup, kShowsFiducial, true));				spec2.SetNextBottomSpec(spec3);			}			break;			case k1ViewTrajectory :			{				fSpecs = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kTrajectory, 2, false, false, false, true));			}			break;						case k3ViewCoronalAnd3D :			{				fSpecs = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kCoronal, 1, true, kHasPopup, kShowsFiducial, true));				ImageViewSpec nextSpec = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kSagittal, 1, true, kHasPopup, kShowsFiducial, true));				fSpecs.SetNextRightSpec(nextSpec);				fSpecs.SetNextBottomSpec(new ImageViewSpec(new ImageViewType(OrthoImageSetController.kAxial, 1, true, kHasPopup, kShowsFiducial, true)));				nextSpec.SetNextBottomSpec(new ImageViewSpec(new Image3DViewType(1)));			}			break;						case kDoubleDefaultLayout :			{				fSpecs = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kCoronal, 1, true, kHasPopup, kShowsFiducial, true));				ImageViewSpec bottomSpec = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kCoronal, 1, true, kHasPopup, kShowsFiducial, true));				fSpecs.SetNextBottomSpec(bottomSpec);				ImageViewSpec rightSpec = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kSagittal, 1, true, kHasPopup, kShowsFiducial, true));				fSpecs.SetNextRightSpec(rightSpec);				bottomSpec = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kSagittal, 1, true, kHasPopup, kShowsFiducial, true));				rightSpec.SetNextBottomSpec(bottomSpec);				ImageViewSpec rightSpec2 = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kAxial, 1, true, kHasPopup, kShowsFiducial, true));				rightSpec.SetNextRightSpec(rightSpec2);				bottomSpec = new ImageViewSpec(new ImageViewType(OrthoImageSetController.kAxial, 1, true, kHasPopup, kShowsFiducial, true));				rightSpec2.SetNextBottomSpec(bottomSpec);			}			break;		}	}		private void readObject(ObjectInputStream s)  			throws ClassNotFoundException, IOException     {      	s.defaultReadObject();      	      	fListeners = new Vector();  	}		public void LayoutChanged()	{		PostLayoutEvent(new LayoutEvent(LayoutEvent.kLayoutModified));	}			private boolean CanDelete(ImageViewSpec viewSpec)	{		return viewSpec != fSpecs;	// can't delete first spec	}  			private void DeleteViewSpec(ImageViewSpec viewSpec)	{		fSpecs.DeleteViewSpec(viewSpec);	}  	public void DisposeViews()	{		}		public void AddLayoutListener(LayoutListener listener)	{		if (!fListeners.contains(listener))		{			fListeners.addElement(listener);		}	}		private void PostLayoutEvent(LayoutEvent event)	{		javax.swing.SwingUtilities.invokeLater(new ImageViewsLayoutEvent(event));		}		public void RemoveLayoutListener(LayoutListener listener)	{		fListeners.removeElement(listener);		}		private void FireLayoutEvent(LayoutEvent event)	{		//	could implement Multicaster which is overridden		//	more efficient than allocation lists				if (fListeners.size() > 0)		{			LayoutListener[] listeners;			synchronized(fListeners)			{				listeners = new LayoutListener[fListeners.size()];								fListeners.copyInto(listeners);			}						for (int i = 0; i < listeners.length; i++)			{				listeners[i].ProcessLayoutEvent(event);			}		}	}	public void Layout(Container container, Dimension layoutExtent)	{		if (fSpecs != null)		{			Point topLeft = new Point(0, 0);			fSpecs.LayoutViews(topLeft, layoutExtent);		}			}				public Image GetIconImage(Component component, int baseIconSize)	{		Point2f size = new Point2f(0, 0);		fSpecs.GetIconDimension(size, 0, 0);				int iconSize = Math.round(baseIconSize *  Math.max(size.x, size.y));				Image result = component.createImage(iconSize, iconSize);				Graphics graphics = result.getGraphics();				fSpecs.IconPaint(result.getGraphics(), 0, 0, baseIconSize);				graphics.dispose();				return result;	}		public void CreateViews(Container container, Vector viewList)	{		// logging		if (fSpecs != null)		{			fSpecs.CreateViews(container, viewList);		}	}		public Dimension GetLayoutSize()	{		Dimension result = new Dimension(0, 0);		if (fSpecs != null)		{			Point topLeft = new Point(0, 0);			fSpecs.GetTotalSize(topLeft, result);		}				return result;	}		static private int NextOrthogonalAxis(int axis)	{		axis++;				if (axis > OrthoImageSetController.kCoronal)		{			axis = OrthoImageSetController.kSagittal;		}				return axis;	}		// Debugging	public boolean DebugHasViewType(ImageViewType viewType)	{		return (fSpecs.GetSpecForType(viewType) != null);	}		public void LetUserChangeSettings(ImageViewType viewType)	{		ImageViewSpec viewSpec = fSpecs.GetSpecForType(viewType);		if (viewSpec != null)		{			ImageViewsLayoutSettingsDialog dlog = new ImageViewsLayoutSettingsDialog(viewSpec, viewType);			dlog.pack();			CustomOS.CenterDialog(dlog);			dlog.setVisible(true);	/*			ValidatingDialog dlog = new ValidatingDialog(null, "Choose View Type", true);						Container contentPane = dlog.getContentPane();						contentPane.setLayout(new FlowLayout());						Box choicesBox = new Box(BoxLayout.Y_AXIS);			contentPane.add(choicesBox);						JComboBox perspective = new JComboBox(ImageViewType.kPerspectiveChoices);			perspective.setSelectedItem(viewType.GetPerspectiveString());			choicesBox.add(perspective);						JComboBox magnification = new JComboBox(ImageViewType.kMagnificationChoices);			magnification.setSelectedItem(viewType.GetMagnificationString());			choicesBox.add(magnification);						JCheckBox tracksBtn = new JCheckBox("Track Probe", viewType.Tracks());			choicesBox.add(tracksBtn);						JCheckBox autoScrolls = new JCheckBox("Autoscroll", viewType.GetAutoScrolls());			choicesBox.add(autoScrolls);						JCheckBox addRightView = new JCheckBox("Add Right View ", false);			if (viewSpec.GetNextRightSpec() == null)			{				choicesBox.add(addRightView);			}			JCheckBox addBottomView = new JCheckBox("Add Bottom View ", false);			if (viewSpec.GetNextBottomSpec() == null)			{				choicesBox.add(addBottomView);			}						Box buttonsBox = new Box(BoxLayout.Y_AXIS);			contentPane.add(buttonsBox);						CloseActionListener closeListener = new CloseActionListener(dlog);						JButton cancelButton = new JButton("Cancel");			buttonsBox.add(cancelButton);			cancelButton.addActionListener(closeListener);						JButton okButton = new JButton("OK");			buttonsBox.add(okButton);			okButton.addActionListener(closeListener);						dlog.getRootPane().setDefaultButton(okButton);						dlog.pack();			CustomOS.CenterDialog(dlog);			dlog.show();							if (closeListener.GetCloseObject() == okButton)			{				String magnificationString = (String)magnification.getSelectedItem();				String axisString = (String)perspective.getSelectedItem();				boolean scrolls = autoScrolls.isSelected();				boolean tracks = tracksBtn.isSelected();								ImageViewType newViewType = ImageViewType.NewImageViewType(axisString, scrolls, 									tracks, magnificationString, viewType);								if (!addRightView.isSelected() && !addBottomView.isSelected())				{					viewSpec.SetViewType(newViewType);				}								else				{					if (addRightView.isSelected())					{						ImageViewSpec nextRight = new ImageViewSpec(newViewType);						viewSpec.SetNextRightSpec(nextRight);					}										if (addBottomView.isSelected())					{						ImageViewSpec nextBottom = new ImageViewSpec(!addRightView.isSelected() ? newViewType :											(ImageViewType) newViewType.clone());						viewSpec.SetNextBottomSpec(nextBottom);					}				}								PostLayoutEvent(new LayoutEvent(LayoutEvent.kLayoutModified));			}*/		}		else		{			NeuroSynchUtil.ErrorMessage("ImageViewsLayout.LetUserChangeSettings- Couldn't find ImageViewSpec for type", NeuroSynchUtil.kNoDlog);			NeuroSynchUtil.ErrorMessage("Program Error changing view settings", NeuroSynchUtil.kShowDlog);		}		}  	public synchronized Object clone()	{ 		try 		{ 		    ImageViewsLayout result = (ImageViewsLayout)super.clone();						result.fListeners = new Vector();			result.fSpecs = (ImageViewSpec)fSpecs.clone();					    return result;		} 		catch (CloneNotSupportedException e) 		{ 		    // this shouldn't happen, since we are Cloneable		    throw new InternalError();		}	}			class ImageViewsLayoutEvent implements Runnable	{		LayoutEvent fEvent;		ImageViewsLayoutEvent(LayoutEvent event)		{			fEvent = event;		}				public void run()		{			FireLayoutEvent(fEvent);		}			}				//  for user selected settings	class ImageViewsLayoutSettingsDialog extends ValidatingDialog implements ActionListener	{		private ImageViewSpec	fImageViewSpec;		private ImageViewType 	fViewType;		private JComboBox 		fPerspective;		private JComboBox 		fMagnification;		private JCheckBox 		fTracksBtn;		private JCheckBox 		fAutoScrolls;		private JCheckBox 		fDeleteView;		private JCheckBox 		fAddRightView;		private JCheckBox 		fAddBottomView;		private JButton			fOKButton;				ImageViewsLayoutSettingsDialog(ImageViewSpec viewSpec, ImageViewType viewType)		{			super(null, "Choose View Type", true);						fViewType = viewType;			fImageViewSpec = viewSpec;			Container contentPane = getContentPane();						contentPane.setLayout(new FlowLayout());						Box choicesBox = new Box(BoxLayout.Y_AXIS);			contentPane.add(choicesBox);						fPerspective = new JComboBox(ImageViewType.kPerspectiveChoices);			fPerspective.setSelectedItem(fViewType.GetPerspectiveString());			choicesBox.add(fPerspective);			fPerspective.addActionListener(this);						fMagnification = new JComboBox(ImageViewType.kMagnificationChoices);			fMagnification.setSelectedItem(fViewType.GetMagnificationString());			choicesBox.add(fMagnification);						fTracksBtn = new JCheckBox("Track Probe", fViewType.Tracks());			choicesBox.add(fTracksBtn);						fAutoScrolls = new JCheckBox("Autoscroll", fViewType.GetAutoScrolls());			choicesBox.add(fAutoScrolls);						fDeleteView = new JCheckBox("Delete Current View ", false);			if (CanDelete(viewSpec))			{				choicesBox.add(fDeleteView);				fDeleteView.addActionListener(this);			}			fAddRightView = new JCheckBox("Add Right View ", false);			if (fImageViewSpec.GetNextRightSpec() == null)			{				choicesBox.add(fAddRightView);			}			fAddBottomView = new JCheckBox("Add Bottom View ", false);			if (fImageViewSpec.GetNextBottomSpec() == null)			{				choicesBox.add(fAddBottomView);			}						Box buttonsBox = new Box(BoxLayout.Y_AXIS);			contentPane.add(buttonsBox);						CloseActionListener closeListener = new CloseActionListener(this)			{				public void actionPerformed(ActionEvent e)				{					super.actionPerformed(e);							if (GetCloseObject() == fOKButton)					{						if (fDeleteView.isSelected())						{							DeleteViewSpec(fImageViewSpec);						}						else						{							String magnificationString = (String)fMagnification.getSelectedItem();							String axisString = (String)fPerspective.getSelectedItem();							boolean scrolls = fAutoScrolls.isSelected();							boolean tracks = fTracksBtn.isSelected();														ImageViewType newViewType = ImageViewType.NewImageViewType(axisString, scrolls, 												tracks, magnificationString, fViewType);														if (!fAddRightView.isSelected() && !fAddBottomView.isSelected())							{								fImageViewSpec.SetViewType(newViewType);							}														else							{								if (fAddRightView.isSelected())								{									ImageViewSpec nextRight = new ImageViewSpec(newViewType);									fImageViewSpec.SetNextRightSpec(nextRight);								}																if (fAddBottomView.isSelected())								{									ImageViewSpec nextBottom = new ImageViewSpec(!fAddRightView.isSelected() ? newViewType :														(ImageViewType) newViewType.clone());									fImageViewSpec.SetNextBottomSpec(nextBottom);											}							}						}												PostLayoutEvent(new LayoutEvent(LayoutEvent.kLayoutModified));					}									}			};						JButton cancelButton = new JButton("Cancel");			buttonsBox.add(cancelButton);			cancelButton.addActionListener(closeListener);						fOKButton = new JButton("OK");			buttonsBox.add(fOKButton);			fOKButton.addActionListener(closeListener);						getRootPane().setDefaultButton(fOKButton);			//			dlog.pack();//			CustomOS.CenterDialog(dlog);//			dlog.show();						}			public void actionPerformed(ActionEvent e)		{			if (e.getSource() == fPerspective)			{				EnableAllSettingsButtons(true);				String selection = (String)fPerspective.getSelectedItem();				if (ImageViewType.kProbeTrajectoryPerspective.equals(selection) || ImageViewType.k3DPerspective.equals(selection))				{					fAutoScrolls.setEnabled(false);				}			}			else if (e.getSource() == fDeleteView)			{				EnableAllButtons(!fDeleteView.isSelected());				fDeleteView.setEnabled(true);								}		}				private void EnableAllSettingsButtons(boolean enable)		{			fAutoScrolls.setEnabled(enable);			fMagnification.setEnabled(enable);			fPerspective.setEnabled(enable);			fTracksBtn.setEnabled(enable);		}				private void EnableAllButtons(boolean enable)		{			EnableAllSettingsButtons(enable);			fDeleteView.setEnabled(enable);			fAddRightView.setEnabled(enable);			fAddBottomView.setEnabled(enable);					}	}}