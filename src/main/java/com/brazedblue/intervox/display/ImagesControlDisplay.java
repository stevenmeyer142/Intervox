package com.brazedblue.intervox.display;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.device.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.util.*;import java.awt.*;import java.awt.event.*;import java.util.*;import javax.swing.*;import javax.swing.border.*;public class ImagesControlDisplay extends JPanel implements ActionListener {  PatientData fData;  int fMode = kNoMode;  JPanel fModeSelectionPanel;  TrackerController fTracker;  OrthoImageSetController fController;  //	the different selections  ControlsDisplay fCurrentControlsDisplay = null;  RegistrationCntrlsDisplay fRegistrationControls = null;  TransformationsDisplay fTransformationsDisplay = null;  SelectLayoutDisplay fSelectLayoutDisplay = null;  SnapshotsDisplay fSnapshotsDisplay = null;  static final int kNoMode = 1;  static final int kSelectLayout = kNoMode + 1;  static final int kRegisterFiducial = kSelectLayout + 1;  static final int kSelectTransform = kRegisterFiducial + 1;  static final int kSnapshot = kSelectTransform + 1;  private static final String kSelectLayoutStr = "Select Layout";  private static final String kRegisterFiducialStr = "Register Fiducials";  private static final String kSelectTransformStr = "Select Transformation";  private static final String kSnapshotsStr = "Markers";  public static final boolean kUseBoxLayout = false;  public ImagesControlDisplay(      Container container, TrackerController tracker, OrthoImageSetController controller) {    fTracker = tracker;    fController = controller;    if (kUseBoxLayout) {      setLayout(new BoxLayout(this, BoxLayout.X_AXIS));    } else {      setPreferredSize(new Dimension(200, 180));    }    container.addComponentListener(new MyComponentAdapter());    Border border = new BevelBorder(BevelBorder.RAISED);    setBorder(border);  }  public void Dispose() {    if (fRegistrationControls != null) {      fRegistrationControls.Dispose();    }    if (fSelectLayoutDisplay != null) {      fSelectLayoutDisplay.Dispose();    }    if (fSnapshotsDisplay != null) {      fSnapshotsDisplay.Dispose();    }    if (fTransformationsDisplay != null) {      fTransformationsDisplay.Dispose();    }  }  private void SetupButtons() {    if (fModeSelectionPanel == null) {      Border border = new BevelBorder(BevelBorder.RAISED);      if (!kUseBoxLayout) {        fModeSelectionPanel = new JPanel(new GridLayout(8, 1));      } else {        fModeSelectionPanel =            new JPanel() {              public Dimension getMinimumSize() {                return getPreferredSize();              }            };        fModeSelectionPanel.setLayout(new BoxLayout(fModeSelectionPanel, BoxLayout.Y_AXIS));      }      add(fModeSelectionPanel);      fModeSelectionPanel.setBorder(border);      ButtonGroup group = new ButtonGroup();      JRadioButton item = new JRadioButton(kSelectLayoutStr);      fModeSelectionPanel.add(item);      group.add(item);      item.addActionListener(this);      item.setSelected(true);      item = new JRadioButton(kRegisterFiducialStr);      fModeSelectionPanel.add(item);      group.add(item);      item.addActionListener(this);      item = new JRadioButton(kSelectTransformStr);      fModeSelectionPanel.add(item);      group.add(item);      item.addActionListener(this);      item = new JRadioButton(kSnapshotsStr);      fModeSelectionPanel.add(item);      group.add(item);      item.addActionListener(this);    }  }  private void SetupControlsDisplay() {    if (fRegistrationControls == null) {      Border border = new BevelBorder(BevelBorder.RAISED);      fRegistrationControls = new RegistrationCntrlsDisplay(fTracker, fController);      fRegistrationControls.setBorder(border);      fTransformationsDisplay = new TransformationsDisplay(fTracker);      fTransformationsDisplay.setBorder(border);      fSelectLayoutDisplay = new SelectLayoutDisplay();      fSelectLayoutDisplay.setBorder(border);      fSnapshotsDisplay =          new SnapshotsDisplay(fController.GetFocalPoint(SingleSpaceID.GetDefaultVirtualSpaceID()));      fSnapshotsDisplay.setBorder(border);    }    fSelectLayoutDisplay.SetData(fData);    fTransformationsDisplay.SetData(fData);    fRegistrationControls.SetData(fData);    fSnapshotsDisplay.SetData(fData);  }  public void SetConfiguration(Configuration config) {    if (fSelectLayoutDisplay != null && config != null) {      fSelectLayoutDisplay.SetLayoutSelections(config.GetLayoutSelections());      fSelectLayoutDisplay.UpdateControls();    }  }  private void SetMode(int mode) {    if (fMode != mode) {      if (fCurrentControlsDisplay != null) {        remove(fCurrentControlsDisplay);        fCurrentControlsDisplay.ViewPagedOut();      }      switch (mode) {        case kRegisterFiducial:          fCurrentControlsDisplay = fRegistrationControls;          break;        case kSelectTransform:          fCurrentControlsDisplay = fTransformationsDisplay;          break;        case kSelectLayout:          fCurrentControlsDisplay = fSelectLayoutDisplay;          break;        case kSnapshot:          fCurrentControlsDisplay = fSnapshotsDisplay;          break;      }      add(fCurrentControlsDisplay);      fCurrentControlsDisplay.ViewPagedIn();      if (fData != null) {        fCurrentControlsDisplay.UpdateControls();      }      revalidate();      repaint();      fMode = mode;    }  }  public void SetData(PatientData data) {    fData = data;    SetupButtons();    SetupControlsDisplay();    SetMode(kSelectLayout);  }  public void doLayout() {    if (kUseBoxLayout) {      super.doLayout();    } else {      Container parent = getParent();      if (parent != null && fModeSelectionPanel != null) {        Insets theInsets = getInsets();        LayoutManager layout = fModeSelectionPanel.getLayout();        Dimension modePanelSize = layout.preferredLayoutSize(fModeSelectionPanel);        fModeSelectionPanel.setBounds(            theInsets.left, theInsets.top, modePanelSize.width, modePanelSize.height);        Dimension size = getSize();        if (fCurrentControlsDisplay != null) {          fCurrentControlsDisplay.setBounds(              theInsets.left + modePanelSize.width,              theInsets.top,              size.width - (theInsets.left + modePanelSize.width + theInsets.right),              modePanelSize.height);        }      }    }  }  public void actionPerformed(ActionEvent e) {    int newMode = -1;    if (e.getActionCommand().equals(kRegisterFiducialStr)) {      newMode = kRegisterFiducial;    } else if (e.getActionCommand().equals(kSelectTransformStr)) {      newMode = kSelectTransform;    } else if (e.getActionCommand().equals(kSelectLayoutStr)) {      newMode = kSelectLayout;    } else if (e.getActionCommand().equals(kSnapshotsStr)) {      newMode = kSnapshot;    }    if (newMode != -1) {      SetMode(newMode);    }  }  class MyComponentAdapter extends ComponentAdapter {    MyComponentAdapter() {}    public void componentResized(ComponentEvent e) {      invalidate();      revalidate();    }  }  class ImagesControlDelayedSetMode implements Runnable {    int fMode;    ImagesControlDelayedSetMode(int mode) {      fMode = mode;    }    public void run() {      SetMode(fMode);    }  }}