package com.brazedblue.intervox.display;import java.awt.*;import java.util.*;import java.awt.event.*;import javax.swing.JComponent;public class NSPopup implements MouseListener, MouseMotionListener, ActionListener {	private boolean 			fShown = false;  	private Rectangle	 		fLocation = new Rectangle(0, 0, 0, 0);	private Rectangle			fActiveArea;	private String[]	 		fItems;	private int				fSelectedItem = kNoSelection;	private JComponent 		fComponent = null;	private NSPopupController	fPopupController;		Vector						fActionListeners = new Vector();	Point						fPressedPt;	boolean					fMousePressed = false;		private Color				fSavedBackColor;	private Color				fSavedForeColor;			static private DrawRubber3D f3DDraw = new DrawRubber3D();	static private final int kInset = 3;		static final private int kDefaultWidth = 40;	static final private int kDefaultItemHt = 10;		static final private int kNoSelection = -1;	    public NSPopup(JComponent component, NSPopupController controller) 	{		fComponent = component;		fComponent.addMouseListener(this);		fComponent.addMouseMotionListener(this);		fPopupController = controller;    }		private JComponent GetComponent()	{		return fComponent;	}		public void mousePressed(MouseEvent e)	{		if (fActiveArea == null || fActiveArea.contains(e.getPoint()))		{			fSelectedItem = kNoSelection;			fPressedPt = new Point(e.getX(), e.getY());			SetItemsRect(e.getX(), e.getY());			fMousePressed = true;						javax.swing.Timer timer = new javax.swing.Timer(250, this);	// wait 1/4 second to show popup			timer.setRepeats(false);			timer.start();		}	}		public void SetItems(String[] items)	{		fItems = items;	}		public Point GetPressedPoint()	{		return fPressedPt;	}		public void SetActiveArea(Rectangle activeArea)	{		fActiveArea = activeArea;	}		public void mouseDragged(MouseEvent e)	{		if (fShown)		{			int newItem = GetItemForPoint(e.getX(), e.getY());			if (newItem != fSelectedItem)			{				PrepareToDraw();								int oldItem = fSelectedItem;				fSelectedItem = newItem;								if (oldItem != kNoSelection)				{					DrawMenuItem(oldItem);				}				if (fSelectedItem != kNoSelection)				{					DrawMenuItem(fSelectedItem);				}								FinishDraw();			}		}	}		public void mouseExited(MouseEvent e)	{		if (fShown)		{			HidePopup();		}	} 		public void mouseReleased(MouseEvent e)	{		if (fShown)		{			if (fSelectedItem != kNoSelection)			{				PrepareToDraw();				Graphics graphics = GetGraphics();				graphics.setXORMode(GetBackColor(fSelectedItem));				graphics.setColor(GetForeColor(fSelectedItem));				Rectangle rect = GetItemRectangle(fSelectedItem);				for (int i = 0; i < 6; i++)				{					graphics.fillRect(rect.x, rect.y, rect.width, rect.height);					try 					{						Thread.sleep(80);					} 					catch (InterruptedException ex)					{					}				}				graphics.setPaintMode();				FinishDraw();				graphics.dispose();			}			// need to flash here			HidePopup();						NotifyListeners();		}				fMousePressed = false;    }     	public String GetSelection()	{		String selection = null;		if (fSelectedItem != kNoSelection)		{			selection = GetString(fSelectedItem);		}				return selection;	}		private void GetMenuItems()	{		if (fPopupController != null)		{			String[] items = fPopupController.GetPopupItems(fPressedPt);						if (items != null)			{				fItems = items;			}		}	}		private void SetItemsRect(int x, int y)	{		GetMenuItems();		Rectangle visRect = GetVisibleRect();		int width = GetMenuWidth();		int ht = GetItemHeight() * GetNumOfItems();		fLocation.width = width + 2 * kInset;		fLocation.height = ht + 2 * kInset;		if (x + width > visRect.x + visRect.width)		{			fLocation.x = x - width;		}		else		{			fLocation.x = x;		}		if (y + ht > visRect.y + visRect.height)		{			fLocation.y = visRect.y + visRect.height - ht;;		}		else		{			fLocation.y = y;		}	}		public void DrawMenu()	{		if (fShown && fItems != null)		{			PrepareToDraw();			int size = fItems.length;			Graphics g = GetGraphics();						f3DDraw.Draw(fLocation, Draw3D.NORMAL, g);						g.dispose(); 			for (int i = 0; i < size; i++)			{				DrawMenuItem(i);			}						FinishDraw();		}	}		private void DrawMenuItem(int item)	{		String itemString = GetString(item);		int leftOffset = GetLeftOffset();		int topOffset = GetTopOffset();				Graphics graphics = GetGraphics();		Color backColor = GetBackColor(item);		Color foreColor = GetForeColor(item);				Rectangle itemRect = GetItemRectangle(item);		graphics.setColor(backColor);		graphics.fillRect(itemRect.x, itemRect.y, itemRect.width, itemRect.height);				FontMetrics fMetrics = GetFontMetrics();		graphics.setColor(foreColor);		if (fMetrics != null)		{			graphics.drawString(itemString, itemRect.x + leftOffset, 					itemRect.y + topOffset + fMetrics.getLeading() + fMetrics.getAscent());		}				graphics.dispose();	}		private int GetMenuWidth()	{		int width = kDefaultWidth;		int size = GetNumOfItems();		FontMetrics fMetrics = GetFontMetrics();					for (int i = 0; i < size; i++)		{			String itemString = GetString(i);			int stringWidth = fMetrics.stringWidth(itemString);			if (stringWidth > width)			{				width = stringWidth;			}		}		return width + 2 * GetLeftOffset();	}		private int GetItemHeight()	{		int itemHt = kDefaultItemHt;		FontMetrics fMetrics = GetFontMetrics();			if (fMetrics != null)		{			itemHt = fMetrics.getHeight() + 2 * GetTopOffset();		}				return itemHt;	}	 	private void ShowPopup()	{		fShown = true;		DrawMenu();	}		private void HidePopup()	{		fShown = false;		Component component = GetComponent();		component.repaint(fLocation.x, fLocation.y, fLocation.width, fLocation.height);	}		private FontMetrics GetFontMetrics()	{		FontMetrics result = null;				Component component = GetComponent();		if (component != null)		{			Font font = component.getFont();						if (font != null)			{				result = component.getFontMetrics(font);			}		}				return result;	}		private int GetNumOfItems()	{		int result = 0;		if (fItems != null)		{			result = fItems.length;		}				return result;	}		private Rectangle GetVisibleRect()	{		Rectangle result = new Rectangle();		fComponent.computeVisibleRect(result);		return result;	}		private Graphics GetGraphics()	{		Graphics result = null;		Component component = GetComponent();				if (component != null)		{			result = component.getGraphics();		}				return result;	}		private void PrepareToDraw()	{		Component comp = GetComponent();				fSavedBackColor = comp.getBackground();		fSavedForeColor = comp.getForeground();	}	private void FinishDraw()	{		Component comp = GetComponent();				comp.setBackground(fSavedBackColor);		comp.setForeground(fSavedForeColor);	}		private String GetString(int item)	{		return fItems[item];	}		private int  GetLeftOffset()	{		return 4;	}	private int  GetTopOffset()	{		return 4;	}		private Color GetBackColor(int item)	{		if (item == fSelectedItem)		{			return Color.black;		}		else		{			return Color.lightGray;		}	}	private Color GetForeColor(int item)	{		if (item == fSelectedItem)		{			return Color.white;		}		else		{			return Color.black;		}	}	private Rectangle GetItemRectangle(int item)	{		int itemHeight = (fLocation.height - 2 * kInset) / fItems.length;		return new Rectangle(fLocation.x + kInset, fLocation.y + kInset + item * itemHeight,					fLocation.width - 2 * kInset, itemHeight);	}		private int GetItemForPoint(int x, int y)	{		if (fLocation.contains(x, y))		{			int itemHeight = fLocation.height / fItems.length;						return ((y - fLocation.y) / itemHeight);				}		else		{			return kNoSelection;		}	}		public boolean Shown()	{		return fShown;	}		public void AddActionListener(ActionListener listener)	{		if (!fActionListeners.contains(listener))		{			fActionListeners.addElement(listener);		}	}		private void NotifyListeners()	{		if (fSelectedItem != kNoSelection)		{			Enumeration iter = fActionListeners.elements();			ActionEvent event = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, GetSelection());						while (iter.hasMoreElements())			{				ActionListener l = (ActionListener)iter.nextElement();				l.actionPerformed(event);			}		}	}		public void mouseMoved(MouseEvent e)	{	}		public void mouseClicked(MouseEvent e)	{	}		public void mouseEntered(MouseEvent e)	{	}		public void actionPerformed(ActionEvent e)	{		if (fMousePressed)		{			ShowPopup();		}	}  }