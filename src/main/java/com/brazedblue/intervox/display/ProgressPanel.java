package com.brazedblue.intervox.display;import com.brazedblue.intervox.data.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.*;public class ProgressPanel extends JPanel implements ProgressBroadcaster {  JProgressBar fProgressBar;  JLabel fMessageLabel;  JLabel fNoteLabel;  boolean fCancelled = false;  private static final String kFailedMessage = "Failed!";  private static final String kSuccessfulMessage = "Complete";  public ProgressPanel() {    this(true);  }  public ProgressPanel(boolean canCancel) {    if (true) {      setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));    } else {      setLayout(new GridLayout(4, 1));    }    fMessageLabel = new JLabel("Message");    add(fMessageLabel);    fMessageLabel.setHorizontalAlignment(JLabel.CENTER);    fProgressBar = new JProgressBar();    add(fProgressBar);    fNoteLabel = new JLabel("Note");    add(fNoteLabel);    fNoteLabel.setHorizontalAlignment(JLabel.CENTER);    if (canCancel) {      JButton cancel = new JButton("Cancel");      add(cancel);      ActionListener l =          new ActionListener() {            public void actionPerformed(ActionEvent e) {              fCancelled = true;            }          };      cancel.addActionListener(l);    }  }  public Dimension getPreferredSize() {    Dimension result = new Dimension(300, 50);    Font font = getFont();    if (font != null) {      FontMetrics fMetrics = getFontMetrics(font);      result.height = 5 * fMetrics.getHeight();    }    return result;  }  public void Start(String message, int low, int high) {    //		fProgressBar.show(true);    //		fNoteLabel.show(true);    fMessageLabel.setText(message);    fProgressBar.setMinimum(low);    fProgressBar.setMaximum(high);    fProgressBar.setValue(low);    fNoteLabel.setText("");    repaint();  }  public void UpdateCurrentValue(String note, int value) throws ProgressCancelledException {    if (fCancelled) {      throw new ProgressCancelledException("Cancelled");    } else {      fNoteLabel.setText(note);      int oldValue = fProgressBar.getValue();      if (oldValue != value) {        fProgressBar.setValue(value);      }    }  }  public void setBounds(int x, int y, int width, int height) {    Dimension preferredSize = new Dimension(width, Math.min(height / 3, 40));    fMessageLabel.setPreferredSize(preferredSize);    fNoteLabel.setPreferredSize(preferredSize);    fProgressBar.setPreferredSize(preferredSize);    super.setBounds(x, y, width, height);  }  public void Finish(boolean successful) {    //		fProgressBar.show(false);    //		fNoteLabel.show(false);    fNoteLabel.setText(successful ? kSuccessfulMessage : kFailedMessage);  }  /*  public void DataModelChanged(DataModel model, DataChangedEvent event)  {  	if (event.GetEventNumber() == DataChangedEvent.L0ADING)  	{  		SetProgress(event.GetMessage(), event.GetValue());  	}  } */}