package com.brazedblue.intervox.display;import java.util.Vector;import java.awt.event.*;import java.awt.*;import javax.swing.*;import javax.swing.event.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.device.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.registration.*;import com.brazedblue.intervox.util.NeuroSynchUtil;import com.brazedblue.intervox.util.Debug;public class RegistrationCntrlsDisplay extends ControlsDisplay {	private AbstractButton 							fRegisterButton;	private RegistrationCntrlsDisplaySpaceListener	fSpaceSelectListener;		private FiducialControlsDisplay					fFiducialControls1;	private FiducialControlsDisplay					fFiducialControls2;	private RegistrationsEditor						fRegistrationsEditor;		private CoRegistrationsAccess					fCoRegistrations;	private ImageSpacesAccessor						fImageSpacesAccessor;	private DataModelListener						fSpacesListener = new DataModelListener()	{		public void DataModelChanged(DataModel model, DataChangedEvent event)		{			UpdateControls();		}	};	private boolean									fShowsLocalizerSpace = true;					   	private static final String 					kRegister = "Register";	   public RegistrationCntrlsDisplay(TrackerController tracker, OrthoImageSetController controller) 	{		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));		fShowsLocalizerSpace = tracker != null;				JPanel registrationsBox = new JPanel();		registrationsBox.setLayout(new BoxLayout(registrationsBox, BoxLayout.X_AXIS));		add(registrationsBox);		registrationsBox.setBorder(BorderFactory.createRaisedBevelBorder());				fRegisterButton = new JButton(kRegister);		registrationsBox.add(fRegisterButton);				ActionListener l = new ActionListener()		{			public void actionPerformed(ActionEvent e)			{				DoRegistration();			}				};				fRegisterButton.addActionListener(l);		registerKeyboardAction(l, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), WHEN_IN_FOCUSED_WINDOW);				enableEvents(AWTEvent.KEY_EVENT_MASK);		setRequestFocusEnabled(true);				Box box = new Box(BoxLayout.Y_AXIS);		registrationsBox.add(box);				fFiducialControls1 = new FiducialControlsDisplay(SingleSpaceID.GetDefaultVirtualSpaceID(), false, tracker); 			box.add(fFiducialControls1);		if (Debug.fgDebugging)		{			fFiducialControls1.setName("fFiducialControls1");		}					fFiducialControls2 = new FiducialControlsDisplay((tracker != null) ? SingleSpaceID.GetRealSpaceID() : SingleSpaceID.GetDefaultVirtualSpaceID(), fShowsLocalizerSpace,								tracker);			box.add(fFiducialControls2);		if (Debug.fgDebugging)		{			fFiducialControls2.setName("fFiducialControls2");		}						if (Debug.fgDebugging)		{			fRegistrationsEditor = new RegistrationsEditor();						add(fRegistrationsEditor);			}		fFiducialControls1.SetFocalPoint(controller.GetFocalPoint(null));		fFiducialControls2.SetFocalPoint(controller.GetFocalPoint(null));				ImageSpaceSelector spaceSelector1 = fFiducialControls1.GetSpaceSelector();		ImageSpaceSelector spaceSelector2 = fFiducialControls2.GetSpaceSelector();				fSpaceSelectListener = new RegistrationCntrlsDisplaySpaceListener(spaceSelector1, spaceSelector2);      	   }/*      	public void doLayout()	{		Debug.PrintStackTrace("");		super.doLayout();	}*/	   		public void Dispose()	{		if (fFiducialControls1 != null)		{			fFiducialControls1.Dispose();		}		if (fFiducialControls2 != null)		{			fFiducialControls2.Dispose();		}				if (fImageSpacesAccessor != null)		{			fImageSpacesAccessor.GetDataModel().RemoveListener(fSpacesListener);		}					}	      private int GetImageSpacesCount()   {   		int result = 0;				if (fImageSpacesAccessor != null)		{			result = fImageSpacesAccessor.GetImageSpaces().length;						if  (fShowsLocalizerSpace)			{				result += fImageSpacesAccessor.GetLocalizerSpaces().length;			}		}				return result;   }			private RegistrationsAccess GetRegistrationsAccess()	{		return fCoRegistrations.GetRegistrationsAccess(fFiducialControls1.GetSpaceID(), fFiducialControls2.GetSpaceID());	}		public void UpdateControls()	{		UnlinkSpaces();				if (GetImageSpacesCount() <2)		{			fFiducialControls2.setVisible(false);		}		else		{			fFiducialControls2.setVisible(true);			fSpaceSelectListener.MakeSelectersMutuallyExclusive();			fFiducialControls2.UpdateViews();		}		fFiducialControls1.UpdateViews();		requestFocus();	}			private void UnlinkSpaces()	{//		fCoRegistrations.GetTransformerAccess().InstallTransformation(null, fFiducialControls1.GetSpaceID(), fFiducialControls2.GetSpaceID());	}	private void DoRegistration()	{		RegistrationsAccess access = GetRegistrationsAccess();		FiducialPoint fid1 = fFiducialControls1.GetFiducialPoint();		FiducialPoint fid2 = fFiducialControls2.GetFiducialPoint();				if (fid1 != null && fid2 != null)		{			access.RegisterPair(fid1, fid2);						java.awt.Toolkit.getDefaultToolkit().beep();						fFiducialControls1.Advance();			fFiducialControls2.Advance();		}					//	 because window focus lost when calling alert (no tracker input)		requestFocus();	}		Window DebugGetWindow() {        Container w = this;        while(!(w instanceof Window)) {            w = w.getParent();        }        return (Window)w;    }	public void SetData(PatientData data)	{		super.SetData(data);				fCoRegistrations = data.GetCoRegistrations();		fImageSpacesAccessor = data.GetImageSpacesAccessor();		fFiducialControls1.SetDataAccessors(data.GetFiducialSetsAccess (null), fImageSpacesAccessor);		fFiducialControls2.SetDataAccessors(data.GetFiducialSetsAccess (null), fImageSpacesAccessor);				fImageSpacesAccessor.GetDataModel().AddListener(fSpacesListener);	}		private boolean CanRegister()	{		return true;	}	/*		class RegistrationTrackerPt implements TrackerListener, KeyListener, ActionListener	{		DeviceOutput 		fLastPoint = null;		DeviceOutput		fLastReference = null;		AbstractButton 		fRegistrationButton;		TrackerController	fTracker;				RegistrationTrackerPt(TrackerController controller, AbstractButton regButton)		{			fRegistrationButton = regButton;			fTracker = controller;						controller.AddTrackerListener(this, 0, true, DeviceOutput.ALL_STATIONS);	// 3rd arg wants transformation			fRegistrationButton.setEnabled(controller.IsConnected());		}								public void DataRetrieved(DeviceOutput output)		{			Object data = output.GetDataOfType(DeviceOutput.POINT_COORDINATE);						if (data != null)			{				if (output.GetStation() == DeviceOutput.STATION1)				{					fLastPoint = output;				}				else if (output.GetStation() == DeviceOutput.STATION2)				{					fLastReference = output;				}			}			data = output.GetDataOfType(DeviceOutput.COMMAND);						if (data != null && TrackerController.kConnectCmd.equals(data))			{				Boolean state = (Boolean)output.GetDataOfType(DeviceOutput.STATE);							boolean enabled = state.booleanValue();				fRegistrationButton.setEnabled(enabled);								if (enabled)				{					requestFocus();				}			}					}		public Component GetComponent()		{			return RegistrationCntrlsDisplay.this;		}				public void keyPressed(KeyEvent e)		{				}				public void keyReleased(KeyEvent e)		{				}				void RegisterSelectedFiducial()		{			int size = fPointButtonPairs.size();			PointButtonPair selectedPair = null;			PointButtonPair nextPair = null;						for (int i = 0; i < size; i++)			{				PointButtonPair pair = (PointButtonPair)fPointButtonPairs.elementAt(i);								AbstractButton btn = pair.GetButton();				if (btn.isSelected())				{					selectedPair = pair;										int nextIndex = (i == size - 1) ? 0 : i + 1;										nextPair = (PointButtonPair)fPointButtonPairs.elementAt(nextIndex);				}			}						if (selectedPair != null)			{				RegistrationsAccess registrations = GetRegistrationsAccess();				FiducialPoint selectedPt = selectedPair.GetFiducialPoint();				if (fLastPoint != null && fLastPoint.IsFresh())				{					DeviceOutput ref = ((fLastReference != null) && fLastReference.IsFresh()) ? fLastReference : null;										registrations.RegisterPair(new LocalizerFiducialPoint(fLastPoint, ref), selectedPt);					java.awt.Toolkit.getDefaultToolkit().beep();					nextPair.GetButton().setSelected(true);					DisplaySelectedPoint(nextPair.GetFiducialPoint().GetLocation());				}				else				{					NeuroSynchUtil.ErrorMessage("Not receiving tracker location", NeuroSynchUtil.kShowDlog);				}			}		}			public void actionPerformed(ActionEvent e)		{			if (e.getActionCommand().equals(kRegister))			{				RegisterSelectedFiducial();			}		}				public void keyTyped(KeyEvent e)		{			if (e.getKeyChar() == KeyEvent.VK_ENTER && fTracker.IsConnected())			{				fRegistrationButton.doClick();			}		}	}	*/	private class RegistrationCntrlsDisplaySpaceListener implements ImageSpaceSelector.ImageSpaceSelectListener	{		private ImageSpaceSelector  fSelector1;		private ImageSpaceSelector  fSelector2;				private boolean 			fPauseListening = false;						private RegistrationCntrlsDisplaySpaceListener(ImageSpaceSelector selector1,									ImageSpaceSelector selector2)		{			fSelector1 = selector1;			fSelector2 = selector2;						fSelector1.AddSpaceSelectListener(this);			fSelector2.AddSpaceSelectListener(this);		}												private void MakeSelectersMutuallyExclusive()		{			fSelector1.ShowSpace(fSelector2.GetSelectedSpace(), false);			fSelector2.ShowSpace(fSelector1.GetSelectedSpace(), false);				} 				public void SpaceSelected(ImageSpaceSelector.SelectEvent event)		{			if (!fPauseListening)			{				fPauseListening = true;								try				{					ImageSpaceSelector selector = event.GetImageSpaceSelector();					ImageSpaceSelector otherSelector = (selector == fSelector1) ?											fSelector2 : fSelector1;										otherSelector.ShowSpace(event.GetSpaceID(), !event.GetSelected());										fCoRegistrations.SetSelectedSpaceLink(fSelector1.GetSelectedSpace(), fSelector2.GetSelectedSpace());					UnlinkSpaces();				}				finally				{					fPauseListening = false;				}			}		}	}}