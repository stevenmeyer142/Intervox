package com.brazedblue.intervox.display;import java.awt.event.*;import com.brazedblue.intervox.util.Debug;import java.awt.*;public class ResizeListener implements MouseListener, MouseMotionListener {	Container	fBoundingContainer;	Component	fResizingComponent;	Component	fResizeButton;	boolean	fProportionalResize = true;	float		fResizeProportions = 1;		int			fX;	int			fY;		Point			fLastFeedBackPt;	Point			fFeedBackOrigin = new Point();  // fResizingComponent.getLocation + fResizingComponent.getSize	Point			fResizingComponentLocation;	Point			fUtilPoint = new Point();	boolean		fResizing = true;		static boolean	fgDebugging = Debug.fgDebugging;	  	public ResizeListener(Container boundingContainer, Component resizingComponent, 				Component resizeButton) 	{		fBoundingContainer = boundingContainer;		fResizingComponent = resizingComponent;		fResizeButton = resizeButton; 		fResizeButton.addMouseMotionListener(this);		fResizeButton.addMouseListener(this);	}		public void mouseDragged(MouseEvent e)	{		GetResizeDelta(e.getX(), e.getY(), fUtilPoint);				if (fUtilPoint.x != 0 || fUtilPoint.y != 0)		{			if (fLastFeedBackPt != null)			{				DrawMovingFeedBack(fLastFeedBackPt.x, fLastFeedBackPt.y);			}			else			{				Dimension size = fResizingComponent.getSize();				fLastFeedBackPt = new Point(size.width, size.height);			}					fLastFeedBackPt.x = fUtilPoint.x + fFeedBackOrigin.x;			fLastFeedBackPt.y = fUtilPoint.y + fFeedBackOrigin.y;					DrawMovingFeedBack(fLastFeedBackPt.x, fLastFeedBackPt.y);		}	}		private void GetResizeDelta(int x, int y, Point pt)	{		if (fProportionalResize)		{			int deltaX = x - fX;			int deltaY = y - fY;			int yCalcDeltaX = (int)(deltaY / fResizeProportions);						pt.x = Math.abs(deltaX) > Math.abs(yCalcDeltaX) ? deltaX : yCalcDeltaX;			pt.y = (int) (deltaX * fResizeProportions);		}				else		{			pt.x = x - fX;			pt.y = y - fY;		}	}		public void mouseMoved(MouseEvent e)	{	}	public void mouseClicked(MouseEvent e)	{	}	public void mousePressed(MouseEvent e)	{		if (e.getComponent() == fResizeButton)		{			fResizing = true;			fX = e.getX();			fY = e.getY();			fResizingComponentLocation = new Point(fResizingComponent.getLocation());				//	could put a loop in here if fResizingComponent.getParent() != fBoundingContainer			Dimension size = fResizingComponent.getSize();			fFeedBackOrigin.x = size.width;			fFeedBackOrigin.y = size.height;		}	}		private void DrawMovingFeedBack(int x, int y)	{		Graphics g = fBoundingContainer.getGraphics();		g.setXORMode(Color.black);		x += fResizingComponentLocation.x;		y += fResizingComponentLocation.y;		g.drawLine(fResizingComponentLocation.x, y, x, y);		g.drawLine(x, fResizingComponentLocation.y, x, y);		g.setPaintMode();		g.dispose();	}		/**	 * Invoked when a mouse button has been released on a component.	 */	public void mouseReleased(MouseEvent e)	{		if (fResizing)		{			if (fLastFeedBackPt != null)			{				DrawMovingFeedBack(fLastFeedBackPt.x, fLastFeedBackPt.y);				fLastFeedBackPt = null;			}			Dimension size = fResizingComponent.getSize();			GetResizeDelta(e.getX(), e.getY(), fUtilPoint);			size.width += fUtilPoint.x;			size.height += fUtilPoint.y;						fResizingComponent.setSize(size);			fBoundingContainer.validate();			if (fgDebugging)			{				System.out.println("mouseReleased, resizing-" + e.toString() + e.getComponent());			}		}		else if (fgDebugging)		{			System.out.println("mouseReleased, not resizing-" + e.toString() + e.getComponent());		}	}		/**	 * Invoked when the mouse enters a component.	 */	public void mouseEntered(MouseEvent e)	{		if (fgDebugging && false)		{			System.out.println("mouseEntered-" + e.toString() + e.getComponent());		}	}		/**	 * Invoked when the mouse exits a component.	 */	public void mouseExited(MouseEvent e)	{		if (fgDebugging)		{			System.out.println("mouseExited-" + e.toString() + e.getComponent());		}	}}