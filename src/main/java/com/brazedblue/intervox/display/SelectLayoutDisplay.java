package com.brazedblue.intervox.display;import com.brazedblue.intervox.data.PatientData;import com.brazedblue.intervox.util.Debug;import java.awt.*;import java.awt.event.*;import java.util.*;import javax.swing.*;class SelectLayoutDisplay extends ControlsDisplay implements ActionListener, LayoutListener {  private Vector fButtons = new Vector();  private LayoutSelectionsModel fLayoutSelections;  SelectLayoutDisplay() {}  public void SetData(PatientData data) {    super.SetData(data);    SetLayoutSelections(data.GetLayoutSelections());  }  void SetLayoutSelections(LayoutSelectionsModel layoutSelections) {    if (fLayoutSelections != null) {      fLayoutSelections.RemoveLayoutListener(this);    }    fLayoutSelections = layoutSelections;    if (fLayoutSelections != null) {      fLayoutSelections.AddLayoutListener(this);    }  }  public void Dispose() {    if (fButtons != null) {      for (int i = 0; i < fButtons.size(); i++) {        LayoutButton button = (LayoutButton) fButtons.elementAt(i);        button.Dispose();        Container parent = button.getParent();        if (parent != null) {          parent.remove(button);        }        button.removeActionListener(this);      }      fButtons = null;    }    if (fLayoutSelections != null) {      fLayoutSelections.RemoveLayoutListener(this);      fLayoutSelections = null;    }    super.Dispose();  }  public void UpdateControls() {    for (int i = 0; i < fButtons.size(); i++) {      AbstractButton button = (AbstractButton) fButtons.elementAt(i);      Container parent = button.getParent();      if (parent != null) {        parent.remove(button);      }      button.removeActionListener(this);    }    fButtons.removeAllElements();    LayoutModel[] layouts = fLayoutSelections.GetLayoutSelections();    if (layouts != null) {      int size = layouts.length;      for (int i = 0; i < size; i++) {        LayoutButton button = new LayoutButton(layouts[i]);        add(button);        button.CreateIcon(); // has to happen after being added to parent        button.addActionListener(this);        fButtons.addElement(button);      }    }  }  public void actionPerformed(ActionEvent e) {    Object button = e.getSource();    int index = fButtons.indexOf(button);    LayoutModel[] layouts = fLayoutSelections.GetLayoutSelections();    if (index >= 0) {      fLayoutSelections.SetSelectedLayout(layouts[index]);    }  }  public void ProcessLayoutEvent(LayoutEvent event) {    if (event.GetEventType() == LayoutEvent.kLayoutsModified) {      if (Debug.fgDebugging) {        Debug.PrintStackTrace("Layout modified");      }      UpdateControls();    }  }}