package com.brazedblue.intervox.display;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.image.*;import java.awt.*;import java.awt.event.*;import java.util.*;import javax.swing.*;class SnapshotsDisplay extends ControlsDisplay implements ActionListener {  Vector fButtons = new Vector();  FocalPointModel fFocalPoint;  private static final String kTakeSnapshotString = "Take Snapshot";  public SnapshotsDisplay(FocalPointModel focalAccess) {    fFocalPoint = focalAccess;    JButton takeBtn = new JButton(kTakeSnapshotString);    add(takeBtn);    takeBtn.addActionListener(this);  }  public SingleSpaceID GetSpaceID() {    return SingleSpaceID.GetDefaultVirtualSpaceID();  }  public void UpdateControls() {    for (int i = 0; i < fButtons.size(); i++) {      AbstractButton button = (AbstractButton) fButtons.elementAt(i);      Container parent = button.getParent();      if (parent != null) {        parent.remove(button);      }      button.removeActionListener(this);    }    fButtons.removeAllElements();    ButtonGroup group = new ButtonGroup();    Vector snapshots = GetSnapshotsList();    if (snapshots != null) {      int size = snapshots.size();      for (int i = 0; i < size; i++) {        Snapshot snapshot = (Snapshot) snapshots.elementAt(i);        JRadioButton button = new JRadioButton("Snapshot " + (i + 1));        add(button);        group.add(button);        button.addActionListener(this);        fButtons.addElement(button);      }    }  }  public void actionPerformed(ActionEvent e) {    if (e.getActionCommand().equals(kTakeSnapshotString)) {      Location3D focalPoint = fFocalPoint.GetFocalPointLocation();      Vector snapshots = GetSnapshotsList();      snapshots.addElement(new Snapshot(focalPoint));      UpdateControls();      revalidate();    } else {      Object button = e.getSource();      int index = fButtons.indexOf(button);      Vector snapshots = GetSnapshotsList();      if (index >= 0) {        Snapshot snapshot = (Snapshot) snapshots.elementAt(index);        fData.SetSelectedPoint(snapshot, SingleSpaceID.GetDefaultVirtualSpaceID());        fData.PostChanged(new DataChangedEvent(this, DataChangedEvent.SELECTED, 0, ""));      }    }  }  private Vector GetSnapshotsList() {    return fData != null ? fData.GetSnapshotsList(SingleSpaceID.GetDefaultVirtualSpaceID()) : null;  }}