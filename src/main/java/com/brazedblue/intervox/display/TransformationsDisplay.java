package com.brazedblue.intervox.display;import java.util.Vector;import java.awt.event.*;import java.awt.*;import javax.swing.*;import javax.swing.border.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.util.NeuroSynchUtil;import com.brazedblue.intervox.device.*;import com.brazedblue.intervox.registration.*;import com.brazedblue.intervox.image.SingleSpaceID;public class TransformationsDisplay extends ControlsDisplay implements ActionListener, TrackerListener {	TrackerController 				fTrackerController;	JCheckBox						fMobileCheck;	JCheckBox						fEnabledCheck;	TransformsSelectDisplay			fCurrentTransformSelect;	Transforms4PointDisplay			f4PointTransforms;	Transforms3PointDisplay			f3PointTransforms;	TransformsPntSelectDisplay		fPntSelectTransforms;	JPanel							fTransformsPanel;		SpaceLinkSelector				fSpaceLinkSelector = new SpaceLinkSelector();		static private final String	k3PointsSelectString = "All 3 Point";	static private final String	k4PointsSelectString = "All 4 Point";	static private final String	kSelectPointsString = "Select Points";		static private final String kEnableString = "Enable Transform";	  	static public final String		kAccuracyStartString = " (";	static public final String 		kAccuracyEndString = ")";			static private final SpaceLink 	kDefaultSpaceLink = new SpaceLink()	{		public SingleSpaceID GetSpace1() { return SingleSpaceID.GetDefaultVirtualSpaceID(); }		public SingleSpaceID GetSpace2() { return SingleSpaceID.GetRealSpaceID(); }	};	    public TransformationsDisplay(TrackerController trackerController) 	{		fTrackerController = trackerController;				setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));		add(fSpaceLinkSelector.GetControl());				fSpaceLinkSelector.AddSpaceLinkSelectListener(new TransformationsDisplaySpaceLinkListener());				fTransformsPanel = new JPanel();		fTransformsPanel.setLayout(new BoxLayout(fTransformsPanel, BoxLayout.X_AXIS));		add(fTransformsPanel);				JPanel optionsPanel = new JPanel();		optionsPanel.setLayout(new BoxLayout(optionsPanel, BoxLayout.Y_AXIS));		fTransformsPanel.add(optionsPanel);		optionsPanel.setBorder(new SoftBevelBorder(BevelBorder.RAISED));				fEnabledCheck = new JCheckBox(kEnableString);		optionsPanel.add(fEnabledCheck);		fEnabledCheck.addActionListener(this);				if (trackerController != null)		{			fMobileCheck = new JCheckBox(TrackerController.kMobileCmd);				optionsPanel.add(fMobileCheck);			fMobileCheck.addActionListener(this);		}						JPanel calcTypePanel= new JPanel();		calcTypePanel.setLayout(new GridLayout(3, 1));		optionsPanel.add(calcTypePanel);				calcTypePanel.setBorder(new SoftBevelBorder(BevelBorder.RAISED));				ButtonGroup group = new ButtonGroup();				JRadioButton button =  new JRadioButton(kSelectPointsString); 		group.add(button);		button.setSelected(true);		calcTypePanel.add(button);		button.addActionListener(this);		//		if (NeuroSynchUtil.GetImageGuided())//		{			//	no 3 Point transforms			//	but could instead allow user to select frome 3 to n - 1/*			button =  new JRadioButton(k3PointsSelectString); 			group.add(button);			calcTypePanel.add(button);			button.addActionListener(this); */	 					button =  new JRadioButton(k4PointsSelectString); 			group.add(button);			calcTypePanel.add(button);			button.addActionListener(this);//		}				fPntSelectTransforms = new TransformsPntSelectDisplay(fTrackerController);		fTransformsPanel.add(fPntSelectTransforms);				fCurrentTransformSelect = fPntSelectTransforms;		   }  	public Component GetComponent()	{	  	return this;	}		private SpaceLink GetSelectedSpaceLink()	{		SpaceLink result = fData.GetCoRegistrations().GetSelectedSpaceLink();				if (result == null)		{			result = kDefaultSpaceLink;		}		return result;	}   	private  TransformationTypeModel GetTransformationType()	{		TransformationTypeModel result = null;		if (fData != null)		{			SpaceLink spaceLink = GetCurrentSpaceLink();						TransformerAccess transfomer = fData.GetCoRegistrations().GetTransformerAccess();						if (transfomer != null)			{				result = transfomer.GetTransformationType(spaceLink.GetSpace1(), spaceLink.GetSpace2());			}		}					return result;	}		private SpaceLink GetCurrentSpaceLink()	{		SpaceLink result = fSpaceLinkSelector.GetSelectedSpaceLink();		if (result == null)		{			result = kDefaultSpaceLink;		}		return result;	}	  	public void DataRetrieved(DeviceOutput output)   	{   		Object data = output.GetDataOfType(DeviceOutput.COMMAND);				if (data != null  && TrackerController.kMobileCmd.equals(data))		{			UpdateControls();		}	}		public void ViewPagedOut()	{		if (NeuroSynchUtil.GetImageGuided())		{			fTrackerController.RemoveListener(this);		}		}		public void ViewPagedIn()	{		if (NeuroSynchUtil.GetImageGuided())		{			fTrackerController.AddTrackerListener(this, 0, false, DeviceOutput.ALL_STATIONS);		}		}		public void SetData(PatientData data)	{		super.SetData(data);//		fData.AddListener(this);		fCurrentTransformSelect.SetData(data);		fSpaceLinkSelector.SetCoRegistrations(data.GetCoRegistrations());	}		private void UpdateEnabledCheckButton()	{		TransformationTypeModel model = GetTransformationType();				if (model != null)		{			fEnabledCheck.setSelected(model.GetEnabled());		}	}				private void SetCurrentTransformChildPanel(int pointsDerivation)	{		switch (pointsDerivation)		{			case TransformationTypeModel.k3PointsDerived :				if (f3PointTransforms == null)				{					f3PointTransforms = new Transforms3PointDisplay(fTrackerController);										if (fData != null)					{						f3PointTransforms.SetData(fData);					}				}								SetCurrentTransformChildPanel(f3PointTransforms);				break;						case TransformationTypeModel.k4PointsDerived :				if (f4PointTransforms == null)				{					f4PointTransforms = new Transforms4PointDisplay(fTrackerController);										if (fData != null)					{						f4PointTransforms.SetData(fData);					}				}								SetCurrentTransformChildPanel(f4PointTransforms);				break;						case TransformationTypeModel.kCustomPointsDerived :			default:				if (fPntSelectTransforms == null)				{					fPntSelectTransforms = new TransformsPntSelectDisplay(fTrackerController);										if (fData != null)					{						fPntSelectTransforms.SetData(fData);					}				}				SetCurrentTransformChildPanel(fPntSelectTransforms);				break;	 	}	}		private void SetCurrentTransformChildPanel(TransformsSelectDisplay newDisplay)	{		if (fCurrentTransformSelect != null)		{			fTransformsPanel.remove(fCurrentTransformSelect);		}				fCurrentTransformSelect = newDisplay;		fTransformsPanel.add(fCurrentTransformSelect);		fCurrentTransformSelect.UpdateSpaces(GetCurrentSpaceLink());		fCurrentTransformSelect.UpdateControls();		revalidate();	}		private void UpdateMobileCheckButton()	{		if (NeuroSynchUtil.GetImageGuided())		{			SpaceLink spaceLink = GetCurrentSpaceLink();						if ((spaceLink == null) || spaceLink.GetSpace1().IsType(SingleSpaceID.kLocalizerType) || 							spaceLink.GetSpace2().IsType(SingleSpaceID.kLocalizerType))			{				fMobileCheck.setVisible(true);				fMobileCheck.setEnabled(fTrackerController.IsCommandEnabled(TrackerController.kMobileCmd));				fMobileCheck.setSelected(fTrackerController.IsCommandChecked(TrackerController.kMobileCmd));			}			else			{				fMobileCheck.setVisible(false);			}		}	}		public void actionPerformed(ActionEvent e)	{		if (e.getActionCommand().equals(TrackerController.kMobileCmd) && NeuroSynchUtil.GetImageGuided())		{			fTrackerController.actionPerformed(e);		}		else if (e.getActionCommand().equals(k3PointsSelectString))		{			SetCurrentTransformChildPanel(TransformationTypeModel.k3PointsDerived);		}		else if (e.getActionCommand().equals(k4PointsSelectString))		{			SetCurrentTransformChildPanel(TransformationTypeModel.k4PointsDerived);					}		else if (e.getActionCommand().equals(kSelectPointsString))		{			SetCurrentTransformChildPanel(TransformationTypeModel.kCustomPointsDerived);					}		else if (e.getActionCommand().equals(kEnableString))		{			TransformationTypeModel model = GetTransformationType();			if (model != null)			{				model.SetEnabled(fEnabledCheck.isSelected());			}			else			{				NeuroSynchUtil.ErrorMessage("TransformationsDisplay.actionPerformed GetTransformationType returns null");			}					}	}		public void UpdateControls()	{			fSpaceLinkSelector.SetSelectedSpaceLink(GetSelectedSpaceLink());				TransformationTypeModel	transformType = GetTransformationType();				SetCurrentTransformChildPanel(transformType != null ? transformType.GetSelectedPointsDerivation() :					TransformationTypeModel.kCustomPointsDerived);				fCurrentTransformSelect.UpdateControls();		UpdateMobileCheckButton();				UpdateEnabledCheckButton();				revalidate();	}		class TransformationsDisplaySpaceLinkListener implements SpaceLinkSelector.SpaceLinkSelectorListener	{		TransformationsDisplaySpaceLinkListener()		{				}				public void SpaceLinkSelected(SpaceLink spaceLink, boolean selected)		{			if (selected && fCurrentTransformSelect != null)			{				fCurrentTransformSelect.UpdateSpaces(spaceLink);				fCurrentTransformSelect.UpdateControls();				UpdateEnabledCheckButton();				revalidate();			}		}	}	/*	public void DataModelChanged(DataModel model, DataChangedEvent event)	{		if (event.getSource() != this && getParent() != null)		{			UpdateControls();			revalidate();		}	}*/}