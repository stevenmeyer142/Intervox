package com.brazedblue.intervox.display;import java.awt.event.*;import java.util.*;import java.awt.*;import javax.swing.*;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.image.SingleSpaceID;import com.brazedblue.intervox.registration.*;public class Transforms4PointDisplay extends TransformsSelectDisplay implements ActionListener {		TrackerController 				fTrackerController; 	Vector 							fButtons = new Vector();	Vector 							fTransformations = null;//	SingleSpaceID					fFromSpace = SingleSpaceID.GetRealSpaceID();;//	SingleSpaceID					fToSpace = SingleSpaceID.GetDefaultVirtualSpaceID();     public Transforms4PointDisplay(TrackerController trackerController) 	{		super(TransformationTypeModel.k4PointsDerived);		fTrackerController = trackerController;    }	/*	public CoRegistrationsAccess GetCoRegistrations()	{		return (fData != null) ? fData.GetCoRegistrations() : null;	} */	/*	private TransformerAccess GetTransformerAccess()	{		return (fData != null) ? fData.GetCoRegistrations().GetTransformerAccess() : null;	}		private RegistrationsAccess GetRegistrationsAccess()	{		return (fData != null) ? fData.GetCoRegistrations().GetRegistrationsAccess(fFromSpace, fToSpace) : null;	} */	public void UpdateControls()	{//		Vector selectedLabels = new Vector();//		GetSelectedLabels(fButtons, fTransformations, selectedLabels);				for (int i = 0; i < fButtons.size(); i++)		{			AbstractButton button = (AbstractButton)fButtons.elementAt(i);			Container parent = button.getParent();			if (parent != null)			{				parent.remove(button);			}			button.removeActionListener(this);		}		fButtons.removeAllElements();	//		CoRegistrationsAccess coRegistrations = GetCoRegistrations();				TransformerAccess transformer = GetTransformerAccess();//		transformer.InstallTransformation(null, fFromSpace, fToSpace);			RegistrationsAccess registrationAccess = GetRegistrationsAccess();		RegistrationConst[] registrations = registrationAccess.GetRegistrationElements();				if (registrations.length >= 4)		{			fTransformations = TransformationMatrix.GenerateAllRegistrationSetsOf4(registrations, transformer.IsUsingReference());			ButtonGroup group = new ButtonGroup();						for (int i = 0; i < fTransformations.size() && i < 20; i++)			{				TransformationMatrix transform = (TransformationMatrix)fTransformations.elementAt(i);				String label = transform.GetName();				float accuracy = transform.GetAccuracy();								String accuracyStr = Float.toString(accuracy);								if (accuracyStr.length() > 4)				{					accuracyStr = accuracyStr.substring(0, 4);	//	limit to 4 significant digits				}								AbstractButton button =  new JRadioButton("Points: " + label + TransformationsDisplay.kAccuracyStartString + accuracyStr + TransformationsDisplay.kAccuracyEndString); 				fButtons.addElement(button);				group.add(button);				add(button);								button.addActionListener(this);			}						int firstSelection = SetSelectedLabels(fButtons, fTransformations);			firstSelection = (firstSelection < 0) ? 0 : firstSelection;						AbstractButton selectedBtn = (AbstractButton)fButtons.elementAt(firstSelection);			selectedBtn.setSelected(true);			TransformationMatrix transform = (TransformationMatrix)fTransformations.elementAt(firstSelection);			InstallTransformation(transform);					fTrackerController.EnableItems();		}				invalidate();			}/*	private void UpdateSpaces()	{		if (fData != null)		{			SpaceLink spaceLink = fData.GetCoRegistrations().GetSelectedSpaceLink();			fToSpace = spaceLink.GetSpace1();			fFromSpace = spaceLink.GetSpace2();		}		} */		public void actionPerformed(ActionEvent e)	{		Object button = e.getSource();		int index = fButtons.indexOf(button);				if (index >= 0)		{			TransformationMatrix matrix = (TransformationMatrix)fTransformations.elementAt(index);						InstallTransformation(matrix);				}	}  }