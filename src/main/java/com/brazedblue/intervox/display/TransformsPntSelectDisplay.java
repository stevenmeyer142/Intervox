package com.brazedblue.intervox.display;import java.awt.event.*;import java.util.*;import java.awt.*;import javax.swing.*;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.util.NeuroSynchUtil;import com.brazedblue.intervox.image.SingleSpaceID;import com.brazedblue.intervox.registration.*;public class TransformsPntSelectDisplay extends TransformsSelectDisplay implements ActionListener, DataModelListener {  	TrackerController 				fTrackerController; 	Vector 							fButtons = new Vector();	RegistrationConst[]				fRegistrations = null;//	SingleSpaceID					fFromSpace = SingleSpaceID.GetRealSpaceID();//	SingleSpaceID					fToSpace = SingleSpaceID.GetDefaultVirtualSpaceID();	FiducialSetsAccess				fFiducials = null;		static private final int 		kMinPoints = 3;    public TransformsPntSelectDisplay(TrackerController trackerController) 	{		super(TransformationTypeModel.kCustomPointsDerived);		fTrackerController = trackerController;    }	public void SetData(PatientData data)	{		super.SetData(data);		fFiducials = data.GetFiducialSetsAccess(fToSpace);		fFiducials.GetDataModel().AddListener(this);		SynchButtonsWithData();	}		public void actionPerformed(ActionEvent e)	{		Object button = e.getSource();		int index = fButtons.indexOf(button);				if (index >= 0)		{			SetTransformation(true);		}	}	public void DataModelChanged(DataModel model, DataChangedEvent event)	{		if (event.getSource() == fFiducials.GetDataModel())		{			SynchButtonsWithData();			revalidate();		}	}		private void SynchButtonsWithData()	{		Vector selectedLabels = new Vector();//		GetSelectedLabels(selectedLabels);				for (int i = 0; i < fButtons.size(); i++)		{			AbstractButton button = (AbstractButton)fButtons.elementAt(i);			Container parent = button.getParent();			if (parent != null)			{				parent.remove(button);			}			button.removeActionListener(this);		}		fButtons.removeAllElements();			TransformerAccess transformer = GetTransformerAccess();		transformer.InstallTransformation(null, fFromSpace, fToSpace);			RegistrationsAccess registrationAccess = GetRegistrationsAccess();		fRegistrations = registrationAccess.GetRegistrationElements();						if (fRegistrations.length >= kMinPoints)		{						for (int i = 0; i < fRegistrations.length; i++)			{				String label = fRegistrations[i].GetName();								AbstractButton button =  new JCheckBox(label); 				fButtons.addElement(button);				add(button);								button.setSelected(true);				button.addActionListener(this);			}						SetSelectedLabels();		}					}/*	private void UpdateSpaces()	{		if (fData != null)		{			SpaceLink spaceLink = fData.GetCoRegistrations().GetSelectedSpaceLink();			fToSpace = spaceLink.GetSpace1();			fFromSpace = spaceLink.GetSpace2();		}		}*/	public void UpdateControls()	{		SynchButtonsWithData();		SetTransformation(false);		repaint();	}		private void SetTransformation(boolean showDialog)	{		int numOfSelectedButtons = 0;		for (int i = 0; i < fButtons.size(); i++)		{			AbstractButton button = (AbstractButton)fButtons.elementAt(i);						if (button.isSelected())			{				numOfSelectedButtons++;			}		}				if (numOfSelectedButtons >= kMinPoints)		{			String[] labels = new String[numOfSelectedButtons];			RegistrationConst[] selectedRegistrations = new RegistrationConst[numOfSelectedButtons];			int index = 0;			for (int i = 0; i < fButtons.size(); i++)			{				AbstractButton button = (AbstractButton)fButtons.elementAt(i);								if (button.isSelected())				{					selectedRegistrations[index] = fRegistrations[i];					labels[index] = fRegistrations[i].GetName();					index++;				}			}						try			{				TransformerAccess transformer = GetTransformerAccess();				TransformationMatrix newMatrix = new TransformationMatrix(selectedRegistrations, transformer.IsUsingReference());				transformer.InstallTransformation(newMatrix, fFromSpace, fToSpace/*, this.getParent() */);								TransformationTypeModel transformType = GetTransformerType();								if (transformType != null)				{					transformType.SetSelectedPointsDerivation(TransformationTypeModel.kCustomPointsDerived);					transformType.SetLabelList(TransformationTypeModel.kCustomPointsDerived, labels);				}								if (NeuroSynchUtil.GetImageGuided())				{					fTrackerController.EnableItems();				}								SetPointErrors(newMatrix);			}			catch (ComputationException e)			{				NeuroSynchUtil.ErrorMessage("Couldn't compute transformation: " + e.getMessage(), NeuroSynchUtil.kShowDlog);			}		}		else if (showDialog)		{			NeuroSynchUtil.ErrorMessage("At least 3 Points must be selected", NeuroSynchUtil.kShowDlog);		}	}		private void SetPointErrors(TransformationMatrix newMatrix)										throws ComputationException	{		RegistrationTransformer regTransformer = new RegistrationTransformer(newMatrix, fToSpace.GetUnit(), Unit.MILLIMETER);		for (int i = 0; i < fRegistrations.length; i++)		{			float distance = regTransformer.GetDistance(fRegistrations[i]);						if (distance < .0001)	// generalize for units later			{				distance = 0;			}									AbstractButton button = (AbstractButton)fButtons.elementAt(i);			String label = button.getText();						int replaceStart = label.lastIndexOf(TransformationsDisplay.kAccuracyStartString);						if (replaceStart == -1)			{				replaceStart = label.length();			}						label = label.substring(0, replaceStart) + TransformationsDisplay.kAccuracyStartString + 					NeuroSynchUtil.GetDecimalString(distance, 2) + TransformationsDisplay.kAccuracyEndString;								button.setText(label);		}	} /*	public CoRegistrationsAccess GetCoRegistrations()	{		return (fData != null) ? fData.GetCoRegistrations() : null;	} *//*		private TransformerAccess GetTransformerAccess()	{		return (fData != null) ? fData.GetCoRegistrations().GetTransformerAccess() : null;	}		private RegistrationsAccess GetRegistrationsAccess()	{		return (fData != null) ? fData.GetCoRegistrations().GetRegistrationsAccess(fFromSpace, fToSpace) : null;	} *//* 	private void GetSelectedLabels(Vector selectedLabels)	{		int size = fButtons.size();				for (int i = 0; i < size; i++)		{			AbstractButton btn = (AbstractButton)fButtons.elementAt(i);						if (btn.isSelected())			{				String label = fRegistrations[i].GetName();				selectedLabels.addElement(label);			}		}	}*/	 	 	// returns first selected index	private void  SetSelectedLabels()	{		TransformationTypeModel transformType = GetTransformerType();		String[] selections = null;		if (transformType != null)		{			selections = transformType.GetLabelList(fPointsDerivation);		}				int size = fButtons.size();				int numOfSelections = 0;		for (int i = 0; i < size; i++)		{			String label = fRegistrations[i].GetName();						AbstractButton btn = (AbstractButton)fButtons.elementAt(i);						boolean select = (selections == null) || (NeuroSynchUtil.StrArrayContainsString(selections, label));			if (select)			{				btn.setSelected(true);				numOfSelections++;			}			else			{				btn.setSelected(false);			}		}				if (numOfSelections < kMinPoints)		{			for (int i = 0; i < size; i++)			{				AbstractButton btn = (AbstractButton)fButtons.elementAt(i);				btn.setSelected(true);			}		}	} }