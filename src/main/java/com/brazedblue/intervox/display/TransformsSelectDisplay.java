package com.brazedblue.intervox.display;import com.brazedblue.intervox.geometry.TransformationMatrix;import com.brazedblue.intervox.image.SingleSpaceID;import com.brazedblue.intervox.registration.*;import com.brazedblue.intervox.util.NeuroSynchUtil;import java.util.Vector;import javax.swing.*;public class TransformsSelectDisplay extends ControlsDisplay {  protected SingleSpaceID fFromSpace = SingleSpaceID.GetRealSpaceID();  protected SingleSpaceID fToSpace = SingleSpaceID.GetDefaultVirtualSpaceID();  protected int fPointsDerivation;  public TransformsSelectDisplay(int pointsDerivation) {    fPointsDerivation = pointsDerivation;  }  protected void InstallTransformation(TransformationMatrix matrix) {    TransformerAccess transformer = GetTransformerAccess();    transformer.InstallTransformation(matrix, fFromSpace, fToSpace /*, this.getParent() */);    TransformationTypeModel transformType = GetTransformerType();    if (transformType != null) {      String[] label = new String[1];      label[0] = matrix.GetName();      transformType.SetSelectedPointsDerivation(fPointsDerivation);      transformType.SetLabelList(fPointsDerivation, label);    }  }  protected int SetSelectedLabels(Vector buttons, Vector transforms) {    int result = -1;    int size = buttons.size();    TransformationTypeModel transformType = GetTransformerType();    String[] labels = transformType != null ? transformType.GetLabelList(fPointsDerivation) : null;    if (labels != null) {      for (int i = 0; i < size; i++) {        TransformationMatrix transform = (TransformationMatrix) transforms.elementAt(i);        String label = transform.GetName();        if (NeuroSynchUtil.StrArrayContainsString(labels, label)) {          AbstractButton btn = (AbstractButton) buttons.elementAt(i);          btn.setSelected(true);          if (result < 0) {            result = i;          }        }      }    } else if (size > 0) {      AbstractButton btn = (AbstractButton) buttons.elementAt(0);      btn.setSelected(true);      result = 0;    }    return result;  }  protected TransformationTypeModel GetTransformerType() {    TransformerAccess transformer = GetTransformerAccess();    return (transformer != null) ? transformer.GetTransformationType(fFromSpace, fToSpace) : null;  }  protected void UpdateSpaces(SpaceLink spaceLink) {    fToSpace = spaceLink.GetSpace1();    fFromSpace = spaceLink.GetSpace2();  }  protected TransformerAccess GetTransformerAccess() {    return (fData != null) ? fData.GetCoRegistrations().GetTransformerAccess() : null;  }  protected RegistrationsAccess GetRegistrationsAccess() {    return (fData != null)        ? fData.GetCoRegistrations().GetRegistrationsAccess(fFromSpace, fToSpace)        : null;  }  /*  	protected void GetSelectedLabels(Vector buttons, Vector transforms, Vector selectedLabels)  	{  		int size = buttons.size();  		for (int i = 0; i < size; i++)  		{  			AbstractButton btn = (AbstractButton)buttons.elementAt(i);  			if (btn.isSelected())  			{  				TransformationMatrix transform = (TransformationMatrix)transforms.elementAt(i);  				String label = transform.GetName();  				selectedLabels.addElement(label);  			}  		}  	}  */}