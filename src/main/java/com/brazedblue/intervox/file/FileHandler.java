package com.brazedblue.intervox.file;import java.awt.*;import java.io.*;import javax.swing.JFileChooser;import javax.swing.filechooser.FileFilter;public class FileHandler  /* implements anInterface */ {   	static final String			kCurrentVersion = "Version 1";	static final int			kHeaderSize = 124;	//	+ 4 bytes for writeInt(kHeaderSize)		static final int 			SAVE = FileDialog.SAVE;	static final int 			OPEN = FileDialog.LOAD;			static private final String kEllipsisString = "...";	   	public FileHandler() 	{    }				public static File GetFile(Frame parent, String prompt, FilenameFilter filter)	{		FileDialog dlog = ShowDialog(parent, prompt, filter, OPEN);				String directory = dlog.getDirectory();		String file = dlog.getFile();		File result = null;		if (directory != null && file != null) 		{			result = new File(directory, file);		}		return result; 		/*		JFileChooser dlog = ShowDialog(parent, prompt, null, OPEN);		return dlog != null ? dlog.getSelectedFile() : null; */	}	public static File GetDirectory(Frame parent, String prompt, FilenameFilter filter)	{		FileDialog dlog = ShowDialog(parent, prompt, filter, OPEN);				String directory = dlog.getDirectory();		File result = null;		if (directory != null) 		{			result = new File(directory);		}		return result; 		/*		JFileChooser dlog = ShowDialog(parent, prompt, null, OPEN);		return dlog != null ? dlog.getCurrentDirectory() : null; */	}  		static public String ShrinkPathName(String pathName, int numOfCharacters)	{		String result = pathName;		int length = pathName.length();						if (length > numOfCharacters)		{			int fileNameStart = pathName.lastIndexOf(File.separatorChar);						if (fileNameStart > 0)				{				if ((length - (fileNameStart + kEllipsisString.length())) < numOfCharacters)				{					result = kEllipsisString + pathName.substring(length - fileNameStart);										result = pathName.substring(0, numOfCharacters - kEllipsisString.length()) + result;				}								else				{					result = kEllipsisString + pathName.substring(length - numOfCharacters + kEllipsisString.length());							}			}			else				{				result = pathName;			}		}				return result;	}  	private static FileDialog ShowDialog(Frame parent, String prompt, FilenameFilter filter,					int mode)	{		FileDialog dlog = new FileDialog(parent, prompt, mode);		dlog.setFile("");				if (filter != null)		{			dlog.setFilenameFilter(filter);		}				dlog.setVisible(true);				return dlog;/*		File result = null;						JFileChooser dlog = new JFileChooser();		dlog.setDialogType(mode);		dlog.setDialogTitle(prompt);		if (filter != null)		{			dlog.setFileFilter(new FileHandlerFilter(filter));		}		int returnVal = JFileChooser.CANCEL_OPTION;		if (mode == SAVE)		{			returnVal = dlog.showSaveDialog(parent);		}		else		{			returnVal = dlog.showOpenDialog(parent);		}				if (returnVal == JFileChooser.APPROVE_OPTION)		{			result = dlog.getSelectedFile();		}				return (returnVal == JFileChooser.APPROVE_OPTION) ? dlog : null;				*/	}		public static File GetSaveFile(Frame parent, String prompt)	{		FileDialog dlog = ShowDialog(parent, prompt, null, SAVE);		String directory = dlog.getDirectory();		String file = dlog.getFile();		File result = null;		if (directory != null && file != null) 		{			result = new File(directory, file);		} 				return result;/*		JFileChooser dlog = ShowDialog(parent, prompt, null, SAVE);		return dlog != null ? dlog.getSelectedFile() : null; */	}		static public void WriteVersion(DataOutputStream out) throws IOException	{		out.writeInt(kHeaderSize);		byte[] bArray = kCurrentVersion.getBytes();		out.write(bArray);		byte[] emptyArray = new byte[kHeaderSize - bArray.length];		emptyArray[0] = 0;	// version string terminator		out.write(emptyArray);	}	static public void ReadVersion(DataInputStream in) throws IOException	{		int headerSize = in.readInt();		in.skip(headerSize);	}		static class FileHandlerFilter extends FileFilter	{		private FilenameFilter fFilter;				FileHandlerFilter(FilenameFilter filter)		{			fFilter = filter;		}		public boolean accept(File f)		{			return fFilter.accept(f, f.getName());		}		public String getDescription()		{			return "";		}	}}