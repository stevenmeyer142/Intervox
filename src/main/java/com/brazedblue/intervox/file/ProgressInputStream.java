package com.brazedblue.intervox.file;import java.io.*;import java.awt.Component;import javax.swing.*;import com.brazedblue.intervox.display.ProgressBroadcaster;import com.brazedblue.intervox.display.ProgressCancelledException;import com.brazedblue.intervox.util.NeuroSynchUtil;public class ProgressInputStream extends FilterInputStream {    private int 				fNumRead = 0;    private int 				fSize = 0;    private ProgressBroadcaster fBroadcaster;	private float 				fProgressFactor = 1;	// for efficiency, don't want to make 1million updates for megabyte file	private int 				fLastValue;	    public ProgressInputStream(String message, InputStream in, ProgressBroadcaster broadcaster) {        super(in);        fBroadcaster = broadcaster;				try 		{ 			fSize = in.available(); 		}        catch(IOException ioe) 		{ 			fSize = 0; 		}				if (fSize > 100)		{			fProgressFactor =  100.0f / fSize;		}		fBroadcaster.Start(message, 0, (int)((fSize - 1) * fProgressFactor));		fLastValue = 0;    }	private void SetProgress()throws IOException	{		int newValue = (int)(fNumRead * fProgressFactor);				if (fLastValue != newValue)		{			fLastValue = newValue;						try			{				fBroadcaster.UpdateCurrentValue("", fLastValue);			}			catch (ProgressCancelledException e)			{				throw new IOException("User cancelled");			}						NeuroSynchUtil.MyYield();		}	}    public int read() throws IOException {        int ch = in.read();         if (ch >= 0)		{ 			fNumRead++;			SetProgress();        }/*		if (fBroadcaster.isCanceled()) 		{            InterruptedIOException x = new InterruptedIOException("progress");            x.bytesTransferred = fNumRead;            throw x;        } */        		return ch;    }    public int read(byte b[]) throws IOException {        int numRead = in.read(b);		        if (numRead > 0) 		{				fNumRead += numRead;			SetProgress();		}/*        if (fBroadcaster.isCanceled()) 		{            InterruptedIOException x = new InterruptedIOException("progress");            x.bytesTransferred = fNumRead;            throw x;        } */        		return numRead;    }    public int read(byte b[],                  int off,                  int len) throws IOException {        int numRead = in.read(b, off, len);        		if (numRead > 0) 		{				fNumRead += numRead;			SetProgress();		}/*       if (fBroadcaster.isCanceled()) {            InterruptedIOException x = new InterruptedIOException("progress");            x.bytesTransferred = nread;            throw x;        } */        		return numRead;    }    public long skip(long n) throws IOException {        long numRead = in.skip(n);        		if (numRead > 0) 		{				fNumRead += numRead;			SetProgress();		}       			return numRead;    }    public void close() throws IOException {        in.close(); //       fBroadcaster.Finished();    }    public synchronized void reset() throws IOException {        in.reset();        		fNumRead = fSize - in.available();        		SetProgress();    }}