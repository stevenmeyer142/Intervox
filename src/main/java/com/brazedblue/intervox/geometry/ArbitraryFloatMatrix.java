package com.brazedblue.intervox.geometry;import com.brazedblue.intervox.util.Debug;import com.brazedblue.intervox.util.NeuroSynchUtil;public class ArbitraryFloatMatrix {  // change fValues to double[][] array to simplify SVD computation, lose GetDouble2DArray  // SetDouble2DArray  private double[] fValues;  private int fRows = 0;  private int fColumns = 0;  private static final boolean fRangeCheck = true;  public ArbitraryFloatMatrix(int rows, int columns) {    if (rows > 0 && columns > 0) {      fValues = new double[rows * columns];      fRows = rows;      fColumns = columns;    } else {      NeuroSynchUtil.ErrorMessage(          "Illegal args, ArbitraryFloatMatrix.ArbitraryFloatMatrix", NeuroSynchUtil.kNoDlog);    }  }  public ArbitraryFloatMatrix(ArbitraryFloatMatrix otherMatrix) {    this(otherMatrix.NumOfRows(), otherMatrix.NumOfColumns());    Set(otherMatrix);  }  public double Get(int row, int column) {    if (!fRangeCheck || (row > 0 && row <= fRows && column > 0 && column <= fColumns)) {      //			return fValues[(row - 1) * fColumns + column];      return fValues[(column - 1) * fRows + row - 1];    } else {      NeuroSynchUtil.ErrorMessage("Illegal args, ArbitraryFloatMatrix.Get", NeuroSynchUtil.kNoDlog);      return 0;    }  }  public synchronized void Set(ArbitraryFloatMatrix otherMatrix) {    int numOfRows = otherMatrix.NumOfRows();    int numOfColumns = otherMatrix.NumOfColumns();    if (fColumns != numOfColumns || fRows != numOfRows) {      fColumns = numOfColumns;      fRows = numOfRows;      fValues = new double[fColumns * fRows];    }    for (int row = 1; row <= numOfRows; row++) {      for (int col = 1; col <= numOfColumns; col++) {        Set(row, col, otherMatrix.Get(row, col));      }    }  }  public synchronized void Set(Matrix3 otherMatrix) {    if (fColumns != 3 || fRows != 3) {      fColumns = 3;      fRows = 3;      fValues = new double[fColumns * fRows];    }    for (int row = 1; row <= 3; row++) {      for (int col = 1; col <= 3; col++) {        Set(row, col, otherMatrix.getElement(row - 1, col - 1));      }    }  }  public float Determinant() {    //	I'm not going to mess with the general case    float result = 1;    if (fRows == 3 && fColumns == 3) {      Matrix3 matrix = new Matrix3();      matrix.Set(this);      result = matrix.determinant();    } else {      NeuroSynchUtil.ErrorMessage(          "Can't calc determinant ArbitraryFloatMatrix.Determinant", NeuroSynchUtil.kNoDlog);      Get(fRows + 1, fColumns + 1); // 	this will cause runtime exception    }    return result;  }  public void Set(int row, int column, double value) {    if (!fRangeCheck || (row > 0 && row <= fRows && column > 0 && column <= fColumns)) {      //			fValues[(row - 1) * fColumns + column] = value;      fValues[(column - 1) * fRows + row - 1] = value;    } else {      NeuroSynchUtil.ErrorMessage("Illegal args, ArbitraryFloatMatrix.Set", NeuroSynchUtil.kNoDlog);    }  }  public void SetIdentity() {    for (int column = 0; column < fColumns; column++) {      for (int row = 0; row < fRows; row++) {        fValues[column * fRows + row] = (row == column) ? 1 : 0;      }    }  }  private void Multiply(      double[] otherValues,      int otherRows,      int otherCols,      double[] resultValues,      int resultRows,      int resultCols) {    for (int otherCol = 0; otherCol < otherCols; otherCol++) {      for (int myRow = 0; myRow < this.fRows; myRow++) {        int resultIndex = myRow + otherCol * resultRows;        int myIndex = myRow;        int otherIndex = otherCol * otherRows;        resultValues[resultIndex] = 0;        for (int i = 0; i < this.fColumns; i++) {          resultValues[resultIndex] += otherValues[otherIndex] * fValues[myIndex];          myIndex += fRows;          otherIndex++;        }      }    }  }  public synchronized void Multiply(ArbitraryFloatMatrix otherMatrix) {    if (otherMatrix.fRows == this.fColumns) {      int resultColumns = otherMatrix.fColumns;      int resultRows = this.fRows;      double[] resultValues = new double[resultColumns * resultRows];      Multiply(          otherMatrix.fValues,          otherMatrix.fRows,          otherMatrix.fColumns,          resultValues,          resultRows,          resultColumns);      fValues = resultValues;      fRows = resultRows;      fColumns = resultColumns;    }  }  public void Multiply(ArbitraryFloatMatrix otherMatrix, ArbitraryFloatMatrix result) {    if (otherMatrix.fRows == this.fColumns        && result.fRows == this.fRows        && result.fColumns == otherMatrix.fColumns) {      double[] resultValues = result.fValues;      if (result == otherMatrix || result == this) // create new array for results      {        resultValues = new double[result.fValues.length];      }      Multiply(          otherMatrix.fValues,          otherMatrix.fRows,          otherMatrix.fColumns,          resultValues,          result.fRows,          result.fColumns);      result.fValues = resultValues;    } else {      NeuroSynchUtil.ErrorMessage(          "Illegal args, ArbitraryFloatMatrix.Multiply", NeuroSynchUtil.kNoDlog);    }  }  public int NumOfRows() {    return fRows;  }  public int NumOfColumns() {    return fColumns;  }  public void Transpose() {    double[] newValues = new double[fValues.length];    for (int column = 0; column < fColumns; column++) {      for (int row = 0; row < fRows; row++) {        //				newValues[column * fRows + row] = fValues[row * fColumns + column];        newValues[row * fColumns + column] = fValues[column * fRows + row];      }    }    int rows = fColumns;    fColumns = fRows;    fRows = rows;    fValues = newValues;  }  /*	public void GetSVD(ArbitraryFloatMatrix uMatrix, ArbitraryFloatMatrix sMatrix, ArbitraryFloatMatrix vTransposeMatrix)  	{  		if (fRows == uMatrix.fRows && fRows == uMatrix.fColumns && sMatrix.fRows == fRows &&  							fColumns == vTransposeMatrix.fColumns && fColumns == vTransposeMatrix.fRows)  		{  //			final int kOffset = 0;	//	offset in array is always zero  //			int lWork = Math.max(3 * Math.min(fRows, fColumns) + Math.max(fRows, fColumns),5 * Math.min(fRows, fColumns) - 4);  //			intW info = new intW(0);                          double[] work = new double[lWork];  //			Dgesvd.dgesvd("A", "A", fRows, fColumns, fValues, kOffset, fRows, sMatrix.fValues, kOffset, uMatrix.fValues, kOffset, uMatrix.fRows,  //						vTransposeMatrix.fValues, kOffset, vTransposeMatrix.fRows, work, kOffset, lWork, info);                  }  		else  		{  			NeuroSynchUtil.ErrorMessage("Illegal args, ArbitraryFloatMatrix.GetSVD", NeuroSynchUtil.kNoDlog);  		}  	}*/  private static void GetSVD(      ArbitraryFloatMatrix argMatrix,      ArbitraryFloatMatrix uMatrix,      ArbitraryFloatMatrix sMatrix,      ArbitraryFloatMatrix vTransposeMatrix) {    Jama.Matrix arg = argMatrix.GetJamaMatrix();    Jama.SingularValueDecomposition svd = new Jama.SingularValueDecomposition(arg);    uMatrix.SetJamaMatrix(svd.getU());    sMatrix.SetJamaMatrix(svd.getS());    vTransposeMatrix.SetJamaMatrix(svd.getV());    if (true) // 10/12/05  old version of jama didn't transpose    {      vTransposeMatrix.Transpose();    }  }  public void GetSVD(      ArbitraryFloatMatrix uMatrix,      ArbitraryFloatMatrix sMatrix,      ArbitraryFloatMatrix vTransposeMatrix) {    GetSVD(this, uMatrix, sMatrix, vTransposeMatrix);  }  public synchronized Jama.Matrix GetJamaMatrix() {    return new Jama.Matrix(fValues, fRows);  }  public synchronized void SetJamaMatrix(Jama.Matrix matrix) {    fValues = matrix.getColumnPackedCopy();    fRows = matrix.getRowDimension();    fColumns = matrix.getColumnDimension();  }  public void DebugDump(String message) {    if (Debug.fgDebugging) {      final int kColWidth = 10;      if (message != null) {        System.out.println(message);      }      for (int row = 1; row <= fRows; row++) {        for (int col = 1; col <= fColumns; col++) {          Debug.WriteDouble(Get(row, col), kColWidth);        }        System.out.println("");      }      System.out.println("");    }  }}