package com.brazedblue.intervox.geometry;import com.brazedblue.intervox.util.*;import java.awt.Point;import java.util.*;public class EdgePointEnumeration implements Enumeration {  private Enumeration fEdgePointsEnum;  private Enumeration fListOfEdgePointsEnum;  int fLastX;  int fLastY;  int fNextX;  int fNextY;  public EdgePointEnumeration(Vector edgePoints) {    fEdgePointsEnum = new EmptyEnumerator();    fListOfEdgePointsEnum = edgePoints != null ? edgePoints.elements() : new EmptyEnumerator();  }  public boolean hasMoreElements() {    return fEdgePointsEnum.hasMoreElements() || fListOfEdgePointsEnum.hasMoreElements();  }  public Object nextElement() {    while (!fEdgePointsEnum.hasMoreElements() && fListOfEdgePointsEnum.hasMoreElements()) {      Vector edgePoints = (Vector) fListOfEdgePointsEnum.nextElement();      fEdgePointsEnum = edgePoints.elements();    }    return fEdgePointsEnum.nextElement();  }  public Point GetNextPoint(Point pt) {    if (pt == null) {      pt = new Point();    }    boolean incrementPt = true;    if (pt.x == fNextX && pt.y == fNextY) {      if (!fEdgePointsEnum.hasMoreElements()) // 	this should work because at least 2 points in line      {        Point point = (Point) nextElement();        fLastX = point.x;        fLastY = point.y;        point = (Point) nextElement();        fNextX = point.x;        fNextY = point.y;        incrementPt = false;        pt.x = point.x;        pt.y = point.y;      } else {        fLastX = fNextX;        fLastY = fNextY;        Point point = (Point) nextElement();        fNextX = point.x;        fNextY = point.y;      }    }    if (incrementPt) {      int deltaX = fNextX - fLastX;      int deltaY = fNextY - fLastY;      if (deltaY == 0) {        pt.x += (deltaX > 0) ? 1 : -1;      } else if (deltaX == 0) {        pt.y += (deltaY > 0) ? 1 : -1;      } else {        if (Math.abs(deltaX) == Math.abs(deltaY)) {          pt.x += (deltaX > 0) ? 1 : -1;          pt.y += (deltaY > 0) ? 1 : -1;        } else if (Math.abs(deltaX) > Math.abs(deltaY)) {          pt.x += (deltaX > 0) ? 1 : -1;          pt.y = fLastY + Math.round((pt.x - fLastX) * (float) deltaY / (float) deltaX);        } else // (Math.abs(deltaX) < Math.abs(deltaY))        {          pt.y += (deltaY > 0) ? 1 : -1;          pt.x = fLastX + Math.round((pt.y - fLastY) * (float) deltaX / (float) deltaY);        }      }    }    if (Debug.fgDebugging        && (NeuroSynchUtil.GetDistanceBetweenPts(fLastX, fLastY, pt.x, pt.y)            > NeuroSynchUtil.GetDistanceBetweenPts(fLastX, fLastY, fNextX, fNextY))) {      System.out.println("Problemo EdgePointEnumeration.GetNextPoint(pt)");      pt.x = fNextX;      pt.y = fNextY;    }    return pt;  }}