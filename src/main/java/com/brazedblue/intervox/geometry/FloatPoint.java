package com.brazedblue.intervox.geometry;import com.brazedblue.intervox.util.*;import javax.vecmath.*;public class FloatPoint extends Point3f implements java.io.Serializable, Location3D {  //	 float[] fCoords;  public static final int X = X_AXIS;  public static final int Y = X + 1;  public static final int Z = Y + 1;  public static final FloatPoint kZero = new FloatPoint(0, 0, 0);  static final long serialVersionUID = 3837154880514826158L;  public FloatPoint(float x, float y, float z) {    super(x, y, z);  }  public FloatPoint() {    super(0, 0, 0);  }  public FloatPoint(Location3D pt) {    super(pt.GetFloat(X), pt.GetFloat(Y), pt.GetFloat(Z));  }  public boolean Equals(Location3D other) {    boolean result = true;    for (int i = Location3D.X_AXIS; i <= Location3D.Z_AXIS; i++) {      if (this.GetFloat(i) != other.GetFloat(i)) {        result = false;        break;      }    }    return result;  }  public static int CompareLocation3D(Location3D loc1, Location3D loc2) {    int result = 0;    for (int i = Location3D.X_AXIS; i < Location3D.Z_AXIS; i++) {      float diff = loc1.GetFloat(i) - loc2.GetFloat(i);      if (diff > 0) {        result = 1;        break;      } else if (diff < 0) {        result = -1;        break;      }    }    return result;  }  /*  	 public float[] GetFloatArray()  	 {  	 	float[] result = new float[3];  		result[0] = x;  		result[1] = y;  		result[2] = z;  		return result;  	 }  */  public static float[] GetFloatArray(Location3D location) {    float[] result = new float[3];    for (int i = 0; i < 3; i++) {      result[i] = location.GetFloat(X_AXIS + i);    }    return result;  }  public FloatPoint(String x, String y, String z) {    super(ToFloat(x), ToFloat(y), ToFloat(z));    /*	 	fCoords = new float[3];    		fCoords[X] = ToFloat(x);    		fCoords[Y] = ToFloat(y);    		fCoords[Z] = ToFloat(z);    */  }  public int GetRoundedInt(int axis) {    return Math.round(Get(axis));  }  public void Set(Location3D pt) {    x = pt.GetFloat(X_AXIS);    y = pt.GetFloat(Y_AXIS);    z = pt.GetFloat(Z_AXIS);  }  public void Add(Location3D location) {    x += location.GetFloat(X_AXIS);    y += location.GetFloat(Y_AXIS);    z += location.GetFloat(Z_AXIS);  }  public void Set(float value, int axis) {    switch (axis) {      case X:        x = value;        break;      case Y:        y = value;        break;      case Z:        z = value;        break;      default:        NeuroSynchUtil.ErrorMessage(            "Index out of range FloatPoint.Set(value,index)", NeuroSynchUtil.kNoDlog);        break;    }  }  // Location3D  public float GetFloat(int whichAxis) {    return Get(whichAxis);  }  public float Get(int index) {    float result;    switch (index) {      case X:        result = x;        break;      case Y:        result = y;        break;      case Z:        result = z;        break;      default:        NeuroSynchUtil.ErrorMessage(            "Index out of range FloatPoint.Get(index)", NeuroSynchUtil.kNoDlog);        result = 1;        break;    }    return result;  }  public String GetString(int index) {    return Float.toString(Get(index));  }  public String GetString(int index, int decimalPlaces) {    return NeuroSynchUtil.GetDecimalString(Get(index), decimalPlaces);  }  public static float ToFloat(String string) {    float result = 0;    try {      result = Float.valueOf(string).floatValue();    } catch (NumberFormatException e) {      NeuroSynchUtil.ErrorMessage(          "FloatPoint.ToFloat bad format " + string + ":" + e.getMessage(), NeuroSynchUtil.kNoDlog);    }    return result;  }  public void Set(Tuple3f initialPoint, Tuple3f increment, float factor) {    x = initialPoint.x + factor * increment.x;    y = initialPoint.y + factor * increment.y;    z = initialPoint.z + factor * increment.z;  }  public void Subtract(Tuple3f point) {    x -= point.x;    y -= point.y;    z -= point.z;  }  public String ToString(int decimalPlaces) {    return "("        + GetString(X, decimalPlaces)        + ", "        + GetString(Y, decimalPlaces)        + ", "        + GetString(Z, decimalPlaces)        + ")";  }}