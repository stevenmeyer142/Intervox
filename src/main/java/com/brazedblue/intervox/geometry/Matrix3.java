package com.brazedblue.intervox.geometry;import javax.vecmath.*;import com.brazedblue.intervox.util.Debug;public class Matrix3 extends Matrix3f { 			static final long serialVersionUID =  -6685955813517608155L;    public Matrix3() 	{    }	    public Matrix3(Matrix3 m1) 	{		super(m1);    }		public Matrix3(float[] values)	{		super(values[0], values[3], values[6], values[1], values[4], values[7], values[2], values[5], values[8]);	}		public Matrix3(float m00, float m01, float m02,  float m10, float m11, float m12,  float m20, float m21, float m22)	{		super(m00, m01, m02, m10, m11, m12, m20, m21, m22);	}		public void Set(ArbitraryFloatMatrix otherMatrix)	{		if (otherMatrix.NumOfColumns() >= 3 && otherMatrix.NumOfRows() >= 3)		{			for (int row = 0; row < 3; row++)			{				for (int col = 0; col < 3; col++)				{						// Should matrix row/column start with zero or one?					setElement(row, col, (float)otherMatrix.Get(row + 1, col + 1)); 				}			}		}	}	public void Set(Matrix3f m1) 	{		m00 = m1.m00; m01 = m1.m01; m02 = m1.m02;		m10 = m1.m10; m11 = m1.m11; m12 = m1.m12;		m20 = m1.m20; m21 = m1.m21; m22 = m1.m22;	}		public void RotationFromQuat(double x, double y, double z, double w)	{		double n = x*x + y*y + z*z + w*w;		double s = (n > 0.0) ? (2.0/n) : 0.0;			double xs = x*s,  ys = y*s,  zs = z*s;		double wx = w*xs, wy = w*ys, wz = w*zs;		double xx = x*xs, xy = x*ys, xz = x*zs;		double yy = y*ys, yz = y*zs, zz = z*zs;			m00 = (float)(1.0 - (yy + zz));	m01 = (float)(xy - wz);         m02 = (float)(xz + wy);		m10 = (float)(xy + wz);         m11 = (float)(1.0 - (xx + zz)); m12 = (float)(yz - wx);		m20 = (float)(xz - wy);         m21 = (float)(yz + wx);         m22 = (float)(1.0 - (xx + yy));	}			public void DebugDump(String message)	{		if (Debug.fgDebugging)		{			final int kColWidth = 10;			if (message != null)			{				System.out.println(message);			}			for (int row = 0; row < 3; row++)			{				for (int col = 0; col < 3; col++)				{					Debug.WriteDouble(getElement(row, col), kColWidth);				}								System.out.println("");			}			System.out.println("");		}		}    	public void SetFromAxisAngle(double angle, ThreeDVector axis) 	{		// Taken from Rick's which is taken from Wertz. pg. 412		// Bug Fixed and changed into right-handed by hiranabe		double x = axis.Get(FloatPoint.X); 		double y = axis.Get(FloatPoint.Y); 		double z = axis.Get(FloatPoint.Z); 		double n = Math.sqrt(x*x + y*y + z*z);		// zero-div may occur		n = 1/n;		x *= n;		y *= n;		z *= n;		double c = Math.cos(angle);		double s = Math.sin(angle);		double omc = 1.0 - c;		m00 = (float)(c + x*x*omc);		m11 = (float)(c + y*y*omc);		m22 = (float)(c + z*z*omc);			double tmp1 = x*y*omc;		double tmp2 = z*s;		m01 = (float)(tmp1 - tmp2);		m10 = (float)(tmp1 + tmp2);			tmp1 = x*z*omc;		tmp2 = y*s;		m02 = (float)(tmp1 + tmp2);		m20 = (float)(tmp1 - tmp2);			tmp1 = y*z*omc;		tmp2 = x*s;		m12 = (float)(tmp1 - tmp2);		m21 = (float)(tmp1 + tmp2);    }    /**      * Sets the value of this matrix to the double value of the Matrix3f      * argument.      * @param m1 the matrix3d to be converted to double    */    /*		project builder    private final void set(Matrix3f m1)  {	m00 = m1.m00; m01 = m1.m01; m02 = m1.m02;	m10 = m1.m10; m11 = m1.m11; m12 = m1.m12;	m20 = m1.m20; m21 = m1.m21; m22 = m1.m22;    }	*/	public void DebugShift()	{		float  temp00 = m00;		float  temp01 = m01;		float  temp02 = m02;		m00 = m20;		m01 = m21;		m02 = m22;		m20 = m10;		m21 = m11;		m22 = m12;		m10 = temp00;		m11 = temp01;		m12 = temp02;	}}