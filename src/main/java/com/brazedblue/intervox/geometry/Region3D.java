package com.brazedblue.intervox.geometry;import java.awt.*;import java.io.*;import java.util.Stack;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.view3D.*;public class Region3D  implements java.io.Serializable, Region3DModel { 	private Color 				fColor = new Color(Color.pink.getRGB());	private RegionSelectionActions[]	fActions;	private long 				fRegion;	private float				fTransparency = 1;	private int 				fRangeLow;	private int 				fRangeHigh;	private transient Mesh3D		fMesh = null;	private boolean				fHas3DGeometry = false;        private int				fResolution = 0;	private Stack 				fRegionVersions = new Stack();		// private Engine3D					fEngine3D = Engine3D.GetEngine3D();		static final long					serialVersionUID = 9160128844237644077L;  	public Region3D(int numOfSlices, long whichRegion) 	{		fRegion = whichRegion;		fActions = new RegionSelectionActions[numOfSlices];  	}		public int AddLabelToArray(String[] array, int index)	{		array[index++] = GetLabel();		synchronized (fRegionVersions)		{			for (int i = 0; i < fRegionVersions.size(); i++)			{				Region3DVersion version = (Region3DVersion)fRegionVersions.elementAt(i);				array[index++] = version.GetLabel();			}		}		return index;	}		public Region3DModel GetPrimaryRegion()	{		return this;	}				//	 this synchronized could be a problem when jni becomes reentrant		//		mabne don't d	public synchronized void CreateMesh3D(int width, int height, byte[][] byteArrays)	{		Mesh3D mesh = Engine3D.NewMesh3D(width, height, byteArrays, GetRegionValue(), Get3DGeometryID(), GetMeshResolution());			SetMesh3D(mesh);                                fResolution = Engine3D.GetMeshResolution(mesh);				for (int i = 0; i < fRegionVersions.size(); i++)		{			Region3DVersion version = (Region3DVersion)fRegionVersions.elementAt(i);			version.VersionMesh3D(mesh);		}	}		public synchronized Region3DModel CreateRegionVersion()	{		char character = 'A';	//	version label		if (fRegionVersions.size() > 0)		{			Region3DVersion lastVersion = (Region3DVersion)fRegionVersions. peek();			character = lastVersion.GetCharacter();			character++;		}				Region3DVersion newVersion = new Region3DVersion(character);				if (fMesh != null)		{			newVersion.VersionMesh3D(fMesh);		}				fRegionVersions.push(newVersion);				return newVersion;	}		public Region3DModel GetRegionWithLabel(String label)	{		Region3DModel result = null;		if (label.equals(GetLabel()))		{			result = this;		}		else		{			synchronized(fRegionVersions)			{				for (int i = 0; i < fRegionVersions.size(); i++)				{					Region3DVersion version = (Region3DVersion)fRegionVersions.elementAt(i);					if (label.equals(version.GetLabel()))					{						result = version;						break;					}				}			}		}				return result;	}		public void Dispose()	{		DisposeQDObject();		for (int i = 0; i < fRegionVersions.size(); i++)		{			Region3DVersion version = (Region3DVersion)fRegionVersions.elementAt(i);			version.DisposeQDObject();		}				fRegionVersions.removeAllElements();	}		public int GetRegionCount()	{		return 1 + fRegionVersions.size();	}		private void DisposeQDObject()	{		if (fMesh != null)		{			Mesh3D mesh = fMesh;			fMesh = null;			mesh.Dispose();		}			}		public String GetLabel()	{		return Long.toString(fRegion);	}                public void SetMeshResolution(int resolution)        {            fResolution = resolution;        }                public int GetMeshResolution()        {            return fResolution;        }		public void SetLowHighValues(int low, int high)	{		fRangeLow = low;		fRangeHigh = high;	}		public int GetRangeLow()	{		return fRangeLow;	}		public boolean HasMesh3D()	{		return fHas3DGeometry;		}		public int GetRangeHigh()	{		return fRangeHigh;	}		public Mesh3D GetMesh3D()	{		return fMesh;	}		public long Get3DGeometryID()	{		return fRegion;	}		public RegionSelectionActions GetActions(int whichSlice)	{		if (fActions[whichSlice] == null)		{			fActions[whichSlice] = new RegionSelectionActions();		}				return fActions[whichSlice];	}		public void ClearAllActions()	{		for (int i = 0; i < fActions.length; i++)		{			fActions[i] = null;		}	}		public void ClearAllSeedPoints()	{		for (int i = 0; i < fActions.length; i++)		{			RegionSelectionActions action = fActions[i];			if (action != null)			{								action.ClearSeedPoints();				action.SetShouldSeed(true);			}		}	}		public void ClearAllEdgeLines()	{		for (int i = 0; i < fActions.length; i++)		{			RegionSelectionActions action = fActions[i];			if (action != null)			{				action.ClearEdgeLines();				action.SetShouldSeed(true);			}		}	}		public Color GetColor()	{		return fColor;	}		public void SetColor(Color color)	{		fColor = color;		if (fMesh != null)		{			fMesh.SetColor(color);		} 	}		public void SetTransparency(float transparency)	{		fTransparency = transparency;		if (fMesh != null)		{			fMesh.SetTransparency(transparency);		} 	}		public float GetTransparency()	{		return fTransparency;	}			// The actual value set and tested for  (1 << region)	public int GetRegionValue()	{		return 1 << fRegion;	}		private void SetMesh3D(Mesh3D mesh)	{		DisposeQDObject();				fMesh = mesh;		if (fMesh != null)		{			fMesh.SetColor(fColor);			fMesh.SetTransparency(fTransparency);			fHas3DGeometry = true;		}				fHas3DGeometry = fMesh != null;	}		private void Mesh3DreadObject(ObjectInputStream s)      	throws ClassNotFoundException, IOException     {      	s.defaultReadObject();		fMesh = null;   }      	private class Region3DVersion implements Region3DModel, java.io.Serializable   	{		private transient Mesh3D			fMesh = null;		private Color 					fColor = new Color(Color.pink.getRGB());		private float						fTransparency = 1;		private char						fCharacter;				static final long					serialVersionUID = -2121485342684149162L;		Region3DVersion(char character)		{			fTransparency = Region3D.this.fTransparency;			fColor = Region3D.this.fColor;			fCharacter = character;		}		public Mesh3D GetMesh3D()		{			return fMesh;		}				public Region3DModel CreateRegionVersion()		{			return Region3D.this.CreateRegionVersion();		}				private char GetCharacter()		{			return fCharacter;		}				public void CreateMesh3D(int width, int height, byte[][] byteArrays)		{			Region3D.this.CreateMesh3D(width, height, byteArrays);		}				private void VersionMesh3D(Mesh3D otherMesh)		{			Mesh3D geometry = Engine3D.NewMesh3DVersion(otherMesh, Get3DGeometryID());					SetMesh3D(geometry);		}				public boolean HasMesh3D()		{			return Region3D.this.HasMesh3D();		}				public Color GetColor()		{			return fColor;		}				public void SetColor(Color color)		{			fColor = color;			if (fMesh != null)			{				fMesh.SetColor(color);			} 		}				public float GetTransparency()		{			return fTransparency;		}				public void SetTransparency(float transparency)		{			fTransparency = transparency;			if (fMesh != null)			{				fMesh.SetTransparency(transparency);			} 		}				public String GetLabel()		{			return Region3D.this.GetLabel() + fCharacter;		}				public int GetRegionValue()		{			return Region3D.this.GetRegionValue();		}				public int GetRangeHigh()		{			return Region3D.this.GetRangeHigh();		}				public int GetRangeLow()		{			return Region3D.this.GetRangeLow();		}				public long Get3DGeometryID()		{			int mygeomID = fCharacter << 16;			long primaryGeomID = Region3D.this.Get3DGeometryID();						return mygeomID | primaryGeomID;		}				public RegionSelectionActions GetActions(int sliceIndex)		{			return Region3D.this.GetActions(sliceIndex);		}				public void ClearAllEdgeLines()		{			Region3D.this.ClearAllEdgeLines();		}				public void ClearAllSeedPoints()		{			Region3D.this.ClearAllSeedPoints();		}				public void SetLowHighValues(int low, int high)		{			Region3D.this.SetLowHighValues(low, high);		}		private void SetMesh3D(Mesh3D mesh)		{			DisposeQDObject();					fMesh = mesh;			if (fMesh != null)			{				fMesh.SetColor(fColor);				fMesh.SetTransparency(fTransparency);				fHas3DGeometry = true;			}					fHas3DGeometry = fMesh != null;		}			private void DisposeQDObject()		{			if (fMesh != null)			{				Mesh3D mesh = fMesh;				fMesh = null;				mesh.Dispose();			}					}                                public int GetMeshResolution()                {                    return Region3D.this.GetMeshResolution();                }                        public void SetMeshResolution(int resolution)                {                    Region3D.this.SetMeshResolution(resolution);                }	} }