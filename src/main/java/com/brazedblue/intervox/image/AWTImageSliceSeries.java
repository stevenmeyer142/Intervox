package com.brazedblue.intervox.image;import com.brazedblue.intervox.display.ProgressBroadcaster;import com.brazedblue.intervox.display.ProgressCancelledException;import com.brazedblue.intervox.geometry.ThreeDVector;import com.brazedblue.intervox.util.NeuroSynchUtil;import java.awt.Image;import java.awt.image.ImageObserver;import java.awt.image.PixelGrabber;import java.io.IOException;public class AWTImageSliceSeries extends ImageSliceSeries implements AWTImageReceiver {  static final long serialVersionUID = -8067673828349572977L;  public AWTImageSliceSeries() {    fRowVector = new ThreeDVector(1, 0, 0);    fColumnVector = new ThreeDVector(0, 0, -1);  }  public void AddImage(Image img) {    int imageWidth = img.getWidth(null);    int imageHeight = img.getHeight(null);    int[] pixels = new int[imageWidth * imageHeight];    byte[] bytePixels = new byte[imageWidth * imageHeight];    PixelGrabber pg = new PixelGrabber(img, 0, 0, imageWidth, imageHeight, pixels, 0, imageWidth);    try {      pg.grabPixels();    } catch (InterruptedException e) {      NeuroSynchUtil.ErrorMessage("interrupted waiting for pixels!", false);      return;    }    if ((pg.getStatus() & ImageObserver.ABORT) != 0) {      NeuroSynchUtil.ErrorMessage("image fetch aborted or errored", false);      return;    }    for (int i = 0; i < pixels.length; i++) {      int pixel = pixels[i];      bytePixels[i] = (byte) (pixel & 0xFF);    }    PixelData pixelData = PixelData.NewDataInstance(imageWidth, imageHeight, bytePixels);    AddPixelData(pixelData, null);  }  public SingleSpaceID GetSpaceID() {    return SingleSpaceID.GetJPEGVirtualSpaceID();  }  public void SetSliceThickness(float sliceThickness) {    super.SetSliceThickness(sliceThickness);  }  public void FinishReceiving(ProgressBroadcaster broadcaster) throws IOException {    try {      ComputeHistogram(broadcaster);      InterpolateToCubicVoxels(broadcaster);      fComplete = true;    } catch (ProgressCancelledException e) {      throw new IOException("User cancelled");    }  }}