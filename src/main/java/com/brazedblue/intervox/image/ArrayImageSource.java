package com.brazedblue.intervox.image;import java.awt.image.*;// import com.brazedblue.intervox.util.*;import java.util.*;abstract class ArrayImageSource implements ImageProducer {  ColorModel fColorModel = ColorModel.getRGBdefault();  Hashtable fConsumers = new Hashtable();  boolean fStatic;  int fImageHeight;  int fImageWidth;  public ArrayImageSource(boolean staticSrc) {    fStatic = staticSrc;  }  public void addConsumer(ImageConsumer ic) {    if (fConsumers.containsKey(ic)) {      return;    }    ArrayImageSourceImageConsumer consumer = new ArrayImageSourceImageConsumer(ic);    fConsumers.put(ic, consumer);    try {      if (HasPixels()) {        InitConsumer(consumer);        SendPixels(ic);        if (isConsumer(ic)) {          ic.imageComplete(fStatic ? ImageConsumer.STATICIMAGEDONE : ImageConsumer.SINGLEFRAMEDONE);        }      }    } catch (Exception e) {      if (isConsumer(ic)) {        ic.imageComplete(ImageConsumer.IMAGEERROR);      }    }  }  //	this is not correctly implemented because consumers were being removed when they shouldn't  public void removeConsumer(ImageConsumer ic) {    fConsumers.remove(ic);  }  public boolean isConsumer(ImageConsumer ic) {    return fConsumers.containsKey(ic);  }  public void requestTopDownLeftRightResend(ImageConsumer ic) {}  public void startProduction(ImageConsumer ic) {    addConsumer(ic);  }  private void InitConsumer(ArrayImageSourceImageConsumer consumer) {    ImageConsumer ic = consumer.GetImageConsumer();    if (isConsumer(ic)) {      ic.setDimensions(fImageWidth, fImageHeight);    }    if (isConsumer(ic)) {      ic.setProperties(null);    }    if (isConsumer(ic)) {      ic.setColorModel(fColorModel);    }    if (isConsumer(ic)) {      int hints =          ImageConsumer.SINGLEPASS              | ImageConsumer.TOPDOWNLEFTRIGHT              | ImageConsumer.COMPLETESCANLINES;      if (fStatic) {        hints |= ImageConsumer.SINGLEFRAME;      }      ic.setHints(hints);    }    consumer.SetInited(true);  }  public abstract void SetPixelData(PixelData pixels);  protected abstract void SendPixels(ImageConsumer ic);  public abstract boolean HasPixels();  protected void UpdateConsumers() {    if (HasPixels()) {      Enumeration iter = fConsumers.elements();      while (iter.hasMoreElements()) {        ArrayImageSourceImageConsumer ic = (ArrayImageSourceImageConsumer) iter.nextElement();        ValidateImageConsumer(ic);        SendPixels(ic.GetImageConsumer());      }    }  }  private void ValidateImageConsumer(ArrayImageSourceImageConsumer consumer) {    if (!consumer.IsInited()) {      InitConsumer(consumer);    }  }  private static class ArrayImageSourceImageConsumer {    ImageConsumer fImageConsumer;    boolean fInited = false;    private ArrayImageSourceImageConsumer(ImageConsumer consumer) {      fImageConsumer = consumer;    }    private boolean IsInited() {      return fInited;    }    private void SetInited(boolean inited) {      fInited = inited;    }    private ImageConsumer GetImageConsumer() {      return fImageConsumer;    }  }}