package com.brazedblue.intervox.image;import java.awt.*;import java.awt.event.*;import java.util.*;import javax.swing.*;import javax.swing.border.*;import com.brazedblue.intervox.display.*;import com.brazedblue.intervox.util.Debug;import com.brazedblue.intervox.util.NeuroSynchUtil;public class HistogramSlider extends JPanel /* implements anInterface */ {	private Histogram 				fHistogram;	private Vector					fActionListeners = new Vector();		private int 		fLowIndex;	private int 		fHighIndex;	private boolean 	fIsAdjusting = false;	private boolean		fShowGrayValues = true;	private boolean		fScaleGrayValues = false;		public static final String 	kHighLowChanged = "HighLowChanged";	public static final String 	kHighChanged = "HighChanged";	public static final String 	kLowChanged = "LowChanged";		static private final int kBtnWidth = 16;	static private final int kBtnHt = 16;	static private final int kHistogramHt = 32;	static private final int kHInset = kBtnWidth / 2 + 2;	static private final int kVInset = 2;		static private final int kNoButton = 0;	static private final int kLowButton = 1;	static private final int kHighButton = 2;			static private final Draw3D fg3dDraw = new DrawRubber3D();		static private Color[] fg256Colors;	    public HistogramSlider(Histogram histogram) 	{		this(histogram, null);    }	   	public HistogramSlider(Histogram histogram, Border border) 	{		HistogramSliderMouseListener l = new HistogramSliderMouseListener();		addMouseListener(l);			addMouseMotionListener(l);				if (border == null)		{			border = BorderFactory.createRaisedBevelBorder();		}		setBorder(border);				SetHistogram(histogram);    }		public HistogramSlider() 	{		this((Border)null);	}   	public HistogramSlider(Border border) 	{		this(new Histogram(256), border);    }		public void SetHistogram(Histogram histogram)	{		fHistogram = histogram;		fHighIndex = fHistogram.GetSize() - 1;			Dimension prefSize = new Dimension();				Border border = getBorder();		Insets borderInsets = border.getBorderInsets(this);				prefSize.height = 2 * kBtnHt + kHistogramHt + 2 * kVInset + borderInsets.top + borderInsets.bottom;		prefSize.width = fHistogram.GetSize() + 2 * kHInset + borderInsets.left + borderInsets.right;		setPreferredSize(prefSize);		setMinimumSize(prefSize);		setMaximumSize(prefSize);				revalidate();		repaint();	}		public boolean IsAdjusting()	{		return fIsAdjusting;	}		public void SetScaleGrayValues(boolean scale)	{		fScaleGrayValues = scale;	}		public void addActionListener(ActionListener l)	{		if (!fActionListeners.contains(l))		{			fActionListeners.addElement(l);		}	}		private Rectangle GetContentRectangle(Rectangle contentRectangle)	{		if (contentRectangle == null)		{			contentRectangle = new Rectangle();		}		Dimension size = getSize();		Insets insets = getInsets();				contentRectangle.setBounds(kHInset + insets.left, kVInset + insets.top, 							size.width - (kHInset + insets.left + insets.right), 							kHistogramHt + 2 * kBtnHt);				return contentRectangle;		}		private void GetHistogramRect(Rectangle rect)	{		rect.y += kBtnHt;		rect.height = kHistogramHt;		}		public void removeActionListener(ActionListener l)	{		fActionListeners.removeElement(l);	}		protected void NotifyActionListeners(int id, String command)	{		ActionEvent evt = new ActionEvent(this, id, command);				for (Enumeration iter = fActionListeners.elements(); iter.hasMoreElements(); )		{			ActionListener l = (ActionListener)iter.nextElement();			l.actionPerformed(evt);		}		}		public void SetHighValue(int value)	{		fHighIndex = fHistogram.GetIndexForValue(value);	}		public void SetLowValue(int value)	{		fLowIndex = fHistogram.GetIndexForValue(value);	}		public int GetHighValue()	{		return fHistogram.GetValueForIndex(fHighIndex);	}		public int GetLowValue()	{		return fHistogram.GetValueForIndex(fLowIndex);	}			public void paintComponent(Graphics g) 	{		if (Debug.fgDebugging && false)		{			System.out.println("paintComponent called, time " + System.currentTimeMillis());		}		Rectangle histoRect = GetContentRectangle(null);		g.clearRect(histoRect.x,histoRect.y,histoRect.width,histoRect.height);		Rectangle drawRect = new Rectangle(histoRect);		GetHistogramRect(drawRect);		PaintHistogram(g, drawRect);					// draw high button		drawRect.setBounds(histoRect);				GetHighBtnRect(fHighIndex,drawRect);		PaintButton(g, drawRect);					//	draw low button		drawRect.setBounds(histoRect);				GetLowBtnRect(fLowIndex,  drawRect);		PaintButton(g, drawRect);			}		private void PaintButton(Graphics g, Rectangle rect)	{		fg3dDraw.Draw(rect, Draw3D.NORMAL, g);			}		private void GetHighBtnRect(int value, Rectangle rect)	{		rect.x += value - kBtnWidth / 2;		rect.width = kBtnWidth;		rect.height = kBtnHt;	}		private void GetLowBtnRect(int value, Rectangle rect)	{		rect.x += value - kBtnWidth / 2;		rect.y += kBtnHt + kHistogramHt;		rect.width = kBtnWidth;		rect.height = kBtnHt;	}		private void PaintHistogram(Graphics g, Rectangle rect)	{		fHistogram.ScaleTo(255);				Color[] colorArr = Get256Colors();		Color oldColor = g.getColor();				int size = fHistogram.GetSize();				int halfHt = rect.height / 2;				for (int i = 0; i < size; i++)		{			if (i == fLowIndex)			{				g.setColor(Color.blue);			}			else if (i == fHighIndex)			{				g.setColor(Color.yellow);			}			else			{				int value = fHistogram.GetCountForIndex(i);								Color color = colorArr[value];				g.setColor(color);			}						g.drawLine(rect.x + i, rect.y + halfHt, rect.x + i, rect.y + rect.height);		}				if (fShowGrayValues)		{			int startGrayValue = fScaleGrayValues ? fLowIndex : 0;			int endGrayValue = fScaleGrayValues ? fHighIndex : size;						float inc = (endGrayValue - startGrayValue) > 0 ? (255f / (float)(endGrayValue - startGrayValue)) : 1;						if (startGrayValue > 0)			{				Color color = colorArr[0];				g.setColor(color);				g.fillRect(rect.x, rect.y, startGrayValue, halfHt + 1);			}			float grayValue = 0;			for (int i = startGrayValue; i < endGrayValue; i++, grayValue += inc)			{				int index = (int)grayValue;				index = NeuroSynchUtil.Limit(index, 0, 255);				Color color = colorArr[index];				g.setColor(color);				g.drawLine(rect.x + i, rect.y, rect.x + i, rect.y + halfHt);			}			if (endGrayValue < size)			{				Color color = colorArr[255];				g.setColor(color);				g.fillRect(rect.x + endGrayValue, rect.y, size - endGrayValue, halfHt + 1);			}					}		g.setColor(oldColor);	}		private Color[] Get256Colors()	{		if (fg256Colors == null)		{			fg256Colors = new Color[256];			for (int i = 0; i < 256; i++)			{				fg256Colors[i] = new Color(i, i, i);			}		}				return fg256Colors;		}		private void HandleValueChanged(String command)	{		NotifyActionListeners(ActionEvent.ACTION_PERFORMED, command);	}		class HistogramSliderMouseListener extends MouseAdapter implements MouseMotionListener	{		int fWhichButton = kNoButton;		int fOldHigh;		int fOldLow;		int fOffset;	// compensates for off center on button				Rectangle fMyRect = new Rectangle();		Rectangle fHistogramRect = new Rectangle();				HistogramSliderMouseListener()		{		}				private int GetCorrespondingHistoValue(MouseEvent e)		{			int result = -1;						if (contains(e.getX(),e.getY()))			{				int pos = e.getX() - fHistogramRect.x;								result = NeuroSynchUtil.Limit(pos, 0, fHistogram.GetSize() - 1);							}						return result;		}				public void mousePressed(MouseEvent e)		{			fWhichButton = kNoButton;			fOldHigh = fHighIndex;			fOldLow = fLowIndex;			fOffset = 0;						GetContentRectangle(fHistogramRect);			GetContentRectangle(fMyRect);			GetHighBtnRect(fHighIndex, fMyRect);			if (fMyRect.contains(e.getX(), e.getY()))			{				fWhichButton = kHighButton;				Graphics g = getGraphics();				fOffset = fHighIndex - GetCorrespondingHistoValue(e);				InvertHighButton(g, fHighIndex);				g.dispose();								fIsAdjusting = true;			}			GetContentRectangle(fMyRect);			GetLowBtnRect(fLowIndex, fMyRect);			if (fMyRect.contains(e.getX(), e.getY()))			{				fWhichButton = kLowButton;				Graphics g = getGraphics();				fOffset = fLowIndex - GetCorrespondingHistoValue(e);				InvertLowButton(g, fLowIndex);				g.dispose();								fIsAdjusting = true;			}		}				private void InvertLowButton(Graphics g, int pos)		{			GetContentRectangle(fMyRect);			GetLowBtnRect(pos, fMyRect);			g.setXORMode(Color.white);						g.drawRect(fMyRect.x, fMyRect.y, fMyRect.width, fMyRect.height);						int lineXPos = fMyRect.x + fMyRect.width / 2;			int lineYPos = fMyRect.y - kHistogramHt;			g.drawLine(lineXPos, lineYPos, lineXPos, lineYPos + kHistogramHt);						g.setPaintMode();		}				private void InvertHighButton(Graphics g, int pos)		{			GetContentRectangle(fMyRect);			GetHighBtnRect(pos, fMyRect);			g.setXORMode(Color.white);						g.drawRect(fMyRect.x, fMyRect.y, fMyRect.width, fMyRect.height);						int lineXPos = fMyRect.x + fMyRect.width / 2;			int lineYPos = fMyRect.y + fMyRect.height;			g.drawLine(lineXPos, lineYPos, lineXPos, lineYPos + kHistogramHt);						g.setPaintMode();		}				public void mouseReleased(MouseEvent e) 		{							fIsAdjusting = false;			if (fWhichButton != kNoButton)			{				int newPosition = GetCorrespondingHistoValue(e); 				if (newPosition == -1)				{					fHighIndex = fOldHigh;					fLowIndex = fOldLow;									}								HandleValueChanged(kHighLowChanged);				Rectangle paintRect = GetContentRectangle(new Rectangle());				repaint();				if (Debug.fgDebugging)				{					System.out.println("repaint called, time " + System.currentTimeMillis());				}							}			fWhichButton = kNoButton;			fOldHigh = -1;			fOldLow = -1;					}			    public void mouseDragged(MouseEvent e)		{			if (fWhichButton != kNoButton)			{				int pos = GetCorrespondingHistoValue(e);								if (pos != -1)				{					int oldLow = fLowIndex;					int oldHigh = fHighIndex;										boolean lowChanged = false;					boolean highChanged = false;														if (fWhichButton == kHighButton)					{						fHighIndex = pos;												if ((oldLow == -1 && pos < fLowIndex) || (oldLow != -1 && pos < oldLow))						{							fLowIndex = pos;						}					}					else if (fWhichButton == kLowButton)					{						fLowIndex = pos;												if ((oldHigh == -1 && pos > fHighIndex) || (oldHigh != -1 && pos > oldHigh))						{							fHighIndex = pos;						}					}											Graphics g = getGraphics();					if (oldLow != fLowIndex)					{						if (oldLow != -1)							InvertLowButton(g, oldLow);											InvertLowButton(g, fLowIndex);												lowChanged = true;					}										if (oldHigh != fHighIndex)					{						if (oldHigh != -1)							InvertHighButton(g, oldHigh);						InvertHighButton(g, fHighIndex);												highChanged = true;											}										g.dispose();										if (highChanged && lowChanged)					{						HandleValueChanged(kHighLowChanged);					}					else if (highChanged)					{						HandleValueChanged(kHighChanged);					}					else if (lowChanged)					{						HandleValueChanged(kLowChanged);					}				}			}		}		    public void mouseMoved(MouseEvent e)		{				}	}	  }