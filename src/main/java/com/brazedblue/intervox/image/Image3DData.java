package com.brazedblue.intervox.image;import java.util.*;import java.awt.Dimension;import java.io.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.util.*;import com.brazedblue.intervox.registration.*;import com.brazedblue.intervox.display.ProgressBroadcaster;public class Image3DData extends DataModel implements java.io.Serializable, ImageReceiver{ 	ImageSliceSeries			fImageSliceSeries;	transient FloatPoint		fSelectedPoint; 	FiducialPoints				fFiducialPoints = new FiducialPoints();	ImageAdjustments			fImageAdjustments = null;		Vector						fSnapshots;	RegionsOfInterest			fRegionsOfInterest;//	SingleSpaceID				fSpaceID;		public static final int 	kDummySet = -1;		//	 use as place holder, avoid checking for null	public static final int 	kDicomReciever = 0;	public static final int		kAWTReciever = kDicomReciever + 1;		static final long			serialVersionUID = 430634629852664398L;			static boolean				gDebugDataComplete = false;	    public Image3DData(int recieverType) 	{		switch (recieverType)		{			case kDicomReciever :				fImageSliceSeries = new DicomImageSliceSeries();				break;						case kAWTReciever :				fImageSliceSeries = new AWTImageSliceSeries();				break;							case kDummySet :				fImageSliceSeries = new ImageSliceSeries();				break;										default :				fImageSliceSeries = new ImageSliceSeries();				if (Debug.fgDebugging)				{					Debug.PrintStackTrace("unknown receiverType- " + recieverType);				}				break;		}    }		public Location3D GetSelectedPoint()	{		return fSelectedPoint;	} 	public void SetSelectedPoint(Location3D selectedPt)	{		fSelectedPoint = new FloatPoint(selectedPt);	}	public RegionsOfInterest GetRegionsOfInterest()   	{   		if (fRegionsOfInterest == null)		{			Dimension size = new Dimension(fImageSliceSeries.MaxCoord(OrthoImageSetController.kSagittal) + 1,									fImageSliceSeries.MaxCoord(OrthoImageSetController.kCoronal) + 1);			fRegionsOfInterest = new RegionsOfInterest(size, fImageSliceSeries.MaxCoord(OrthoImageSetController.kAxial) + 1);		}				return fRegionsOfInterest;      	} 	public void FinishReceiving(ProgressBroadcaster broadcaster) throws IOException    	{		if (Debug.fgDebugging && gDebugDataComplete)		{			Debug.PrintStackTrace("broadcaster " + broadcaster.toString());		}				ImageReceiver imageReceiver = GetImageReceiver();				if (imageReceiver != null)		{			imageReceiver.FinishReceiving(broadcaster);		}				if (fImageSliceSeries != null)		{			GetImageAdjustments().SetMaxValue(fImageSliceSeries.GetMaxValue());		}		else if (Debug.fgDebugging)		{			NeuroSynchUtil.ErrorMessage("Image3DData.FinishReceiving called after Dispose.", NeuroSynchUtil.kNoDlog);		}	}	public FiducialPoints GetFiducialPoints()	{		return fFiducialPoints;	}		public String GetName()	{		return (fImageSliceSeries != null) ? fImageSliceSeries.GetName() : null;	}	public ImageAdjustments GetImageAdjustments()	{		if (fImageAdjustments == null)		{			fImageAdjustments = new ImageAdjustments();		}				return fImageAdjustments;	}	public Vector GetSnapshotsList()	{		if (fSnapshots == null)		{			fSnapshots = new Vector();		}				return fSnapshots;	}/*	public void SetDataComplete(boolean complete)   	{		if (Debug.fgDebugging && gDebugDataComplete)		{			Debug.PrintStackTrace("fDataComplete " + fDataComplete + " complete " + complete);		}		   		fDataComplete = complete;   	} */     	public void Dispose()	{		fImageSliceSeries = null;		fFiducialPoints = null;				if (fRegionsOfInterest != null)		{			fRegionsOfInterest.Dispose();			fRegionsOfInterest = null;		}	}		public AWTImageReceiver GetAWTImageReceiver()	{		AWTImageReceiver result = null;				if (fImageSliceSeries instanceof AWTImageReceiver)		{			result = (AWTImageReceiver)fImageSliceSeries;		}				return result;	}	public DicomImageReceiver GetDicomImageReceiver()	{		DicomImageReceiver result = null;				if (fImageSliceSeries instanceof DicomImageReceiver)		{			result = (DicomImageReceiver)fImageSliceSeries;		}				return result;	}		public Image3DField GetImage3DField()	{		return fImageSliceSeries;	}		int GetSlicesCount()	{		return fImageSliceSeries.NumOfPixels();	}		public ImageReceiver GetImageReceiver()	{		ImageReceiver result = null;				if (fImageSliceSeries instanceof ImageReceiver)		{			result = (ImageReceiver)fImageSliceSeries;		}				return result;	}	public SingleSpaceID GetSpaceID()	{		return fImageSliceSeries.GetSpaceID();	}		public Histogram GetSeriesHistogram()	{		return fImageSliceSeries.GetHistogram();	}		public boolean IsComplete()	{		if (Debug.fgDebugging && gDebugDataComplete)		{			Debug.PrintStackTrace("fDataComplete " + fImageSliceSeries.IsComplete());		}				return fImageSliceSeries.IsComplete();	}}