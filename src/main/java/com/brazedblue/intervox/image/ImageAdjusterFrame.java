package com.brazedblue.intervox.image;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.display.*;import java.awt.*;import java.awt.event.*;import javax.swing.*;import javax.swing.event.*;public class ImageAdjusterFrame extends NSDialogFrame    implements ChangeListener, ImageSpaceSelector.ImageSpaceSelectListener, ActionListener {  OrthoImageSetController fImageController;  JSlider fContrastSlider;  JSlider fBrightnessSlider;  ImageAdjustments fImageAdjustments;  SingleSpaceID fSpace = SingleSpaceID.GetDefaultVirtualSpaceID();  JLabel fLowLabel;  JLabel fHighLabel;  HistogramSlider fHistoSlider;  float fFactor = 1;  private ImageSpaceSelector fSpaceSelector;  private ImageFilterAccessor fImageFilterAccessor;  private static final int kSliderScale = 50;  public ImageAdjusterFrame(      OrthoImageSetController imageController,      ImageFilterAccessor filtersAccessor,      ImageSpacesAccessor spaceAccessor) {    super("Image Adjustment", true, true);    fImageFilterAccessor = filtersAccessor;    //		fImageAdjustments = data.GetImageAdjustments(fSpace);    fImageController = imageController;    Container contentPane = getContentPane();    GridBagConstraints constraints = new GridBagConstraints();    GridBagLayout layout = new GridBagLayout();    contentPane.setLayout(layout);    constraints.gridwidth = GridBagConstraints.REMAINDER;    if (ImageAdjustments.kUseHighLow) {      JLabel label = new JLabel("Visible Range", JLabel.CENTER);      layout.setConstraints(label, constraints);      contentPane.add(label);      /*      Image3DField imageField = data.GetImage3DField(fSpace);      Histogram histogram = imageField.GetHistogram();      int histoSize = histogram.GetSize();      int newHistoSize = histoSize;      fFactor = 1;      if (newHistoSize > 300)      {      	fFactor = (float)newHistoSize / 300f;      	int intFactor = (int)fFactor;      	if (fFactor > intFactor)      	{      		fFactor = intFactor + 1;      	}      	newHistoSize = (int)(histoSize / fFactor);      	if (histoSize % (int)fFactor != 0)      	{      		newHistoSize++;      	}      }      Histogram newHisto = histogram.GetContractedCopy(newHistoSize);      newHisto.ScaleTo(255); */      fHistoSlider = new HistogramSlider();      fHistoSlider.SetScaleGrayValues(true);      fHistoSlider.addActionListener(this);      layout.setConstraints(fHistoSlider, constraints);      contentPane.add(fHistoSlider);      //			fHistoSlider.SetHighValue((int)(fImageAdjustments.GetAdjustedMaxValue() / fFactor));      //			fHistoSlider.SetLowValue((int)(fImageAdjustments.GetAdjustedMinValue() / fFactor));    } else {      /*			JLabel label = new JLabel("Brightness", JLabel.CENTER);      layout.setConstraints(label, constraints);      contentPane.add(label);      int brightnessValue = (int)Math.round((fImageAdjustments.GetBrightness() * kSliderScale) / 2);      fBrightnessSlider = new JSlider(JSlider.HORIZONTAL, 0, kSliderScale, brightnessValue);      fBrightnessSlider.addChangeListener(this);      layout.setConstraints(fBrightnessSlider, constraints);      contentPane.add(fBrightnessSlider);      label = new JLabel("Contrast", JLabel.CENTER);      layout.setConstraints(label, constraints);      contentPane.add(label);      int contrastValue = (int)Math.round((fImageAdjustments.GetContrast() * kSliderScale) / 2);      fContrastSlider = new JSlider(JSlider.HORIZONTAL, 0, kSliderScale, contrastValue);      fContrastSlider.addChangeListener(this);      layout.setConstraints(fContrastSlider, constraints);      contentPane.add(fContrastSlider); */    }    constraints.fill = GridBagConstraints.BOTH;    constraints.weightx = 1.0;    constraints.gridwidth = GridBagConstraints.RELATIVE;    JLabel label = new JLabel("Low", JLabel.CENTER);    layout.setConstraints(label, constraints);    contentPane.add(label);    constraints.gridwidth = GridBagConstraints.REMAINDER;    label = new JLabel("High", JLabel.CENTER);    layout.setConstraints(label, constraints);    contentPane.add(label);    constraints.gridwidth = GridBagConstraints.RELATIVE;    fLowLabel = new JLabel("0", JLabel.CENTER);    layout.setConstraints(fLowLabel, constraints);    contentPane.add(fLowLabel);    constraints.gridwidth = GridBagConstraints.REMAINDER;    fHighLabel = new JLabel("255", JLabel.CENTER);    layout.setConstraints(fHighLabel, constraints);    contentPane.add(fHighLabel);    fSpaceSelector = new ImageSpaceSelector();    fSpaceSelector.AddSpaceSelectListener(this);    fSpaceSelector.SetImageSpacesAccessor(spaceAccessor);    Component spaceControl = fSpaceSelector.GetControl();    layout.setConstraints(spaceControl, constraints);    contentPane.add(spaceControl);    SetUpFilterData();  }  private void SetUpFilterData() {    fImageAdjustments = fImageFilterAccessor.GetImageAdjustments(fSpace);    Histogram histogram = fImageFilterAccessor.GetImageHistogram(fSpace);    int histoSize = histogram.GetSize();    int newHistoSize = histoSize;    fFactor = 1;    if (newHistoSize > 300) {      fFactor = (float) newHistoSize / 300f;      int intFactor = (int) fFactor;      if (fFactor > intFactor) {        fFactor = intFactor + 1;      }      newHistoSize = (int) (histoSize / fFactor);      if (histoSize % (int) fFactor != 0) {        newHistoSize++;      }    }    Histogram newHisto = histogram.GetContractedCopy(newHistoSize);    newHisto.ScaleTo(255);    fHistoSlider.SetHistogram(newHisto);    fFactor = 1; // 	eventualy get rid of factor;    fHistoSlider.SetHighValue((int) (fImageAdjustments.GetAdjustedMaxValue() / fFactor));    fHistoSlider.SetLowValue((int) (fImageAdjustments.GetAdjustedMinValue() / fFactor));    SetLowHighLabels();  }  public void stateChanged(ChangeEvent e) {    if (e.getSource() == fBrightnessSlider) {      int value = fBrightnessSlider.getValue();      float brightness = (float) ((float) value / (float) kSliderScale) * 2;      fImageAdjustments.SetBrightness(brightness);      SetLowHighLabels();      if (!fBrightnessSlider.getValueIsAdjusting()) {        fImageController.ImageAdjustmentsChanged(fSpace);      }    } else if (e.getSource() == fContrastSlider) {      int value = fContrastSlider.getValue();      float contrast = (float) ((float) value / (float) kSliderScale) * 2;      fImageAdjustments.SetContrast(contrast);      SetLowHighLabels();      if (!fContrastSlider.getValueIsAdjusting()) {        fImageController.ImageAdjustmentsChanged(fSpace);      }    }  }  public void actionPerformed(ActionEvent e) {    if (e.getSource() == fHistoSlider) {      fImageAdjustments.SetAdjustedMaxValue((int) (fHistoSlider.GetHighValue() * fFactor));      fImageAdjustments.SetAdjustedMinValue((int) (fHistoSlider.GetLowValue() * fFactor));      SetLowHighLabels();      if (!fHistoSlider.IsAdjusting()) {        fImageController.ImageAdjustmentsChanged(fSpace);      }    }  }  public void SpaceSelected(ImageSpaceSelector.SelectEvent event) {    if (event.GetSelected()) {      fSpace = event.GetSpaceID();      SetUpFilterData();      pack();    }  }  private void SetLowHighLabels() {    fLowLabel.setText(Integer.toString(fImageAdjustments.GetAdjustedMinValue()));    fHighLabel.setText(Integer.toString(fImageAdjustments.GetAdjustedMaxValue()));    Container parent = fLowLabel.getParent();    parent.invalidate();    parent.validate();  }}