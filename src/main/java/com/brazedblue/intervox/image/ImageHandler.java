package com.brazedblue.intervox.image;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.dicom.*;import com.brazedblue.intervox.display.ProgressBroadcaster;import com.brazedblue.intervox.file.*;import com.brazedblue.intervox.main.NSMainActor;import com.brazedblue.intervox.tracker.TrackerSettingsAccess;import com.brazedblue.intervox.util.*;import java.awt.*;import java.awt.image.*;import java.io.*;import java.util.*;public class ImageHandler /* implements anInterface */ {  //  	static private final String[] kDicomSuffixes = { ".dcm"};  //	static private final FileSuffixFilter kDicomFileFilter = new FileSuffixFilter(kDicomSuffixes);  private static final String kJPEGSuffix = ".jpg";  private static final FileSuffixFilter kJPEGFileFilter = new FileSuffixFilter(kJPEGSuffix);  public ImageHandler() {}  public static PatientData ImportJPEGFiles(      Frame frame, ProgressBroadcaster broadcaster, Component comp) {    PatientData data = null;    File file = FileHandler.GetDirectory(frame, "Select an JPEG file", kJPEGFileFilter);    System.gc();    if (file != null) {      data = new PatientData();      //		data.AddListener(listener);      AWTImageReceiver receiver = data.GetAWTImageReceiver();      receiver.SetSliceThickness(8);      String directory = (file.isDirectory() ? file.getPath() : file.getParent());      String[] fileList = file.list(kJPEGFileFilter);      JPEGFileLoaderThread thread =          new JPEGFileLoaderThread(directory, fileList, broadcaster, receiver, comp);      broadcaster.Start(          "Loading jpeg images",          0,          fileList.length - 1); // this affects every listener added before next      // event loop      thread.start();    }    return data;  }  /*	static public boolean ImportDicomImages(Frame frame, ProgressBroadcaster progress)  {  	return ImportDicomImages(frame, progress, null);  } */  public static boolean ImportDicomImages(      Frame frame, ProgressBroadcaster progress, PatientData data) {    boolean notCancelled = false;    DicomDataDictionary.CreateFromJarResource(NSMainActor.kDicomDictionaryJarfile);    File file = FileHandler.GetFile(frame, "Select an image file", null);    if (file != null) {      String[] choices = {"100%", "50%", "25%", "20%"};      String result =          NeuroSynchUtil.GetUserInput(              "Import Image Resolution", "Select resolution", choices, choices[0]);      if (result != null) {        result = result.substring(0, result.length() - 1);        int resolution = 1;        try {          int resolutionPercent = Integer.valueOf(result).intValue();          resolution = 100 / resolutionPercent;        } catch (NumberFormatException e) {          NeuroSynchUtil.ErrorMessage(              "Program Error ImageHandler.ImportDicomImages", NeuroSynchUtil.kNoDlog);        }        DicomSeriesReceiver receiver = data.GetDicomImageReceiver();        FileSuffixFilter filter = new FileSuffixFilter();        if (!file.isDirectory()) {          // get selected suffix          String fileName = file.getName();          String suffix = FileSuffixFilter.GetSuffix(fileName);          filter.AddSuffix(suffix);          // use directory for file          file = file.getParentFile();        }        String directory = file.getPath();        directory = directory.concat(File.separator);        /*     if (file.isDirectory())        {            directory = file.getPath();        }        else        {            directory = file.getParent();            String fileName = file.getName();            String suffix = FileSuffixFilter.GetSuffix(fileName);            if (suffix != null && suffix.length() > 0)            {                String[] suffixes = new String[1];                suffixes[0] = suffix;               filter = new FileSuffixFilter(suffixes);            }        } */        String[] fileList = file.list(filter);        DicomFileLoaderThread thread =            new DicomFileLoaderThread(directory, fileList, progress, receiver, resolution);        progress.Start(            "Loading dicom images",            0,            fileList.length - 1); // this affects every listener added before next        // event loop        thread.start();        notCancelled = true;      }    }    return notCancelled;  }  public static Image GetLoadedJpegImage(String filename, MediaTracker tracker) {    Image img = Toolkit.getDefaultToolkit().getImage(filename);    int id = filename.hashCode();    tracker.addImage(img, id);    try {      tracker.waitForID(id);    } catch (InterruptedException e) {      NeuroSynchUtil.ErrorMessage(          "Couldn't get image- " + filename + ", because " + e.getMessage(),          NeuroSynchUtil.kNoDlog);    }    tracker.removeImage(img);    return img;    /*    		int imageWidth = img.getWidth(null);    		int imageHeight = img.getHeight(null);    		int[] pixels = new int[imageWidth * imageHeight];    		byte[] bytePixels = new byte[imageWidth * imageHeight];    	 	PixelGrabber pg = new PixelGrabber(img, 0, 0, imageWidth, imageHeight, pixels, 0, imageWidth);    	 	try {    	 	    pg.grabPixels();    	 	} catch (InterruptedException e) {    	 	    NeuroSynchUtil.ErrorMessage("interrupted waiting for pixels!", false);    	 	    return null;    	 	}    	 	if ((pg.getStatus() & ImageObserver.ABORT) != 0) {    	 	    NeuroSynchUtil.ErrorMessage("image fetch aborted or errored", false);    	 	    return null;    	 	}    	 	for (int i = 0; i < pixels.length; i++)    		{    			int pixel = pixels[i];    			bytePixels[i] = (byte)(pixel & 0xFF);    	 	}    		return PixelData.NewDataInstance(imageWidth, imageHeight, bytePixels);    */ }  public static DicomImageDataSet GetDicomDataSet(String filename, DicomDataSetInputStream stream)      throws IOException {    DicomImageDataSet dataSet = null;    if (filename != null) {      try {        FileInputStream inputStream = new FileInputStream(filename);        dataSet = new DicomImageDataSet();        try {          stream.ReadStream(inputStream);          if (!stream.ValidateDicomFile()) {            throw new IOException("Invalid dicom header");          }          dataSet.Read(stream);          stream.close();        } catch (IOException e2) {          NeuroSynchUtil.ErrorMessage(              "Error reading the image file. " + filename + e2.getMessage(),              NeuroSynchUtil.kShowDlog);          dataSet = null;          //					throw e2;        }      } catch (FileNotFoundException e1) {        NeuroSynchUtil.ErrorMessage(            "The image file, \"" + filename + "\" couldn't be found", NeuroSynchUtil.kShowDlog);      }    }    return dataSet;  }  public static void SaveSeries(Frame frame, PatientData data) {    File file = FileHandler.GetSaveFile(frame, "Save series as");    if (file != null) {      try {        data.WriteFile(file);      } catch (IOException e) {        NeuroSynchUtil.ErrorMessage(            "Unable to save file because " + e.getMessage(), NeuroSynchUtil.kShowDlog);      }    }  }  public static PatientData ReadSeries(      Frame frame, ProgressBroadcaster broadcaster, TrackerSettingsAccess trackerSettings) {    PatientData result = null;    System.gc();    File file = FileHandler.GetFile(frame, "Choose a series file", null);    if (file != null) {      try {        result = PatientData.ReadFile(file, broadcaster, trackerSettings);      } catch (IOException e) {        String message =            "Unable to read file: "                + (e.getMessage() != null ? e.getMessage() : "(Probably wrong type of file)");        NeuroSynchUtil.ErrorMessage(message, NeuroSynchUtil.kShowDlog);      }    }    return result;  }}