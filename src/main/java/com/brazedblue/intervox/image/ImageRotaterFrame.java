package com.brazedblue.intervox.image;import javax.swing.*;import javax.swing.border.*;import java.awt.event.*;import java.awt.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.display.*;import com.brazedblue.intervox.util.NeuroSynchUtil;class ImageRotaterFrame extends NSDialogFrame implements ActionListener, ProgressBroadcaster, ImageSpaceSelector.ImageSpaceSelectListener {  	OrthoImageSetController 	fImageController;	ImageSeriesPanel 			fImagePanel;		AbstractButton				fRotationNoAction;	AbstractButton				fFromSagittal;	AbstractButton				fFromAxial;	AbstractButton				fFlipNoAction;	AbstractButton				fLeftRight;	AbstractButton				fFrontBack;	AbstractButton				fTopBottom;//	Image3DField				fImageSeries;	ImageSpacesAccessor			fImagesSpaceAccessor;	SingleSpaceID				fSpace;		AbstractButton				fApply;	AbstractButton				fClose;	JPanel						fChoicesPanel;	ProgressPanel				fProgressPanel = new ProgressPanel(false);	ImageSpaceSelector 			fSpaceSelector;	    public ImageRotaterFrame(Frame frame, OrthoImageSetController imageController, ImageSeriesPanel imagePanel) 	{		super(frame, "Orientation", true, true);		setDefaultCloseOperation(DISPOSE_ON_CLOSE);		fImagePanel = imagePanel; 		fImageController = imageController;		fImagesSpaceAccessor = imageController.GetImageSpacesAccessor();				Container contentPane = getContentPane();		contentPane.setLayout(new GridLayout(2,1));		fChoicesPanel = new JPanel(new GridLayout(1, 2));		contentPane.add(fChoicesPanel);		JPanel perspectivePanel = new JPanel(false);		fChoicesPanel.add(perspectivePanel);				perspectivePanel.setLayout(new GridLayout(4, 1));				SoftBevelBorder bevelBorder = new SoftBevelBorder(BevelBorder.RAISED);		TitledBorder border = new TitledBorder(bevelBorder, "Rotate");		perspectivePanel.setBorder(border);				ButtonGroup group = new ButtonGroup();		fRotationNoAction =  new JRadioButton("No Action"); 		group.add(fRotationNoAction);		perspectivePanel.add(fRotationNoAction);		fRotationNoAction.setSelected(true);				fFromAxial = new JRadioButton("Axial To Coronal"); 		group.add(fFromAxial);		perspectivePanel.add(fFromAxial);				fFromSagittal = new JRadioButton("Sagittal To Coronal"); 		group.add(fFromSagittal);		perspectivePanel.add(fFromSagittal);				JPanel orientationPanel = new JPanel(false);		fChoicesPanel.add(orientationPanel);		orientationPanel.setLayout(new GridLayout(4, 1));				border = new TitledBorder(bevelBorder, "Flip");		orientationPanel.setBorder(border);				group = new ButtonGroup();		fFlipNoAction =  new JRadioButton("No Action"); 		group.add(fFlipNoAction);		orientationPanel.add(fFlipNoAction);		fFlipNoAction.setSelected(true);				fLeftRight = new JRadioButton("Left <-> Right"); 		group.add(fLeftRight);		orientationPanel.add(fLeftRight);				fFrontBack = new JRadioButton("Front <-> Back"); 		group.add(fFrontBack);		orientationPanel.add(fFrontBack);  		fTopBottom = new JRadioButton("Top <-> Bottom"); 		group.add(fTopBottom);		orientationPanel.add(fTopBottom);				JPanel buttonsPanel = new JPanel(new FlowLayout());		contentPane.add(buttonsPanel);/*				fRevert = new JButton("Revert");		fRevert.addActionListener(this);		buttonsPanel.add(fRevert);*/				fSpaceSelector = new ImageSpaceSelector();		fSpaceSelector.SetImageSpacesAccessor(fImagesSpaceAccessor);		fSpaceSelector.AddSpaceSelectListener(this);		buttonsPanel.add(fSpaceSelector.GetControl());		fApply = new JButton("Apply");		fApply.addActionListener(this);		buttonsPanel.add(fApply);  		fClose = new JButton("Close");		fClose.addActionListener(this);		buttonsPanel.add(fClose);	}		private Image3DField GetImage3DField()	{		return fImagesSpaceAccessor.GetImage3DField(fSpace);	}		public void SpaceSelected(ImageSpaceSelector.SelectEvent event)	{		if (event.GetSelected())		{			fSpace = event.GetSpaceID();		}	}		private void ApplyRotations()	{		try		{			Image3DField imageField = GetImage3DField();			int fromAxis = OrthoImageSetController.kCoronal;			if (fFromAxial.isSelected())			{				fromAxis = OrthoImageSetController.kAxial;			}			else if (fFromSagittal.isSelected())			{				fromAxis = OrthoImageSetController.kSagittal;			}						if (fromAxis != OrthoImageSetController.kCoronal)			{				imageField.RotateToCoronal(fromAxis, this);			}						int flipAxis = -1;			if (fTopBottom.isSelected())			{				flipAxis = OrthoImageSetController.kAxial;			}			else if (fLeftRight.isSelected())			{				flipAxis = OrthoImageSetController.kSagittal;			}			else if (fFrontBack.isSelected())			{				flipAxis = OrthoImageSetController.kCoronal;			}						if (flipAxis != -1)			{				imageField.Flip(flipAxis, this);						}						Finish(true);		}		catch(ProgressCancelledException e)		{			Finish(false);		}		fImagePanel.SetupImageViews();	}		public void actionPerformed(ActionEvent e)	{		if (e.getSource() == fClose)		{			dispose();		}		else if (e.getSource() == fApply)		{			Thread applyRotations = new Thread() {                public void run() {                   	ApplyRotations();                }            };           		   	applyRotations.start();		}/*		else if (e.getSource() == fRevert)		{			fImageSeries.Set(fOriginalSeries);			fImagePanel.SetupImageViews();		} */	}	 	public void Start(String message, int low, int high)	{		Container contentPanel = getContentPane();		contentPanel.remove(fChoicesPanel);		contentPanel.add(fProgressPanel, 0);		fProgressPanel.Start(message, low, high);		contentPanel.validate();		contentPanel.repaint();							NeuroSynchUtil.MyYield();	}		public void UpdateCurrentValue(String note, int value) throws ProgressCancelledException	{		fProgressPanel.UpdateCurrentValue(note, value);							NeuroSynchUtil.MyYield();	}		public void Finish(boolean successful)	{		Container contentPanel = getContentPane();		contentPanel.remove(fProgressPanel);		contentPanel.add(fChoicesPanel, 0);		fFlipNoAction.setSelected(true);		fRotationNoAction.setSelected(true);		contentPanel.invalidate();		contentPanel.validate();		contentPanel.repaint();	}		public void dispose() 	{		fImagesSpaceAccessor = null;		if (fSpaceSelector != null)		{			fSpaceSelector.RemoveSpaceSelectListener(this);			fSpaceSelector.Dispose();		}		fSpaceSelector = null;				super.dispose();	}	}