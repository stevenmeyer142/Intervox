package com.brazedblue.intervox.image;import javax.swing.*;import javax.swing.border.LineBorder;import javax.swing.border.Border;import java.awt.event.*;import java.awt.*;import java.util.*;import java.io.*;import javax.swing.event.*;import com.brazedblue.intervox.display.*;import com.brazedblue.intervox.file.FileHandler;import com.brazedblue.intervox.util.*;import com.brazedblue.intervox.main.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.registration.*;  // displays a series of images  public class ImageSeriesPanel extends JPanel implements ActionListener {	ImagesControlDisplay		fImagesControls;		JInternalFrame				fInternalFrame;	OrthoImageSetController		f3DImageController;	PatientData					fData;		ImageSeriesPanelLayoutManager		fLayoutManager = new ImageSeriesPanelLayoutManager();	ImageSeriesPanelProgressBroadcaster	fBroadcaster;	//	private ImageSeriesPanelImageCopier	fImageCopier = new ImageSeriesPanelImageCopier();	static boolean 		fDebugging = Debug.fgDebugging;		static final public String 	kSaveSeriesStr = "Save Image Series...";	static final private String kSaveSlicesDataStr = "Save Slices Data...";	static final private String kAddDicomSeriesStr = "Add Dicom Series...";	static final private String kSelectConfigurationStr = "Select Configuration...";	static final private String kDesignateRegionsDataStr = "3D Segmentation...";	static final public String 	kBrightnessImageStr = "Brightness/Contrast...";	static final public String 	kOrientationImageStr = "Image Orientation...";	static final public String 	kCopyStr = "Copy";	static private final Border		kCopyFocusBorder = new LineBorder(Color.yellow, 2);		 	public ImageSeriesPanel(JInternalFrame internalFrame, TrackerController tracker) 		{                setOpaque(true);		setLayout(null);		f3DImageController = new OrthoImageSetController(this);		f3DImageController.SetTracker(tracker);		internalFrame.addInternalFrameListener(new ImageSeriesPanelInternalFrameAdapter());					// setup views		fInternalFrame = internalFrame;				fImagesControls = new ImagesControlDisplay(this, tracker, f3DImageController);		add(fImagesControls);		fImagesControls.setVisible(false);						// setup menus		JMenuBar frameMenuBar = new JMenuBar();				JMenu fileMenu = new JMenu("File");		frameMenuBar.add(fileMenu);				JMenuItem saveItem = new JMenuItem(kSaveSeriesStr);		fileMenu.add(saveItem);		saveItem.addActionListener(this);				fileMenu.addSeparator();				JMenuItem addItem = new JMenuItem(kAddDicomSeriesStr);		fileMenu.add(addItem);		addItem.addActionListener(this);		fileMenu.addSeparator();				JMenuItem selectConfig = new JMenuItem(kSelectConfigurationStr);		fileMenu.add(selectConfig);		selectConfig.addActionListener(this);				if (Debug.fgDebugging){		JMenuItem saveSlicesDataItem = new JMenuItem(kSaveSlicesDataStr);		fileMenu.add(saveSlicesDataItem);		saveSlicesDataItem.addActionListener(this);}		JMenu imageMenu = new JMenu("Image");		frameMenuBar.add(imageMenu);				JMenuItem adjustItem = new JMenuItem(kBrightnessImageStr);		imageMenu.add(adjustItem);		adjustItem.addActionListener(this);				JMenuItem orientItem = new JMenuItem(kOrientationImageStr);		imageMenu.add(orientItem);		orientItem.addActionListener(this);				JMenuItem designateRegionsDataItem = new JMenuItem(kDesignateRegionsDataStr);		imageMenu.add(designateRegionsDataItem);		designateRegionsDataItem.addActionListener(this);/*		JMenu editMenu = new JMenu("Edit");		frameMenuBar.add(editMenu);				JMenuItem copyItem = new JMenuItem(kCopyStr);		editMenu.add(copyItem);		copyItem.setVisible(true);		copyItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.CTRL_MASK));		copyItem.setEnabled(false);		fImageCopier.SetMenuItem(copyItem); */		fInternalFrame.setJMenuBar(frameMenuBar);//		setDoubleBuffered(true);				fBroadcaster = new ImageSeriesPanelProgressBroadcaster();   }/*      private LayoutModel GetLayout()   {   		return (fData != null) ? fData.GetCurrentLayout() : null;   } */      public void DisposeFrame()   {		JInternalFrame internalFrame = GetInternalFrame();				try 		{			internalFrame.setClosed(true);		}		catch (java.beans.PropertyVetoException e)		{		}		internalFrame.dispose();      }      	public JInternalFrame GetInternalFrame()   	{   		return fInternalFrame;   	}		private void Dispose()	{	 	if (f3DImageController != null)		{			f3DImageController.Dispose();			f3DImageController = null;		}		if (fImagesControls != null)		{			fImagesControls.Dispose();			fImagesControls = null;		}				if (fLayoutManager != null)		{			fLayoutManager.Dispose();			fLayoutManager = null;		}		/*		if (fImageCopier != null)		{			fImageCopier.Dispose();			fImageCopier = null;		} */			 	if (fData != null)		{			fData.Dispose();			fData = null;		} 	}      	private void AddDicomSeries()   	{   		ImageHandler.ImportDicomImages(NeuroSynchUtil.GetFrame(this), GetProgressBroadcaster(), fData);      	}      	public ProgressBroadcaster GetProgressBroadcaster()   	{   		return fBroadcaster;   	}      /*   		void SetupImageViews()	{		f3DImageController.ClearImageViews();//		fImageCopier.Clear();				for (int i = 0; fImageViews != null && i < fImageViews.length; i++)		{			if (fImageViews[i] != null)			{				remove(fImageViews[i].GetComponent()) ;				fImageViews[i].Dispose();			}		}				fImageViews = null;		LayoutModel layout = fLayoutManager.GetLayout();		if (layout != null)		{			Vector viewList = new Vector();			layout.CreateViews(this, viewList);			fImageViews = new NSImageView[viewList.size()];						for (int i = 0; i < viewList.size(); i++)			{				NSImageView view = (NSImageView)viewList.elementAt(i);				fImageViews[i] = view;				fImageViews[i].SetData(fData);				f3DImageController.AddImageView(view);//				fImageCopier.AddImageCopier(view.GetImageCopier());			}		}				f3DImageController.UpdateSeriesViews();		revalidate();	}*/	public void SetData(PatientData data)	{		fData = data;	}	private void ShowDesigRegionWindow()	{		RegionSelectorFrame regionSelectorFrame = new RegionSelectorFrame(fData);						fInternalFrame.getParent().add(regionSelectorFrame);		Point location = fInternalFrame.getLocation();		location.x += 20;		location.y += 20;				regionSelectorFrame.setLocation(location);		regionSelectorFrame.setLayer(JLayeredPane.PALETTE_LAYER);		regionSelectorFrame.pack();		regionSelectorFrame.show();	}	/*	public void ActivateCopyItem(MenuItem item, boolean activate)	{		if (fImageCopier != null)		{			fImageCopier.SetMenuItem(activate ? item : null);		}	}*/		public void actionPerformed(ActionEvent e)	{		if (e.getActionCommand().equals(kSaveSeriesStr))		{			SaveSeriesToFile();		} 				else if (e.getActionCommand().equals(kAddDicomSeriesStr))		{			AddDicomSeries();		}		else if (e.getActionCommand().equals(kBrightnessImageStr))		{			ShowImageAdjusterWindow();					}		else if (e.getActionCommand().equals(kOrientationImageStr))		{			ShowOrientationWindow();					}		else if (e.getActionCommand().equals(kDesignateRegionsDataStr))		{			ShowDesigRegionWindow();					}		else if (e.getActionCommand().equals(kSaveSlicesDataStr))		{			SaveSlicesData();					}		else if (e.getActionCommand().equals(kSelectConfigurationStr))		{			if (fData != null)			{				fData.ChooseConfiguration();				if (fImagesControls != null)				{					fImagesControls.SetConfiguration(fData.GetConfiguration());				}								SetupImageViews();			}		}	}		public PatientData GetData()	{		return fData;	}		void SaveSeriesToFile()	{		PatientData data = GetData();				if (data != null)		{			ImageHandler.SaveSeries(NeuroSynchUtil.GetFrame(this), data);		} 	}	private void SetUpViewsWithData()	{		f3DImageController.SetData(fData);		fImagesControls.SetData(fData);				SetupImageViews();	}		private void SaveSlicesData()	{	if (Debug.fgDebugging)		{			File file = FileHandler.GetSaveFile(NeuroSynchUtil.GetFrame(this), "Save Slices as");						if (file != null)			{				DataOutputStream output = null;				try				{					output = new DataOutputStream(new FileOutputStream(file));										// need to get width and height					Image3DField imageField = fData.GetImage3DField(null);					PixelData pixData = imageField.PixelsAtCoord(0, OrthoImageSetController.kAxial);										RegionsOfInterest regions = fData.GetRegionsOfInterest(SingleSpaceID.GetDefaultVirtualSpaceID());										byte[] blankPixels = new byte[pixData.GetWidth() * pixData.GetHeight()];										output.writeInt(pixData.GetWidth());					output.writeInt(pixData.GetHeight());					int slices = imageField.MaxCoord(OrthoImageSetController.kAxial);					output.writeInt(slices);								for (int i = 0; i < slices; i++)					{						RegionSlice slice = regions.GetRegionSlice(i);						byte[] regionPixels = slice.GetRegionPixels();												if (regionPixels != null)						{							output.write(regionPixels, 0, regionPixels.length);						}						else						{							output.write(blankPixels, 0, blankPixels.length);						}					}					output.close();				}				catch (IOException e)				{					NeuroSynchUtil.ErrorMessage("Unable to save file because " + e.getMessage(), NeuroSynchUtil.kShowDlog);				}			}		} 	}public Dimension getPreferredSize()	{		if (fBroadcaster.fLoading)		{			return getSize();		}		else		{			Dimension result = new Dimension(0, 0);			LayoutModel layout = fLayoutManager.GetLayout();						if (layout != null)			{				Dimension layoutSize = layout.GetLayoutSize();				result.setSize(layoutSize);						}						if (false)			{				Font font = getFont();				if (font != null)				{					FontMetrics fontMetrics = getFontMetrics(font);										int controlsHeight = 40 * fontMetrics.getHeight();	//				fImagesControls.setPreferredSize(new Dimension(result.width, controlsHeight));					result.height += controlsHeight;				} 			}			else			{				Dimension controlsSize = fImagesControls.getPreferredSize();				result.height += controlsSize.height;			}			return result;		}	}	public void doLayout() 	{		if (fBroadcaster.fLoading)		{			Dimension size = getSize();			Dimension prefSize = fBroadcaster.fProgressPanel.getPreferredSize();						fBroadcaster.fProgressPanel.setBounds(0, 0, size.width, prefSize.height);		}		else		{			Dimension imageViewsExtent = new Dimension(0, 0);						LayoutModel layout = fLayoutManager.GetLayout();						if (layout != null)			{				layout.Layout(this, imageViewsExtent);						}			Dimension size = getSize();			fImagesControls.setBounds(0, imageViewsExtent.height, size.width, size.height - imageViewsExtent.height);		}    }	void SetupImageViews()	{		fLayoutManager.SetLayoutSelections(fData.GetLayoutSelections());		fLayoutManager.SetupImageViews();	}	private void ShowImageAdjusterWindow()	{		ImageAdjusterFrame adjusterFrame = new ImageAdjusterFrame(f3DImageController,												fData.GetImageFilterAccessor(), fData.GetImageSpacesAccessor());				fInternalFrame.getParent().add(adjusterFrame);		Point location = fInternalFrame.getLocation();		location.x += 20;		location.y += 20;				adjusterFrame.setLocation(location);				adjusterFrame.pack();		adjusterFrame.show();                                try                 {                     adjusterFrame.setSelected(true);                 } catch (java.beans.PropertyVetoException e2)                {                 } 	}			private void ShowOrientationWindow()	{		ImageRotaterFrame orientationFrame = new ImageRotaterFrame(				NeuroSynchUtil.GetFrame(this), f3DImageController, this);						fInternalFrame.getParent().add(orientationFrame);		Point location = fInternalFrame.getLocation();		location.x += 20;		location.y += 20;				orientationFrame.setLocation(location);				orientationFrame.pack();		orientationFrame.show();	}					//	trying to free up references for garbage collection	class ImageSeriesPanelInternalFrameAdapter extends InternalFrameAdapter 	{		ImageSeriesPanelInternalFrameAdapter() {}				 public void internalFrameClosed(InternalFrameEvent e) 		{			Dispose();		}	}		private class ImageSeriesPanelProgressBroadcaster implements ProgressBroadcaster					{		ProgressPanel		fProgressPanel = new ProgressPanel();		boolean				fLoading = false;		int 				fCurrentValue = 0;	//	for efficiency				ImageSeriesPanelProgressBroadcaster()		{			add(fProgressPanel);			fProgressPanel.setVisible(false);		}				public void Start(String message, int low, int high)		{			fLoading = true;			fCurrentValue = low;			fProgressPanel.Start(message, low, high);			fProgressPanel.setVisible(true);						fLayoutManager.HideImageViews();						fImagesControls.setVisible(false);						Dimension progressPrefSize = fProgressPanel.getPreferredSize();			Dimension mySize = getSize();						fProgressPanel.setBounds(0, 0, Math.min(progressPrefSize.width, mySize.width), progressPrefSize.height);						revalidate();			repaint();		}		public void UpdateCurrentValue(String note, int value) throws ProgressCancelledException		{			if (value != fCurrentValue)			{				fCurrentValue = value;				fProgressPanel.UpdateCurrentValue(note, value);				fProgressPanel.validate();	//	Maybe I should move this to ProgressPanel			}				}				public void Finish(boolean successful)		{			fLoading = false;			fProgressPanel.setVisible(false);						if (successful)			{				SetUpViewsWithData();						fImagesControls.setVisible(true);				if (fInternalFrame != null)				{					try					{						fInternalFrame.setSelected(true);					}					catch (java.beans.PropertyVetoException e)					{					}				}								revalidate();			}			else			{				DisposeFrame();			}		}	}	private class ImageSeriesPanelLayoutManager extends ImageSeriesLayoutManager	{				private ImageSeriesPanelLayoutManager()		{			super(ImageSeriesPanel.this);		}		private void HideImageViews()		{			for (int i = 0; fImageViews != null && i < fImageViews.length; i++)			{				NSImageView view = fImageViews[i];					if (view != null)				{					view.GetComponent().setVisible(false);				}					}		}		public void SetupImageViews()		{			f3DImageController.ClearImageViews();						super.SetupImageViews();							f3DImageController.ForceUpdate();		}			protected void PostProcessView(NSImageView view)		{			view.SetData(fData);			f3DImageController.AddImageView(view);			super.PostProcessView(view);		}	}	/*		static private class ImageSeriesPanelLayoutManager implements LayoutListener	{		private NSImageView[]				fImageViews = null;		private LayoutSelectionsModel		fLayoutSelections;		private LayoutModel					fCurrentLayout;				private ImageSeriesPanelLayoutManager()		{				}				private void SetLayoutSelections(LayoutSelectionsModel layoutSelections)		{			if (fLayoutSelections != null)			{				fLayoutSelections.RemoveLayoutListener(this);			}						fLayoutSelections = layoutSelections;			fLayoutSelections.AddLayoutListener(this);						UpdateCurrentLayout();		}				private void UpdateCurrentLayout()		{			LayoutModel newLayout = fLayoutSelections.GetSelectedLayout();						if (newLayout != fCurrentLayout)			{				if (fCurrentLayout != null)				{					fCurrentLayout.RemoveLayoutListener(this);					fCurrentLayout.DisposeViews();				}								fCurrentLayout = newLayout;								if (fCurrentLayout != null)				{					fCurrentLayout.AddLayoutListener(this);				}			}					}				public void ProcessLayoutEvent(LayoutEvent event)		{			SetupImageViews();			UpdateCurrentLayout();		}				private void Dispose()		{			if (fLayoutSelections != null)			{				fLayoutSelections.RemoveLayoutListener(this);				fLayoutSelections = null;			}			if (fCurrentLayout != null)			{				fCurrentLayout.RemoveLayoutListener(this);				fCurrentLayout = null;			}		}				void SetupImageViews(OrthoImageSetController imageController)		{			if (imageController != null)			{				imageController.ClearImageViews();			}						for (int i = 0; fImageViews != null && i < fImageViews.length; i++)			{				if (fImageViews[i] != null)				{					remove(fImageViews[i].GetComponent()) ;					fImageViews[i].Dispose();				}			}						fImageViews = null;			LayoutModel layout = GetLayout();			if (layout != null)			{				Vector viewList = new Vector();				layout.CreateViews(this, viewList);				fImageViews = new NSImageView[viewList.size()];								for (int i = 0; i < viewList.size(); i++)				{					NSImageView view = (NSImageView)viewList.elementAt(i);					fImageViews[i] = view;					fImageViews[i].SetData(fData);					f3DImageController.AddImageView(view);					//				fImageCopier.AddImageCopier(view.GetImageCopier());				}			}									f3DImageController.UpdateSeriesViews();			revalidate();		}				private LayoutModel GetLayout()		{			return fLayoutSelections != null ? fLayoutSelections.GetSelectedLayout() : null;		}	}*/	}