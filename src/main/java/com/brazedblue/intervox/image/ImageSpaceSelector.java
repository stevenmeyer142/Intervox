package com.brazedblue.intervox.image;import java.awt.*;import java.awt.event.*;import java.util.*;import javax.swing.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.util.Debug;public class ImageSpaceSelector implements DataModelListener  {  	private Vector 								fSpaceListeners = new Vector(); 	private ImageSpacesAccessor 				fSpacesAccessor = null;	private JComboBox							fSpacesComboBox = null;	private ImageSpaceSelectorSpaceNameCouple[]	fSpacesList;	private boolean								fShowsLocalizerSpace = false;	private Vector								fExcludeSpaces = new Vector();		private Hashtable							fActionItems = new Hashtable();	    public ImageSpaceSelector() 	{		fSpacesComboBox = new JComboBox();				ItemListener spacesListener = new ItemListener()		{   			public void itemStateChanged(ItemEvent e)			{				SingleSpaceID item = ((ImageSpaceSelectorSpaceNameCouple)e.getItem()).fSpaceID;				if (e.getStateChange() == ItemEvent.SELECTED)				{					FireSpaceSelectedAction(item, true);				}				else if (e.getStateChange() == ItemEvent.DESELECTED)				{					FireSpaceSelectedAction(item, false);				}			}		};				fSpacesComboBox.addItemListener(spacesListener);		    }		public void ShowAllSpaces()	{		fExcludeSpaces.removeAllElements();	}		public void SetShowsLocalizerSpace(boolean shows)	{		fShowsLocalizerSpace = shows;	}		public void Dispose()	{		fSpacesAccessor = null;		fSpaceListeners = null;		fSpacesComboBox = null;		fSpacesList = null;	}		public JComponent GetControl()	{		return fSpacesComboBox;	}		public void AddSpaceSelectListener(ImageSpaceSelectListener l)	{		if (!fSpaceListeners.contains(l))		{ 			fSpaceListeners.addElement(l);		}	}		public void ShowSpace(SingleSpaceID spaceID, boolean show)	{		if (HasSpace(spaceID))		{			if (show)			{				if (fExcludeSpaces.contains(spaceID))				{					fExcludeSpaces.removeElement(spaceID);					UpdateSpacesList();				}			}			else 			{				if (!fExcludeSpaces.contains(spaceID))				{					fExcludeSpaces.addElement(spaceID);					UpdateSpacesList();				}			}		}		else if (Debug.fgDebugging)		{			Debug.PrintStackTrace("Space not found" + spaceID);		}	}		private boolean HasSpace(SingleSpaceID spaceID)	{		boolean result = fSpacesAccessor.HasImageSpace(spaceID);		if (!result && fShowsLocalizerSpace)		{			result = fSpacesAccessor.HasLocalizerSpace(spaceID);		}				return result;	}		public void SetImageSpacesAccessor(ImageSpacesAccessor spaceAccessor)	{		if (fSpacesAccessor != null)		{			fSpacesAccessor.GetDataModel().RemoveListener(this);		}					fSpacesAccessor = spaceAccessor;				if (fSpacesAccessor != null)		{			fSpacesAccessor.GetDataModel().AddListener(this);			UpdateSpacesList();		}		}		public void SetSelectedSpace(SingleSpaceID spaceID)	{		if (fSpacesList != null)		{			for (int i = 0; i < fSpacesList.length; i++)			{				if (fSpacesList[i].fSpaceID.equals(spaceID))				{					fSpacesComboBox.setSelectedIndex(i);					break;				}			}		}	}	public void RemoveSpaceSelectListener(ImageSpaceSelectListener l)	{ 		fSpaceListeners.removeElement(l);	}		private void FireSpaceSelectedAction(SingleSpaceID space, boolean selected)	{		Enumeration elements = fSpaceListeners.elements();		SelectEvent event = new SelectEvent(this, space, selected);		while (elements.hasMoreElements())		{			ImageSpaceSelectListener listener = (ImageSpaceSelectListener)elements.nextElement();						listener.SpaceSelected(event);					}	}		public void DataModelChanged(DataModel model, DataChangedEvent event)	{		if ((fSpacesAccessor != null) && (model == fSpacesAccessor.GetDataModel()))		{			UpdateSpacesList();		}	}		public SingleSpaceID GetSelectedSpace()	{		int  index = fSpacesComboBox.getSelectedIndex();		SingleSpaceID result = null;				if (fSpacesList != null && index >= 0 && index < fSpacesList.length)		{			result = fSpacesList[index].fSpaceID;		}				return result;	}	public String toString()	{		return paramString();	}		public String paramString()	{		String result = super.toString();				result += "(fExcludeSpaces) " + fExcludeSpaces.toString() + ", (fShowsLocalizerSpace) " + fShowsLocalizerSpace +			  ", (fSpacesAccessor) " + fSpacesAccessor.toString();				result +="\r(fSpacesList) "  + fSpacesList;				if (fSpacesList != null)		{			result += ", (length) " + fSpacesList.length;						for (int i = 0; i < fSpacesList.length; i++)			{				result += "\r" + (fSpacesList[i] != null ? fSpacesList[i].paramString() : "null");			}		}				return result;	}	private void UpdateSpacesList()	{		SingleSpaceID savedSelectedSpace = GetSelectedSpace();			SingleSpaceID[] spaces = fSpacesAccessor.GetImageSpaces();				if (fShowsLocalizerSpace)		{			SingleSpaceID[] localizerSpaces = fSpacesAccessor.GetLocalizerSpaces();						if (localizerSpaces.length > 0)			{						//	could move this to static SingleSpaceID.ConcatArrays()				SingleSpaceID[] allSpaces = new SingleSpaceID[spaces.length + localizerSpaces.length];								System.arraycopy(spaces, 0, allSpaces, 0, spaces.length);				System.arraycopy(localizerSpaces, 0, allSpaces, spaces.length, localizerSpaces.length);								spaces = allSpaces;			}		}				if (fExcludeSpaces.size() > 0)		{			SingleSpaceID[] allSpaces = spaces;			spaces = new SingleSpaceID[spaces.length - fExcludeSpaces.size()];			int j = 0;			for (int i = 0; i < allSpaces.length && j < spaces.length; i++)			{				if (!fExcludeSpaces.contains(allSpaces[i]))				{					spaces[j++] = allSpaces[i];				}			}		}					String[] spacesNames = fSpacesAccessor.GetSpaceNames(spaces);				fSpacesList = new ImageSpaceSelectorSpaceNameCouple[spaces.length];				for (int i = 0; i < fSpacesList.length; i++)		{			fSpacesList[i] = new ImageSpaceSelectorSpaceNameCouple(spaces[i], spacesNames[i]);		}				fSpacesComboBox.setModel(new DefaultComboBoxModel(fSpacesList));				SetSelectedSpace(savedSelectedSpace);	}		static private class ImageSpaceSelectorSpaceNameCouple	{		SingleSpaceID 	fSpaceID;		String 			fName;			ImageSpaceSelectorSpaceNameCouple(SingleSpaceID space, String name)		{			fSpaceID = space;			fName = name;				}				public String toString()		{			return fName;		}				public String paramString()		{			return super.toString() + ", (fName) " + fName + "\r(fSpaceID) " + fSpaceID.toString();		}	}		public interface ImageSpaceSelectListener  { 		public void SpaceSelected(SelectEvent event);	}		static public class SelectEvent	{		private ImageSpaceSelector 	fSpaceSelector;		private SingleSpaceID 		fSpaceID; 		private boolean 			fSelected;				private SelectEvent(ImageSpaceSelector spaceSelector, SingleSpaceID spaceID, boolean selected)		{			fSpaceSelector = spaceSelector;			fSpaceID = spaceID;			fSelected = selected;		}				public ImageSpaceSelector GetImageSpaceSelector()		{			return fSpaceSelector;		}				public SingleSpaceID GetSpaceID()		{			return fSpaceID;		}				public boolean GetSelected()		{			return fSelected;		}	}}