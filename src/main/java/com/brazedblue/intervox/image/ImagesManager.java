package com.brazedblue.intervox.image;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.dicom.*;import com.brazedblue.intervox.display.ProgressBroadcaster;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.registration.*;import com.brazedblue.intervox.util.Debug;import java.awt.Color;import java.awt.Image;import java.io.*;import java.util.*;public class ImagesManager extends DataModel    implements DicomSeriesReceiver, AWTImageReceiver, java.io.Serializable {  private Vector fImage3DData = new Vector();  private static Image3DData fgDummyImage3DData = new Image3DData(Image3DData.kDummySet);  private transient ImagesManagerSpacesAccessor fSpacesAccessor = new ImagesManagerSpacesAccessor();  private transient ImagesManagerImageFilterAccessor fImageFilterAccessor =      new ImagesManagerImageFilterAccessor();  static final long serialVersionUID = -4373213908067118962L;  public static final String kImage3DDataAdded = "ImagesManagerSpacesAccessor_SpaceAdded";  public ImagesManager() {}  public void FinishReceiving(ProgressBroadcaster broadcaster) throws IOException {    if (fImage3DData != null) // 	loaded successfully    {      Iterator iter = GetImage3DDataElements();      while (iter.hasNext()) {        Image3DData image3DData = (Image3DData) iter.next();        if (!image3DData.IsComplete()) {          image3DData.FinishReceiving(broadcaster);        }      }      fSpacesAccessor.PostChanged(          new DataChangedEvent(fSpacesAccessor, DataChangedEvent.LOADED, 0, kImage3DDataAdded));    }    this.PostChanged(        new DataChangedEvent(fSpacesAccessor, DataChangedEvent.LOADED, 0, kImage3DDataAdded));  }  public int SeriesAddedCount() {    int result = 0;    if (fImage3DData != null) {      Iterator iter = GetImage3DDataElements();      while (iter.hasNext()) {        Image3DData image3DData = (Image3DData) iter.next();        if (!image3DData.IsComplete()) {          result++;        }      }    }    return result;  }  public void SaveLargestSeriesOnly() {    if (fImage3DData != null) {      int lowCount = -1;      Iterator iter = GetImage3DDataElements();      Image3DData bigOne = null;      while (iter.hasNext()) {        Image3DData image3DData = (Image3DData) iter.next();        if (!image3DData.IsComplete()) {          int count = image3DData.GetSlicesCount();          if (count > lowCount) {            lowCount = count;            bigOne = image3DData;          }        }      }      iter = GetImage3DDataElements();      if (bigOne != null) {        while (iter.hasNext()) {          Image3DData image3DData = (Image3DData) iter.next();          if (!image3DData.IsComplete()) {            if (image3DData != bigOne) {              iter.remove();            }          }        }      }    }  }  public ImageFilterAccessor GetImageFilterAccessor() {    return fImageFilterAccessor;  }  public Image3DData GetImage3DData(SingleSpaceID spaceID) {    Iterator elements = GetImage3DDataElements();    Image3DData result = null;    while (elements.hasNext()) {      Image3DData set = (Image3DData) elements.next();      if (spaceID == null          || spaceID.equals(SingleSpaceID.GetDefaultVirtualSpaceID())          || spaceID.equals(set.GetSpaceID())) {        result = set;        break;      }    }    if (result == null) { // 	just a place holder to avoid checking for null      result = fgDummyImage3DData;    }    return result;  }  private void AddImage3DData(Image3DData image3DData) {    fImage3DData.addElement(image3DData);    if (Debug.fgDebugging && (image3DData.GetImage3DField() == null)) {      Debug.PrintStackTrace(image3DData.toString());    }  }  private boolean HasImage3DData(SingleSpaceID spaceID) {    return GetImage3DData(spaceID) != fgDummyImage3DData;  }  public Image3DField GetImage3DField(SingleSpaceID spaceID) {    Image3DData image3DData = GetImage3DData(spaceID);    if (Debug.fgDebugging && (image3DData.GetImage3DField() == null)) {      Debug.PrintStackTrace(image3DData.toString());    }    return image3DData.GetImage3DField();  }  private Iterator GetImage3DDataElements() {    return fImage3DData.iterator();  }  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {    s.defaultReadObject();    fSpacesAccessor = new ImagesManagerSpacesAccessor();    fImageFilterAccessor = new ImagesManagerImageFilterAccessor();  }  public boolean AddDataSet(DicomImageDataSet dataSet, int resolution) throws IOException {    Iterator iter = GetImage3DDataElements();    boolean added = false;    boolean first = !iter.hasNext();    while (iter.hasNext()) {      Image3DData image3DData = (Image3DData) iter.next();      DicomImageReceiver reciever = image3DData.GetDicomImageReceiver();      if (reciever != null && reciever.AddDataSet(dataSet, resolution)) {        added = true;        break;      }    }    if (!added) {      DicomImageReceiver reciever = NewDicomImage3DData();      added = reciever.AddDataSet(dataSet, resolution);    }    return added;  }  public AWTImageReceiver GetAWTImageReceiver() {    Iterator iter = GetImage3DDataElements();    AWTImageReceiver result = null;    while (iter.hasNext()) {      Image3DData image3DData = (Image3DData) iter.next();      AWTImageReceiver reciever = image3DData.GetAWTImageReceiver();      if (reciever != null) {        result = reciever;        break;      }    }    return result;  }  public void AddImage(Image image) {    AWTImageReceiver reciever = GetAWTImageReceiver();    if (reciever == null) {      reciever = NewAWTImage3DData();    }    reciever.AddImage(image);  }  public void SetSliceThickness(float sliceThickness) {    AWTImageReceiver reciever = GetAWTImageReceiver();    if (reciever == null) {      reciever = NewAWTImage3DData();    }    reciever.SetSliceThickness(sliceThickness);  }  private AWTImageReceiver NewAWTImage3DData() {    Image3DData image3DData = new Image3DData(Image3DData.kAWTReciever);    AddImage3DData(image3DData);    return image3DData.GetAWTImageReceiver();  }  private DicomImageReceiver NewDicomImage3DData() {    Image3DData image3DData = new Image3DData(Image3DData.kDicomReciever);    AddImage3DData(image3DData);    return image3DData.GetDicomImageReceiver();  }  public FiducialSetsAccess GetFiducialsAccess(SingleSpaceID whichSpace) {    return new ImageSetsFiducials(whichSpace);  }  public ImageAdjustments GetImageAdjustments(SingleSpaceID whichSpace) {    return GetImage3DData(whichSpace).GetImageAdjustments();  }  public Regions3DAccessor GetRegions3DAccessor() {    return new ImagesManagerRegions3DAccessor();  }  public RegionsOfInterest GetRegionsOfInterest(SingleSpaceID whichSpace) {    return GetImage3DData(whichSpace).GetRegionsOfInterest();  }  public Vector GetSnapshotsList(SingleSpaceID whichSpace) {    return GetImage3DData(whichSpace).GetSnapshotsList();  }  public ImageSpacesAccessor GetImageSpacesAccessor() {    return fSpacesAccessor;  }  public Location3D GetSelectedPoint(SingleSpaceID whichSpace) {    return GetImage3DData(whichSpace).GetSelectedPoint();  }  public void SetSelectedPoint(Location3D point, SingleSpaceID whichSpace) {    GetImage3DData(whichSpace).SetSelectedPoint(point);  }  /*  	public Histogram GetSeriesHistogram(SingleSpaceID whichSpace)  	{  		return GetImage3DData(whichSpace).GetSeriesHistogram();  	}  */  public boolean IsComplete() {    boolean result = true;    Iterator elements = GetImage3DDataElements();    while (elements.hasNext()) {      Image3DData image3DData = (Image3DData) elements.next();      if (!image3DData.IsComplete()) {        result = false;        break;      }    }    return result;  }  // this is an attempt to avoid memory leaks  public void Dispose() {    Iterator elements = GetImage3DDataElements();    while (elements.hasNext()) {      Image3DData image3DData = (Image3DData) elements.next();      image3DData.Dispose();    }  }  private class ImageSetsFiducials implements FiducialSetsAccess {    private FiducialPoints fPoints;    private BroadcasterDataModel fBroadcasterModel = new BroadcasterDataModel();    private ImageSetsFiducials(SingleSpaceID spaceID) {      if (spaceID != null) {        SetSpaceID(spaceID);      }    }    public FiducialPoint[] GetFiducials() {      return fPoints.GetFiducials();    }    public void DeleteAll() {      fPoints.DeleteAll();    }    public FiducialSetsAccess GetNewAccess(SingleSpaceID spaceID) {      return new ImageSetsFiducials(spaceID);    }    public void AddPoint(Location3D location) {      fPoints.AddPoint(location);    }    public void DeletePoint(Location3D location) {      fPoints.DeletePoint(location);    }    public boolean HasPoint(Location3D location) {      return fPoints.HasPoint(location);    }    public DataModel GetDataModel() {      return fBroadcasterModel;    }    public FiducialPoint GetFiducialPoint(Location3D location) {      return fPoints.GetFiducialPoint(location);    }    public void SetSpaceID(SingleSpaceID spaceID) {      if (fPoints != null) {        fPoints.RemoveListener(fBroadcasterModel);      }      fPoints = GetImage3DData(spaceID).GetFiducialPoints();      if (fPoints != null) {        fPoints.AddListener(fBroadcasterModel);      }    }    public boolean HasFiducials(SingleSpaceID spaceID) {      return HasImage3DData(spaceID);    }  }  private class ImagesManagerSpacesAccessor extends DataModel implements ImageSpacesAccessor {    private ImagesManagerSpacesAccessor() {}    public DataModel GetDataModel() {      return this;    }    public Regions3DAccessor GetRegions3DAccessor() {      return ImagesManager.this.GetRegions3DAccessor();    }    public SingleSpaceID ResolveSingleSpaceID(SingleSpaceID spaceID) {      SingleSpaceID result = spaceID;      if (spaceID == null || spaceID.IsType(SingleSpaceID.kImageType)) {        Image3DData data = GetImage3DData(spaceID);        if (data != null) {          result = data.GetSpaceID();        }      }      if (Debug.fgDebugging && false) {        System.out.println("spaceID: " + spaceID + "\rResolved spaceID: " + result + "\r");      }      return result;    }    public SingleSpaceID[] GetImageSpaces() {      SingleSpaceID[] result = null;      synchronized (fImage3DData) {        int i = 0;        result = new SingleSpaceID[fImage3DData.size()];        Iterator elements = GetImage3DDataElements();        while (elements.hasNext()) {          Image3DData set = (Image3DData) elements.next();          result[i++] = set.GetSpaceID();        }      }      return result;    }    public Image3DField GetImage3DField(SingleSpaceID spaceID) {      return ImagesManager.this.GetImage3DField(spaceID);    }    public boolean HasImageSpace(SingleSpaceID spaceID) {      return HasImage3DData(spaceID);    }    public String GetNameForSpace(SingleSpaceID space) {      String result = "Unknown image";      if (space == null || space.IsType(SingleSpaceID.kImageType)) {        Image3DData data = GetImage3DData(space);        if (data != null) {          result = data.GetName();        }      } else {        result = space.GetName();      }      return result;    }    /*    	should be able to remove this and use    	resolve space (maybe?)    */    public String[] GetSpaceNames(SingleSpaceID[] spaceIDs) {      String[] result = new String[spaceIDs.length];      for (int i = 0; i < spaceIDs.length; i++) {        result[i] = GetNameForSpace(spaceIDs[i]);      }      return result;    }    public SingleSpaceID[] GetLocalizerSpaces() {      SingleSpaceID[] result = new SingleSpaceID[1];      result[0] = SingleSpaceID.GetRealSpaceID();      return result;    }    public boolean HasLocalizerSpace(SingleSpaceID spaceID) {      return true;    }  }  private class ImagesManagerImageFilterAccessor implements ImageFilterAccessor {    private ImagesManagerImageFilterAccessor() {}    public ImageAdjustments GetImageAdjustments(SingleSpaceID whichSpace) {      return GetImage3DData(whichSpace).GetImageAdjustments();    }    public Histogram GetImageHistogram(SingleSpaceID whichSpace) {      return GetImage3DData(whichSpace).GetSeriesHistogram();    }  }  private class ImagesManagerRegions3DAccessor implements Regions3DAccessor {    private String fLabel;    private SingleSpaceID fSpaceID = SingleSpaceID.GetDefaultVirtualSpaceID();    public void SetRegionLabel(String label) {      fLabel = label;    }    public void SetSingleSpaceID(SingleSpaceID spaceID) {      fSpaceID = spaceID;    }    private Region3DModel GetRegion3D() {      RegionsOfInterest regionsOfInterest = GetRegionsOfInterest();      return regionsOfInterest.GetRegionWithLabel(fLabel);    }    public RegionsOfInterest GetRegionsOfInterest() {      return ImagesManager.this.GetRegionsOfInterest(fSpaceID);    }    public void CreateMesh3D() {      RegionsOfInterest regionsOfInterest = GetRegionsOfInterest();      regionsOfInterest.CreateMesh3D(fLabel);    }    public void SetColor(Color color) {      RegionsOfInterest regionsOfInterest = GetRegionsOfInterest();      Region3DModel region = GetRegion3D();      regionsOfInterest.SetColor(region, color);    }    public void SetTransparency(float transparency) {      RegionsOfInterest regionsOfInterest = GetRegionsOfInterest();      Region3DModel region = GetRegion3D();      regionsOfInterest.SetTransparency(region, transparency);    }    public float GetTransparency() {      RegionsOfInterest regionsOfInterest = GetRegionsOfInterest();      Region3DModel region = GetRegion3D();      return region.GetTransparency();    }    public void CreateRegionVersion() {      RegionsOfInterest regionsOfInterest = GetRegionsOfInterest();      regionsOfInterest.CreateRegionVersion(fLabel);    }    public Color GetColor() {      RegionsOfInterest regionsOfInterest = GetRegionsOfInterest();      Region3DModel region = GetRegion3D();      return region.GetColor();    }  }}