package com.brazedblue.intervox.image;import java.awt.image.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.util.NeuroSynchUtil;public class MyIndexColorModel extends IndexColorModel  {  	ImageAdjustments fAdjustments;	    public MyIndexColorModel(int bits, int size, byte[] byteArr, ImageAdjustments adjustments) 	{		super(bits, size, byteArr, byteArr, byteArr);				fAdjustments = (ImageAdjustments)adjustments.clone();    }		public static MyIndexColorModel GetAdjustmentsColorModel(MyIndexColorModel oldModel,		ImageAdjustments adjustments)	{		MyIndexColorModel result = oldModel;				if (result == null || !result.fAdjustments.Equals(adjustments))		{			byte[] byteArray = CreateByteArray(adjustments);						int size = byteArray.length;						int bits = 32;			if (size <= (Byte.MAX_VALUE - Byte.MIN_VALUE + 1))			{				bits = 8;			}			else if  (size <= (Short.MAX_VALUE - Short.MIN_VALUE + 1))			{				bits = 16;			}						result = new MyIndexColorModel(bits, size, byteArray, adjustments);		}				return result;	}		private static byte[] CreateByteArray(ImageAdjustments adjustments)	{		int maxValue = adjustments.GetMaxValue();  // add one because values are array indices (0 -> maxValue) 		if (maxValue <= 0)		{			NeuroSynchUtil.ErrorMessage("Non positive maxValue in MyIndexColorModel.CreateByteArray", false);			return null;		} 				int arraySize = maxValue + 1;				int adjustedMax =  adjustments.GetAdjustedMaxValue();		int adjustedMin =  adjustments.GetAdjustedMinValue();				int range = adjustedMax - adjustedMin;		float increment = range > 0 ? 255f / (float)range : 255;				float value = 0;		byte[] result = new byte[arraySize];		 for (int i = adjustedMin; i < adjustedMax; i++, value += increment)		 {		 	int intValue = (int)Math.round(value);					 	result[i] = (byte)Math.max(0, Math.min(255, intValue));		 		 }		 for (int i = adjustedMax; i < result.length; i++ )		 {		 	int intValue = (int)Math.round(value);					 	result[i] = (byte)255;		 		 }		 return result;	}  }