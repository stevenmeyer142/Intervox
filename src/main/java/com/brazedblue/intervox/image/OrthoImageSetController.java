package com.brazedblue.intervox.image;import java.awt.event.*;import java.awt.image.*;import java.util.Hashtable;import java.util.Vector;import java.util.Enumeration;import java.awt.*;import java.beans.PropertyChangeEvent;import javax.swing.*;import javax.swing.event.*;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.device.DeviceOutput;import com.brazedblue.intervox.registration.CoRegistrationsAccess;import com.brazedblue.intervox.registration.TransformerAccess;import com.brazedblue.intervox.util.Debug;import com.brazedblue.intervox.display.ImageViewType;public class OrthoImageSetController /*implements DataModelListener  */ {//	OrthoImageSetAdjustmentListener			fAdjustmentListener = new OrthoImageSetAdjustmentListener();	OrthoImageSetControllerTrackListener	fTrackerListener = new OrthoImageSetControllerTrackListener();//	OrthoImageSetNSImageViewListener		fViewListener = new OrthoImageSetNSImageViewListener();		TransformerAccess						fTransformerAccess;//	Hashtable								fSpacesInfo = new Hashtable();	Hashtable								fFocusManagers = new Hashtable();	Component								fOwner;	SingleSpaceIDResolver					fSpaceResolver;	ImageSpacesAccessor						fImageSpacesAccessor;		Vector									fImageViews = new Vector();		static public final int kSagittal = FloatPoint.X;	static public final int kAxial = FloatPoint.Y;	static public final int kCoronal = FloatPoint.Z;	static public final int kTrajectory = kCoronal + 1;	static public final int k3D = kTrajectory + 1;	static public final int kFirstAxis = kSagittal;	static public final int kLastAxis = k3D; 	static public final int kNoAxis = kLastAxis + 1;     public OrthoImageSetController(Component owner) 	{		fOwner = owner;    }		public void SetTracker(TrackerController tracker)	{		if (tracker != null)		{			fTrackerListener.SetTracker(tracker);		}	}/*		private void DisplayFocalPoint(Location3D focalPoint, SingleSpaceID whichSpace)	{								//	2nd arg, setScrollers; last arg, useTransforms		DisplayFocalPoint(focalPoint, true, null, whichSpace, false);	}*/			public void ClearImageViews()	{/*		Enumeration iter = fImageViews.elements();				while (iter.hasMoreElements())		{			NSImageView view = (NSImageView)iter.nextElement();						view.Dispose();		} */				fImageViews.removeAllElements();	}			private OrthoImageSetControllerFocusManager GetFocusManager(SingleSpaceID whichSpace)	{		whichSpace = ReconcileSpaceID(whichSpace);		OrthoImageSetControllerFocusManager result = (OrthoImageSetControllerFocusManager)fFocusManagers.get(whichSpace);				if (result == null)		{			result = new OrthoImageSetControllerFocusManager(whichSpace);			fFocusManagers.put(whichSpace, result);		}				return result;	}		private void SetFocalPointLocation(Location3D focalPoint, SingleSpaceID whichSpace)	{		OrthoImageSetControllerFocusManager originalFocusManager = GetFocusManager(whichSpace);				originalFocusManager.SetFocalPointLocation(focalPoint);				Enumeration focusManagers = GetFocusManagerElements();				while (focusManagers.hasMoreElements())		{			OrthoImageSetControllerFocusManager focusManager = (OrthoImageSetControllerFocusManager)focusManagers.nextElement();						if (!originalFocusManager.equals(focusManager) && fTransformerAccess.CanTransform(whichSpace, focusManager.GetSpaceID()))			{				Location3D transformedFocus = fTransformerAccess.TransformPoint(new FloatPoint(focalPoint), whichSpace, focusManager.GetSpaceID());				focusManager.SetFocalPointLocation(transformedFocus);			}		}		}		public FocalPointModel GetFocalPoint(SingleSpaceID whichSpace)	{		return new OrthoImageSetControllerFocalPoint(whichSpace);	}	private Enumeration GetFocusManagerElements()	{		return fFocusManagers.elements();	}/*		private OrthoImageSetControllerSpaceInfo GetSpaceInfo(SingleSpaceID whichSpace)	{		whichSpace = ReconcileSpaceID(whichSpace);		OrthoImageSetControllerSpaceInfo result = (OrthoImageSetControllerSpaceInfo)fSpacesInfo.get(whichSpace);				if (result == null)		{			result = new OrthoImageSetControllerSpaceInfo(whichSpace);			fSpacesInfo.put(whichSpace, result);		}				return result;	}*/	/*	private Enumeration GetSpaceInfoElements()	{		return fSpacesInfo.elements();	} */		public ImageSpacesAccessor GetImageSpacesAccessor()	{		return fImageSpacesAccessor;	}		public void AddImageView(NSImageView view)	{		fImageViews.addElement(view);		view.SetFocalPoint(GetFocalPoint(view.GetSpaceID()));		/*		if (Debug.fgDebugging && false)		{			Debug.PrintStackTrace("spaceID: " + view.GetSpaceID().toString() + "\rthis- " + this);		}		OrthoImageSetControllerSpaceInfo spaceInfo = GetSpaceInfo(view.GetSpaceID());				view.SetFocalPoint(GetFocalPoint(view.GetSpaceID()));		spaceInfo.AddImageView(view); */	}	public static String GetAxisIDString(int axis)	{		String result = "";		switch (axis)		{			case kCoronal :				result = "C";				break;						case kSagittal :				result = "S";				break;						case kAxial :				result = "A" ;				break;						case kTrajectory :				result = "T" ;				break;						case k3D :				result = "3D" ;				break;		}				return result;	}	/*	private void DisplayFocalPoint(Location3D focalPoint, boolean setScrollers, NSImageView sourceView, SingleSpaceID whichSpace)	{		DisplayFocalPoint(focalPoint, setScrollers, sourceView, whichSpace, true);		//	last arg, useTransforms	} */	/*	private void DisplayFocalPoint(Location3D focalPoint, boolean setScrollers, NSImageView sourceView, SingleSpaceID whichSpace,		boolean useTransforms)	{		Enumeration spaceInfos = GetSpaceInfoElements();		SingleSpaceID fromSpace = ReconcileSpaceID(whichSpace);		while (spaceInfos.hasMoreElements())		{			OrthoImageSetControllerSpaceInfo spaceInfo = (OrthoImageSetControllerSpaceInfo)spaceInfos.nextElement();			if (spaceInfo.GetSpaceID().equals(fromSpace))			{				spaceInfo.UpdateFocalPoint(focalPoint, setScrollers, sourceView);			}			else if (useTransforms && fTransformerAccess.CanTransform(fromSpace, spaceInfo.GetSpaceID()))			{				FloatPoint transformedPt = new FloatPoint(focalPoint);				transformedPt = fTransformerAccess.TransformPoint(transformedPt, fromSpace, spaceInfo.GetSpaceID());								if (transformedPt != null)				{					spaceInfo.UpdateFocalPoint(transformedPt, setScrollers, sourceView);				}				else if (Debug.fgDebugging)				{					Debug.PrintStackTrace("transformedPt: " + transformedPt);				}			}		}	} */		public void SetData(PatientData data)	{//		fData = data;		fTransformerAccess = data.GetCoRegistrations().GetTransformerAccess();		fSpaceResolver = data.GetSingleSpaceIDResolver();		fImageSpacesAccessor = data.GetImageSpacesAccessor();	}			private SingleSpaceID ReconcileSpaceID(SingleSpaceID spaceID)	{		if (spaceID == null) 		{			spaceID = SingleSpaceID.GetDefaultVirtualSpaceID();		}				return (fSpaceResolver != null) ? fSpaceResolver.ResolveSingleSpaceID(spaceID) : spaceID;	}			private Location3D GetFocalPointLocation(SingleSpaceID whichSpace)	{		OrthoImageSetControllerFocusManager focusManager = GetFocusManager(whichSpace);				return focusManager != null ? focusManager.GetFocalPointLocation() : null;	} 		public void ImageAdjustmentsChanged(SingleSpaceID whichSpace)	{		whichSpace = ReconcileSpaceID(whichSpace);		Enumeration iter = fImageViews.elements();				while (iter.hasMoreElements())		{			NSImageView view = (NSImageView)iter.nextElement();						SingleSpaceID thisSpace = ReconcileSpaceID(view.GetSpaceID());						if (thisSpace.equals(whichSpace))			{				view.ImageAdjustmentsChanged();			}					}/*		OrthoImageSetControllerSpaceInfo spaceInfo = GetSpaceInfo(whichSpace);		spaceInfo.ImageAdjustmentsChanged(); */	}			void UpdateSeriesViews()	{		Enumeration focusManagers = GetFocusManagerElements();				while (focusManagers.hasMoreElements())		{			OrthoImageSetControllerFocusManager focusManager = (OrthoImageSetControllerFocusManager)focusManagers.nextElement();			focusManager.UpdateFocalPointListeners();		}	} 		public void Dispose()	{				Enumeration focusManagers = GetFocusManagerElements();				while (focusManagers.hasMoreElements())		{			OrthoImageSetControllerFocusManager focusManager = (OrthoImageSetControllerFocusManager)focusManagers.nextElement();			focusManager.Dispose();		} 	 }/*		class OrthoImageSetAdjustmentListener extends MouseAdapter implements AdjustmentListener 	{		private int					fDontAdjustCount = 0;				final boolean				kFocusOnMousePress = true;				OrthoImageSetAdjustmentListener()		{					}				private void PushDontAdjust()		{			fDontAdjustCount++;		}				private void PopDontAdjust()		{			fDontAdjustCount--;		}				private void DebugClearDontAdjust()		{			if (fDontAdjustCount != 0)			{				if (Debug.fgDebugging)				{					System.out.println("DebugClearDontAdjust stack: " + fDontAdjustCount);									}				fDontAdjustCount = 0;			}		}				public void adjustmentValueChanged(AdjustmentEvent e)		{//			if (fDontAdjustCount <= 0)//			{//				Adjustable source = e.getAdjustable();////				Enumeration spaceInfos = GetSpaceInfoElements();//				NSImageView sourceView = null;//					//		//				while (spaceInfos.hasMoreElements() && sourceView == null)//				{//					OrthoImageSetControllerSpaceInfo spaceInfo = (OrthoImageSetControllerSpaceInfo)spaceInfos.nextElement();//					sourceView = spaceInfo.GetViewWithScroller(source);//				} ////				if (sourceView != null )//				{//					FloatPoint newFocalPt = new FloatPoint(GetFocalPointLocation(sourceView.GetSpaceID()));//					newFocalPt.Set(e.getValue(), sourceView.GetAxis());////					DisplayFocalPoint(newFocalPt, true, sourceView, sourceView.GetSpaceID());//				}//			}		}				public void HandleMouseClicked(MouseEvent e)		{//			if (e.getSource() instanceof NSImageView)//			{//				NSImageView sourceView = (NSImageView)e.getSource();//				if (sourceView.HandlesClick(e))//				{//					Location3D clickPt = sourceView.GetFloatPoint(e.getPoint());//					DisplayFocalPoint(clickPt, true, sourceView, sourceView.GetSpaceID());//				}//			} 		}				//	set scrollbars and display points		public void mouseClicked(MouseEvent e) 		{			if (!kFocusOnMousePress)			{				HandleMouseClicked(e);			}		}				public void mousePressed(MouseEvent e)		{			if (kFocusOnMousePress)			{				HandleMouseClicked(e);			}				}			} */		//		class OrthoImageSetControllerTrackListener implements TrackerListener, ActionListener	{			TrackerController		fTracker;		DeviceOutput 			fNextOutput = null;		DeviceOutput 			fCurrentOutput = null;		Timer 					fTimer = null;				OrthoImageSetControllerTrackListener()		{			fTimer = new Timer(100, this);		}				public void SetTracker(TrackerController tracker)		{			fTracker = tracker;			tracker.AddTrackerListener(this, 30, true, DeviceOutput.STATION1);		}				public Component GetComponent()		{			return fOwner;		}								public void DataRetrieved(DeviceOutput output)		{			if (fTracker.ShouldTrack())			{				Object data = output.GetDataOfType(DeviceOutput.POINT_COORDINATE);								if (data != null)				{										fNextOutput = output;				}			}									Object data = output.GetDataOfType(DeviceOutput.COMMAND);							if (data != null && TrackerController.kTrackCmd.equals(data))			{				Boolean state = (Boolean)output.GetDataOfType(DeviceOutput.STATE);								if (state.booleanValue())				{					if (!fTimer.isRunning())					{						fTimer.start();					}				}				else				{					fTimer.stop();				}			}					}		public void actionPerformed(ActionEvent e)		{			Track();		}				public void Track()		{			if (fCurrentOutput != fNextOutput)			{				DisplayTrackerOutput(fNextOutput);				fCurrentOutput = fNextOutput;			}		}				private void DisplayTrackerOutput(DeviceOutput output)		{			Enumeration focusManagers = GetFocusManagerElements();						while (focusManagers.hasMoreElements())			{				OrthoImageSetControllerFocusManager focusManager = (OrthoImageSetControllerFocusManager)focusManagers.nextElement();								if (fTransformerAccess.CanTransform(output.GetSpaceID(), focusManager.GetSpaceID()))				{					focusManager.DisplayTrackerOutput(output, fTransformerAccess);				}			} 		}		}		public void ForceUpdate()	{		Enumeration focusManagers = GetFocusManagerElements();				while (focusManagers.hasMoreElements())		{			OrthoImageSetControllerFocusManager focusManager = (OrthoImageSetControllerFocusManager)focusManagers.nextElement();			focusManager.UpdateFocalPointListeners();		}			}						// stores and notifies of focus change will replace OrthoImageSetControllerSpaceInfo with this and a tracker manager	private class OrthoImageSetControllerFocusManager	{		private FloatPoint		fFocalPoint = new FloatPoint();		private SingleSpaceID   fSpaceID;		private Vector 			fListeners = new Vector();				private OrthoImageSetControllerFocusManager(SingleSpaceID spaceID)		{			fSpaceID = spaceID;		}			private Location3D GetFocalPointLocation()		{			return fFocalPoint;		}				private SingleSpaceID GetSpaceID()		{			return fSpaceID;		}				private void UpdateFocalPointListeners()		{			if (!fListeners.isEmpty())			{				FocalPointListener[] listeners;				synchronized (fListeners)				{					listeners = new FocalPointListener[fListeners.size()];					fListeners.copyInto(listeners);				}								for (int i = 0; i < listeners.length; i++)				{					listeners[i].FocalPointChanged(fFocalPoint);				}			}		}						private void SynchWithData()		{			fSpaceID = ReconcileSpaceID(fSpaceID);		}		private void SetFocalPointLocation(Location3D location)		{			if (!fFocalPoint.Equals(location))			{				fFocalPoint.Set(location);								UpdateFocalPointListeners();			}		}				private void AddFocalPointListener(FocalPointListener l)		{			if (!fListeners.contains(l))			{				fListeners.addElement(l);			}		}				private void RemoveFocalPointListener(FocalPointListener l)		{			fListeners.removeElement(l);		}				private void Dispose()		{			if (fListeners != null)			{				fListeners.removeAllElements();				fListeners = null;			}		}				private void DisplayTrackerOutput(DeviceOutput output, TransformerAccess transformer)		{			Object realPoint = output.GetDataOfType(DeviceOutput.POINT_COORDINATE);			fFocalPoint.Set((Location3D)realPoint);			transformer.TransformPoint(fFocalPoint, output.GetSpaceID(), GetSpaceID());						if (!fListeners.isEmpty())			{				FocalPointListener[] listeners;				synchronized (fListeners)				{					listeners = new FocalPointListener[fListeners.size()];					fListeners.copyInto(listeners);				}								for (int i = 0; i < listeners.length; i++)				{					listeners[i].DisplayTrackerOutput(output, transformer);				}			}					}	}		// Intermediary FocalPointModel which keeps track of the SpaceID	private class OrthoImageSetControllerFocalPoint implements FocalPointModel, FocalPointListener	{		SingleSpaceID fSpace;		private Vector fListeners = new Vector();				private OrthoImageSetControllerFocalPoint(SingleSpaceID space)		{			if (space != null)			{				SetSpaceID(space);			}		}				public void FocalPointChanged(Location3D focalPoint)		{			if (!fListeners.isEmpty())			{				FocalPointListener[] listeners;				synchronized (fListeners)				{					listeners = new FocalPointListener[fListeners.size()];					fListeners.copyInto(listeners);				}								for (int i = 0; i < listeners.length; i++)				{					listeners[i].FocalPointChanged(focalPoint);				}			}			else if (Debug.fgDebugging)			{				Debug.PrintStackTrace("fListeners is Empty");			}		}							public void AddFocalPointListener(FocalPointListener l)		{			if (!fListeners.contains(l))			{				fListeners.addElement(l);								OrthoImageSetControllerFocusManager focusManager = GetFocusManager(fSpace);				if (focusManager != null)				{					focusManager.AddFocalPointListener(this);				}							}		}				public void DisplayTrackerOutput(DeviceOutput output, TransformerAccess transformer)		{			if (!fListeners.isEmpty())			{				FocalPointListener[] listeners;				synchronized (fListeners)				{					listeners = new FocalPointListener[fListeners.size()];					fListeners.copyInto(listeners);				}								for (int i = 0; i < listeners.length; i++)				{					listeners[i].DisplayTrackerOutput(output, transformer);				}			}			else if (Debug.fgDebugging)			{				Debug.PrintStackTrace("fListeners is Empty");			}				}				public void RemoveFocalPointListener(FocalPointListener l)		{			fListeners.removeElement(l);						if (fListeners.isEmpty())			{				OrthoImageSetControllerFocusManager focusManager = GetFocusManager(fSpace);				if (focusManager != null)				{					focusManager.RemoveFocalPointListener(this);				}			}		}				public Location3D GetFocalPointLocation()		{			return OrthoImageSetController.this.GetFocalPointLocation(fSpace);		}				public void SetFocalPointLocation(Location3D focalPt)		{			OrthoImageSetController.this.SetFocalPointLocation(focalPt, fSpace);		}				public void SetSpaceID(SingleSpaceID space)		{			if (fSpace != null)			{				OrthoImageSetControllerFocusManager focusManager = GetFocusManager(fSpace);				if (focusManager != null)				{					focusManager.RemoveFocalPointListener(this);				}			}						fSpace = space;			if (fSpace != null && !fListeners.isEmpty())			{				OrthoImageSetControllerFocusManager focusManager = GetFocusManager(fSpace);				if (focusManager != null)				{					focusManager.AddFocalPointListener(this);				}			}		}	}}