package com.brazedblue.intervox.image;import com.brazedblue.intervox.util.NeuroSynchUtil;class Pixel16BitData extends PixelData {  	short[] fPixels;		static short[] fgPixelsCache = null;	static final long serialVersionUID =  2898256627416303905L;    Pixel16BitData(int width, int height, short[] pixels) 	{		this(width, height, pixels, 1);    }    Pixel16BitData(int width, int height, short[] pixels, int resolution) 	{		super(width / resolution, height / resolution, 16);		if (resolution > 1)		{			fPixels = (short[])NewPixelArray(pixels.length / (resolution * resolution));						if (fPixels.length != fWidth * fHeight)			{				NeuroSynchUtil.ErrorMessage("pixels bad length, Pixel16BitData.Pixel16BitData", false);			}						for (int y = 0; y < fHeight; y++)			{				for (int x = 0; x < fWidth; x++)				{					SetPixelValue(x, y, pixels[y * resolution * width + x * resolution]);				}			}		}		else		{			fPixels = pixels;				if (fPixels.length != fWidth * fHeight)			{				NeuroSynchUtil.ErrorMessage("pixels bad length, Pixel8BitData.Pixel8BitData", false);			}		}	}		public int GetPixelValue(int x, int y)	{		if (x >= 0 && x < fWidth && y >= 0 && y < fHeight)		{			return fPixels[y * fWidth + x] & 0xFFFF;		}		else		{			return 0;		}	}	public void SetPixelValue(int x, int y, int value)	{		fPixels[y * fWidth + x] = (short)value;		}		public void AdjustToUnsigned(int substractedAmount)	{		for (int i = 0; i < fPixels.length; i++)		{			int value = fPixels[i];			value -= substractedAmount;			fPixels[i] = (short)(value & 0xFFFF);		}	}		protected Object GetPixelsCopy()	{		return fPixels.clone();	}	protected synchronized PixelData NewDataObject(int width, int height)	{		short[] pixels = (short[])NewPixelArray(width * height);				return new Pixel16BitData(width, height, pixels);		}		protected Object NewPixelArray(int size)	{		short[] pixels = null;				if (fgPixelsCache != null && fgPixelsCache.length == size)		{			pixels = fgPixelsCache;			fgPixelsCache = null;		}				else		{			pixels = new short[size];		}		return pixels;	}	protected Object GetPixels()	{		return fPixels;	}		protected synchronized void SetPixelData(Object pixels)	{		short[] newPixels = (short[])pixels;		if (fPixels.length != newPixels.length)		{			NeuroSynchUtil.ErrorMessage("pixels bad length, Pixel8BitData.SetPixelData", false);		}				if (fPixels != null)		{			fgPixelsCache = fPixels;		}					fPixels = newPixels;	}}