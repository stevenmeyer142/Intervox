package com.brazedblue.intervox.image;import com.brazedblue.intervox.util.NeuroSynchUtil;public class Pixel8BitData extends PixelData /* implements anInterface */ {  		byte[] fPixels;	static final long serialVersionUID =  -6065717007693578325L;    Pixel8BitData(int width, int height, byte[] pixels) 	{		this(width, height, pixels, 1);    }		public void AdjustToUnsigned(int substractedAmount)	{		for (int i = 0; i < fPixels.length; i++)		{			int value = fPixels[i];			value -= substractedAmount;			fPixels[i] = (byte)(value & 0xFF);		}	}    Pixel8BitData(int width, int height, byte[] pixels, int resolution) 	{		super(width / resolution, height / resolution, 8);				if (resolution > 1)		{			fPixels = (byte[])NewPixelArray(pixels.length / (resolution * resolution));						if (fPixels.length != fWidth * fHeight)			{				NeuroSynchUtil.ErrorMessage("pixels bad length, Pixel8BitData.Pixel8BitData", false);			}						for (int y = 0; y < fHeight; y++)			{				for (int x = 0; x < fWidth; x++)				{					SetPixelValue(x, y, pixels[y * resolution * width + x * resolution]);				}			}		}		else		{			fPixels = pixels;				if (fPixels.length != fWidth * fHeight)			{				NeuroSynchUtil.ErrorMessage("pixels bad length, Pixel8BitData.Pixel8BitData", false);			}		}    }	public int GetPixelValue(int x, int y)	{		if (x >= 0 && x < fWidth && y >= 0 && y < fHeight)		{			return fPixels[y * fWidth + x] & 0xFF;		}		else		{			return 0;		}	}	public void SetPixelValue(int x, int y, int value)	{		fPixels[y * fWidth + x] = (byte)value;		}		protected Object GetPixelsCopy()	{		return fPixels.clone();	}	protected PixelData NewDataObject(int width, int height)	{		byte[] pixels = new byte[width * height];				return new Pixel8BitData(width, height, pixels);		}		protected Object NewPixelArray(int size)	{		return new byte[size];	}	protected Object GetPixels()	{		return fPixels;	}		protected void SetPixelData(Object pixels)	{		byte[] newPixels = (byte[])pixels;		if (fPixels.length != newPixels.length)		{			NeuroSynchUtil.ErrorMessage("pixels bad length, Pixel8BitData.SetPixelData", false);		}				fPixels = newPixels;	}	  }