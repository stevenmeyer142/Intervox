package com.brazedblue.intervox.image;import com.brazedblue.intervox.data.ImageAdjustments;import com.brazedblue.intervox.util.*;import java.awt.image.*;import java.util.*;public class RGBArrayImageSource extends ArrayImageSource {  int[] fRGBArray = null;  PixelData fPixelData = null;  ImageAdjustments fImageAdjustments = null;  MyIndexColorModel fIndexedColorModel = null;  public RGBArrayImageSource(boolean staticSrc) {    super(staticSrc);  }  public void ImageAdjustmentsChanged() {    fIndexedColorModel = CreateIndexedColorModel();    UpdateRGBArray();    UpdateConsumers();  }  public ColorModel GetIndexedColorModel() {    if (fIndexedColorModel == null) {      fIndexedColorModel = CreateIndexedColorModel();    }    return fIndexedColorModel;  }  public boolean HasPixels() {    return (fRGBArray != null);  }  public void SetPixelData(PixelData pixData) {    fPixelData = pixData;    fImageHeight = pixData.GetHeight();    fImageWidth = pixData.GetWidth();    ;    UpdateRGBArray();    UpdateConsumers();  }  public void SetRGBArrayData(int[] rgbArray, int width, int height) {    fPixelData = null;    fImageHeight = width;    fImageWidth = height;    fRGBArray = rgbArray;    UpdateConsumers();  }  public synchronized void UpdateRGBArray() {    if (fIndexedColorModel == null) {      fIndexedColorModel = CreateIndexedColorModel();    }    int arraySize = fImageHeight * fImageWidth;    if (fRGBArray == null || fRGBArray.length != arraySize) {      fRGBArray = new int[arraySize];    }    if (fPixelData.IsShortArray()) {      short[] sArray = (short[]) fPixelData.GetPixels();      for (int i = 0; i < arraySize; i++) {        int pixelVal = sArray[i] & 0xFFFF;        fRGBArray[i] = fIndexedColorModel.getRGB(pixelVal);      }    } else if (fPixelData.IsByteArray()) {      byte[] bArray = (byte[]) fPixelData.GetPixels();      for (int i = 0; i < arraySize; i++) {        int pixelVal = bArray[i] & 0xFF;        fRGBArray[i] = fIndexedColorModel.getRGB(pixelVal);      }    } else {      NeuroSynchUtil.ErrorMessage(          "Only 8 && 16 bit pixels in UpdateRGBArray.RGBArrayImageSource", false);    }  }  protected void SendPixels(ImageConsumer ic) {    if (fImageWidth > 0 && fImageHeight > 0) {      ic.setDimensions(fImageWidth, fImageHeight);      ic.setPixels(0, 0, fImageWidth, fImageHeight, fColorModel, fRGBArray, 0, fImageWidth);      if (isConsumer(ic)) {        ic.imageComplete(fStatic ? ImageConsumer.STATICIMAGEDONE : ImageConsumer.SINGLEFRAMEDONE);      }    } else if (Debug.fgDebugging) {      Debug.PrintStackTrace(this.toString());    }  }  public MyIndexColorModel CreateIndexedColorModel() {    MyIndexColorModel result = null;    if (fImageAdjustments != null) {      result = MyIndexColorModel.GetAdjustmentsColorModel(fIndexedColorModel, fImageAdjustments);    }    return result;  }  public void SetImageAdjustments(ImageAdjustments adjustments) {    fImageAdjustments = adjustments;    fIndexedColorModel = null; // 	forces creation of new index color model    fIndexedColorModel = CreateIndexedColorModel();  }  public void Reset() {    fImageHeight = 0;    fImageWidth = 0;    fRGBArray = null;    fPixelData = null;  }}