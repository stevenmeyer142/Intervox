package com.brazedblue.intervox.image;import java.util.*;import java.awt.Point;import com.brazedblue.intervox.util.*; import com.brazedblue.intervox.geometry.*;	//	This class stores the user actions to select a regionpublic class RegionSelectionActions implements java.io.Serializable {  	private Vector 	fSeedPoints = null; 	private Vector		fEdgePoints = null;		private boolean		fShouldSeed = false;		private Vector			fCurrentEdgePointList;	static final long			serialVersionUID = 3557789448738991858L;	    public RegionSelectionActions() 	{    }		public boolean HasPoints()	{		return (fSeedPoints != null) && (fSeedPoints.size() != 0);	}		public void ClearEdgeLines()	{		if (fEdgePoints != null)		{			fEdgePoints.removeAllElements();		}	}		public void LastEdgePointAdded()	{		if (fCurrentEdgePointList != null && fCurrentEdgePointList.size() > 1)		{		//	only add lines with more than one point							if (fEdgePoints == null)			{				fEdgePoints = new Vector();			}						fEdgePoints.addElement(fCurrentEdgePointList);		}				fCurrentEdgePointList = null;	}		public void AddEdgePoint(int x, int y)	{		boolean addPt = true;		if (fCurrentEdgePointList == null)		{			fCurrentEdgePointList = new Vector();		}		else if (fCurrentEdgePointList.size() > 0)		{			// don't add duplicate points in succession			Point lastPt = (Point)fCurrentEdgePointList.lastElement();						if (lastPt.x == x && lastPt.y == y)			{				addPt = false;			}		}				if (addPt)		{			fCurrentEdgePointList.addElement(new Point(x, y));		}	}		public void AddPoint(int x, int y)	{		if (fSeedPoints == null)		{			fSeedPoints = new Vector();		}				fSeedPoints.addElement(new Point(x, y));	}		public void RemovePoint(Point pt)	{		if (fSeedPoints != null)		{			fSeedPoints.removeElement(pt);		}		}		public void ClearSeedPoints()	{		if (fSeedPoints != null)		{			fSeedPoints.removeAllElements();		}	}		public EdgePointEnumeration GetEdgePoints()	{		return new EdgePointEnumeration(fEdgePoints);		}		public Enumeration GetPoints()	{		Enumeration result;		if (fSeedPoints == null)		{			result = new EmptyEnumerator();		}		else		{			result = fSeedPoints.elements();		}				return result;	}		public void SetShouldSeed(boolean shouldSeed)	{		fShouldSeed = shouldSeed;	}		public boolean ShouldSeed()	{		return fShouldSeed;	}}