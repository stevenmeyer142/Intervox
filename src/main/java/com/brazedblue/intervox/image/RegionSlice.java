package com.brazedblue.intervox.image;import java.util.*;import java.awt.*;import com.brazedblue.intervox.geometry.*;public class RegionSlice  implements java.io.Serializable {	byte[]								fRegions;	int									fWidth;	int 								fHeight;		static final long					serialVersionUID = 3287770823337680961L;    public RegionSlice(int width, int height) 	{		fWidth = width;		fHeight = height;    }		public byte[] GetRegionPixels()	{		return fRegions;	}		public void CopyRegion(int fromRegion, int toRegion)	{		byte fromAsByte = (byte) fromRegion;		byte toAsByte = (byte) toRegion;		byte value;		for (int i = 0; i < fRegions.length; i++)		{			value = fRegions[i];			if ((value & fromAsByte) == 0)			{				if ((value & toAsByte) != 0)				{					value -= toAsByte;				}			}			else			{				value |= toAsByte;			}			fRegions[i] = value;		}	}			public int GetHeight()	{		return fHeight;	}		public int GetWidth()	{		return fWidth;	}	public void UnMark(int mark)	{		byte markAsByte = (byte) mark;		byte value;		if (fRegions != null)		{			int size = fRegions.length;			for (int i = 0; i < size; i++)			{				value = fRegions[i];				if ((value & markAsByte) != 0)				{					value -= markAsByte;				}				fRegions[i] = value;			}				}		}		public boolean HasRegion()	{		return fRegions != null;	}		public int GetMark(int x, int y)	{		int result = (fRegions != null) ? (fRegions[y * fWidth + x] & 0xff) : 0;				return result;	}		public void MarkPixel(int x, int y, int mark)	{		if (fRegions == null)		{			fRegions = new byte[fWidth * fHeight];		}				fRegions[y * fWidth + x] = (byte)mark;	}	}