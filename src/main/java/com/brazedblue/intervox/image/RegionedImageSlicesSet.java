package com.brazedblue.intervox.image;import java.awt.image.*;import java.awt.Color;import com.brazedblue.intervox.util.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.geometry.*;public class RegionedImageSlicesSet extends ImageSpacePerspective /* implements anInterface */ {	Regions3DAccessor 				fRegionsAccessor;	RegionedImageSource				fRegionedImageSource;	SeededRegionSliceAccessor		fSliceAccessor;	RegionCrossSectAccessor			fCrossSectionAccessor;	RegionedImageSource				fCrossSectionSource;	Histogram						fSliceHistogram = new Histogram(256,256);	String							fSelectedRegion;	    public RegionedImageSlicesSet() 	{		SetAxis(OrthoImageSetController.kAxial);				fCrossSectionAccessor = new RegionCrossSectAccessor();		fCrossSectionSource = new RegionedImageSource(fCrossSectionAccessor);    }/*		public RegionsOfInterest GetRegions()	{		return fRegions;	}*/		public ImageProducer GetCrossSectionImageProducer()	{		return fCrossSectionSource;	}			private String GetDefaultRegionLabel()	{		RegionsOfInterest regions = fRegionsAccessor.GetRegionsOfInterest();		String[] regionLabels = regions.GetRegionsLabels();		return regionLabels[0];		}		public Region3DModel GetCurrentRegion()	{		return fSliceAccessor.GetCurrentRegion();	}		public void ClearAllSeedPoints()	{		fCrossSectionAccessor.ClearAllMarks();		fSliceAccessor.ClearAllSeedPoints();						UpdateDisplay();	}		public void ClearAllEdgeLines()	{		fCrossSectionAccessor.ClearAllMarks();		fSliceAccessor.ClearAllEdgeLines();						UpdateDisplay();	}		public void ClearSeedPoints()	{		fCrossSectionAccessor.ClearMarks(fDepth);		fSliceAccessor.ClearSeedPoints();					UpdateDisplay();	}	public void ClearEdgeLines()	{		fCrossSectionAccessor.ClearMarks(fDepth);		fSliceAccessor.ClearEdgeLines();		fCrossSectionAccessor.UpdateMarks();				UpdateDisplay();	}		public void SetGrayScaleRange(int low, int high, boolean showRegions)	{		fSliceAccessor.SetLowHighValues(low, high);			fSliceAccessor.SetDisplayRegion(showRegions);				fCrossSectionAccessor.SetLowHighValues(low, high);			fCrossSectionAccessor.SetDisplayRegion(showRegions);				if (showRegions)		{			fSliceAccessor.SeedTheRegions();			fCrossSectionAccessor.UpdateMarks();		}				UpdateDisplay();	}		public String GetSeletedRegionLabel()	{		return fSliceAccessor.GetCurrentRegionLabel();	}		private void UpdateCrossSectionPixels()	{		if (fImageFilterAccessor != null && fCrossSectionAccessor != null)		{			Image3DField imageField = GetImage3DField();			int axis = OrthoImageSetController.kSagittal;			int coord = imageField.MaxCoord(axis) / 2;			PixelData pixels = imageField.PixelsAtCoord(coord, axis);			fCrossSectionAccessor.SetPixelData(pixels, coord);				fCrossSectionSource.SetImageAdjustments(fImageFilterAccessor.GetImageAdjustments(fMySpace));			fCrossSectionSource.SetPixelData(pixels);		}		}		public void CreateSelected3DGeometry()	{		fRegionsAccessor.CreateMesh3D();	}		public void SetCurrentGeometryColor(Color color)	{		fRegionsAccessor.SetColor(color);	}		public Color GetCurrentGeometryColor()	{		return fRegionsAccessor.GetColor();		}	public void SetCurrentGeometryTransparency(float transparency)	{		fRegionsAccessor.SetTransparency(transparency);	}		public float GetCurrentGeometryTransparency()	{		return fRegionsAccessor.GetTransparency();	}		public int GetCurrentRangeHigh()	{		Region3DModel region = GetCurrentRegion();				return region.GetRangeHigh();	}		public int GetCurrentRangeLow()	{		Region3DModel region = GetCurrentRegion();				return region.GetRangeLow();	}		public void UpdateDisplay()	{		fRegionedImageSource.Update();			fCrossSectionSource.Update();	}			protected RGBArrayImageSource CreateImageSource()	{		fSliceAccessor = new SeededRegionSliceAccessor();		fRegionedImageSource = new RegionedImageSource(fSliceAccessor);				if (fRegionsAccessor != null)		{			RegionsOfInterest regions = fRegionsAccessor.GetRegionsOfInterest();						fSliceAccessor.SetRegions(regions);				}				return fRegionedImageSource; 	} 		public void SeedPoint(int x, int y)	{		if (fSliceAccessor.AddSeedPoint(x, y))		{			fCrossSectionAccessor.UpdateMarks();			UpdateDisplay();		}	}		public void AddBoundaryPoint(int x, int y)	{		fSliceAccessor.AddBoundaryPoint(x, y);	}		public void BoundaryPointsAdded()	{		fSliceAccessor.BoundaryPointsAdded();		fSliceAccessor.SeedTheRegions();		fCrossSectionAccessor.UpdateMarks();				UpdateDisplay();	}		private void GenerateHistogram(PixelData pixData)	{		fSliceHistogram.Set(pixData, true);	}		public Histogram GetHistogram()	{		return fSliceHistogram;	}		protected void SetCurrentPixels(PixelData pixels, int currentSlice)	{		GenerateHistogram(pixels);				fSliceAccessor.SetToCurrentSlice(currentSlice, pixels);		fCrossSectionAccessor.UpdateMarks();				super.SetCurrentPixels(pixels, currentSlice);		fCrossSectionSource.Update();	}		public void SetSpaceID(SingleSpaceID spaceID)	{		UpdateSpaceIDs(spaceID);				super.SetSpaceID(spaceID);				UpdateCrossSectionPixels();	}		public void SetData(ImageSpacesAccessor spaceAccessor, ImageFilterAccessor filterAccessor)	{		fRegionsAccessor = spaceAccessor.GetRegions3DAccessor();				UpdateSpaceIDs(fMySpace);				super.SetData(spaceAccessor, filterAccessor);				UpdateCrossSectionPixels();		}	private void UpdateSpaceIDs(SingleSpaceID spaceID)	{		if (fRegionsAccessor != null)		{			fRegionsAccessor.SetSingleSpaceID(spaceID);			RegionsOfInterest regions = fRegionsAccessor.GetRegionsOfInterest();			if (fSelectedRegion == null)			{				fSelectedRegion = GetDefaultRegionLabel();			}						fRegionsAccessor.SetRegionLabel(fSelectedRegion);						if (fSliceAccessor != null)			{				fSliceAccessor.SetRegions(regions);				fSliceAccessor.SetSelectedRegion(fSelectedRegion);			}			fCrossSectionAccessor.SetRegions(regions);						fCrossSectionAccessor.SetSelectedRegion(fSelectedRegion);		}		}		public void CreateRegionVersion()	{		fRegionsAccessor.CreateRegionVersion();	}		public void SetCurrentRegion(String region)	{		if (region == null)		{			region = GetDefaultRegionLabel();		}		if (fSelectedRegion != region)		{			SetToDepth(MaxDepth() / 2);		}		fSelectedRegion = region;		fSliceAccessor.SetSelectedRegion(region);		fCrossSectionAccessor.SetSelectedRegion(region);		fRegionsAccessor.SetRegionLabel(region);				UpdateDisplay();	}}