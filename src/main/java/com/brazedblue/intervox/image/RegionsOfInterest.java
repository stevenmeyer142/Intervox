package com.brazedblue.intervox.image;import java.awt.*;import java.io.*;import com.brazedblue.intervox.view3D.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.util.*;	//	for now only deal with axial viewspublic class RegionsOfInterest extends DataModel implements java.io.Serializable{  	RegionSlice[]				fRegionSlices;	Dimension 					fXYSize;		public static final short 	kMaxRegions = 6;		Region3D[]					fRegions = new Region3D[kMaxRegions];		static final long			serialVersionUID = 459809913146082073L;    public RegionsOfInterest(Dimension xzSize, int maxZ) 	{		fXYSize = xzSize;		CreateRegionSlices(maxZ);		CreateDefaultRegions();   }      	public void Dispose()	{		for (int i = 0; i < fRegions.length; i++)		{			if (fRegions[i] != null)			{				fRegions[i].Dispose();				fRegions[i] = null;			}				}	}		public void UnMarkAllSlices(int mark)	{		for (int i = 0; i < fRegionSlices.length; i++)		{			if (fRegionSlices[i] != null)			{				fRegionSlices[i].UnMark(mark);			}		}	}		private void CreateDefaultRegions()	{		for (int i = 0; i < fRegions.length; i++)		{			fRegions[i] = new Region3D(fRegionSlices.length, i + 1);		}				}		private void readObject(ObjectInputStream s)      	throws ClassNotFoundException, IOException     {      	s.defaultReadObject();				// for backward compatability 12/12/00		for (int i = 0; i < fRegions.length; i++)		{			if (fRegions[i] == null)			{				fRegions[i] = new Region3D(fRegionSlices.length, i + 1);			}		}   }      public void CreateRegionVersion(String whichRegion)   {   		Region3DModel  region = GetRegionWithLabel(whichRegion);				region.CreateRegionVersion();   }   	public synchronized String[] GetRegionsLabels()	{		int count = 0;						for (int i = 0; i < fRegions.length; i++)		{			count += fRegions[i].GetRegionCount();		}			String[] result = new String[count];				int index = 0;		for (int i = 0; i < fRegions.length; i++)		{			index = fRegions[i].AddLabelToArray(result, index);		}				return result;	}		public Region3DModel GetRegionWithLabel(String label)	{		Region3DModel result = fRegions[0].GetPrimaryRegion();		if (label != null)		{			for (int i = 0; i < fRegions.length; i++)			{				Region3DModel region = fRegions[i].GetRegionWithLabel(label);				if (region != null)				{					result = region;					break;				}						}		}				return result;	}	public Dimension GetSliceDimensions()	{		return fXYSize;	} 	public int GetNumOfSlices()	{		return fRegionSlices != null ? fRegionSlices.length : 0;	}		public void CopyRegion(String fromRegionLabel, String toRegionLabel)	{		{			Region3DModel from = GetRegionWithLabel(fromRegionLabel);				Region3DModel to = GetRegionWithLabel(toRegionLabel);				if (from != to)			{				int fromValue = from.GetRegionValue();				int toValue = to.GetRegionValue();				for (int i = 0; i < fRegionSlices.length; i++)				{					fRegionSlices[i].CopyRegion(fromValue, toValue);				}			}		}	}	 		public Mesh3D GetMesh3D(String regionLabel)	{		Mesh3D result = null;				Region3DModel region = GetRegionWithLabel(regionLabel);				result = region.GetMesh3D();				if (result == null && region.HasMesh3D())		{			CreateMesh3D(regionLabel);			result = region.GetMesh3D();		}				return result;	}		public boolean HasMesh3D(String label)	{		Region3DModel region = GetRegionWithLabel(label);		return region != null && region.HasMesh3D();	}		private void CreateRegionSlices(int maxY)	{		fRegionSlices = new RegionSlice[maxY];		if (Debug.fgDebugging)		{			DebugCreateSphere();		}	}	private void DebugCreateSphere()	{		Dimension xyDimension = GetSliceDimensions();		int	depth = GetNumOfSlices();		int minRadius = depth;		if (xyDimension.width < minRadius)		{			minRadius = xyDimension.width;		}		if (xyDimension.height < minRadius)		{			minRadius = xyDimension.height;		}		minRadius /= 8;	// make it 1/4 size		Dimension center = new Dimension(xyDimension.width / 2, xyDimension.height / 2);		int depthCenter = depth / 2;		int mark = 8;	// 3rd region		for (int z = depthCenter - minRadius; z < depthCenter + minRadius; z++)		{			float arcSin = (float)Math.asin((float)(z - depthCenter)/ (float)minRadius);			int circleRadius = Math.round((float)(Math.cos(arcSin) * minRadius));			RegionSlice regionSlice = GetRegionSlice(z);			for (int y = center.height - circleRadius; y < center.height + circleRadius; y++)			{				arcSin = (float)Math.asin((float)(y - center.height)/ (float)circleRadius);				int halfXLength = Math.round((float)(Math.cos(arcSin) * circleRadius));				for (int x = center.width - halfXLength; x < center.width + halfXLength; x++)				{					regionSlice.MarkPixel(x, y, mark);				}			}		}	}		public RegionSlice GetRegionSlice(int slice)	{		if (fRegionSlices[slice] == null)		{			fRegionSlices[slice] = new RegionSlice(fXYSize.width, fXYSize.height);				}				RegionSlice result = fRegionSlices[slice];				return result;	}	void CreateMesh3D(String regionLabel)	{		Region3DModel region3D = GetRegionWithLabel(regionLabel);		byte[][] byteArrays = new byte[fRegionSlices.length][];				int width = fRegionSlices.length > 0 ? fRegionSlices[0].GetWidth() : 0;		int height = fRegionSlices.length > 0 ? fRegionSlices[0].GetHeight() : 0;				for (int i = 0; i < fRegionSlices.length; i++)		{			if (fRegionSlices[i] != null)			{				byteArrays[i] = fRegionSlices[i].GetRegionPixels();			}		}				region3D.CreateMesh3D(width, height, byteArrays);		PostChanged(new DataChangedEvent(region3D, DataChangedEvent.CHANGED, 0, ""));	}		public void SetTransparency(Region3DModel region, float transparency)	{					region.SetTransparency(transparency);			PostChanged(new DataChangedEvent(region, DataChangedEvent.CHANGED, 0, ""));	}		public void SetColor(Region3DModel region, Color color)	{		region.SetColor(color);			PostChanged(new DataChangedEvent(region, DataChangedEvent.CHANGED, 0, ""));	}}