package com.brazedblue.intervox.image;import com.brazedblue.intervox.dicom.DicomImageDataSet;import com.brazedblue.intervox.geometry.Unit;import com.brazedblue.intervox.util.Debug;import com.brazedblue.intervox.util.NeuroSynchUtil;public class SingleSpaceID implements Comparable, java.io.Serializable {  private String fIdentifier;  private int fType = kImageType;  private String fName = "Unknown";  private Unit fUnit = kMMUnit;  private static final String kRealSpaceIdentifier = "Real";  private static final String kJPegSpaceIdentifier = "JPeg";  private static final String kDefaultSpaceIdentifier = "Default";  private static final Unit kMMUnit = new FloatUnit(Unit.CENTIMETER);  public static final int kImageType = 0;  public static final int kLocalizerType = 1;  private static SingleSpaceID fgRealSpaceID = new SingleSpaceID(kRealSpaceIdentifier);  static {    fgRealSpaceID.fType = kLocalizerType;    fgRealSpaceID.SetUnit(new FloatUnit(Unit.CENTIMETER));    fgRealSpaceID.SetName("Localizer");  }  private static SingleSpaceID fgJPegSpaceID = new SingleSpaceID(kJPegSpaceIdentifier);  private static SingleSpaceID fgDefaultLocalSpace = new SingleSpaceID(kDefaultSpaceIdentifier);  static final long serialVersionUID = -9006843339729919871L;  public static SingleSpaceID GetSingleSpaceID(DicomImageDataSet dicom) throws java.io.IOException {    String seriesID = dicom.GetSeriesID();    if (seriesID == null) {      throw new java.io.IOException("Dicom set does not have a series ID");    }    return new SingleSpaceID(seriesID);  }  public static SingleSpaceID GetRealSpaceID() {    return fgRealSpaceID;  }  public static SingleSpaceID GetDefaultVirtualSpaceID() {    return fgDefaultLocalSpace;  }  public static SingleSpaceID GetJPEGVirtualSpaceID() {    return fgJPegSpaceID;  }  private SingleSpaceID(String identifier) {    fIdentifier = identifier;    if (Debug.fgDebugging && fIdentifier == null) {      NeuroSynchUtil.ErrorMessage(          "SingleSpaceID: fIdentifier- " + fIdentifier, NeuroSynchUtil.kNoDlog);    }  }  public Unit GetUnit() {    return fUnit;  }  public int compareTo(Object o) {    SingleSpaceID other = (SingleSpaceID) o;    return fIdentifier.compareTo(other.fIdentifier);  }  public boolean IsType(int type) {    return type == fType;  }  void SetUnit(Unit unit) {    fUnit = unit;  }  public boolean equals(Object obj) {    return (obj != null)        && (obj instanceof SingleSpaceID)        && (fIdentifier.equals(((SingleSpaceID) obj).fIdentifier));  }  public static SingleSpaceID NewDicomSpaceID(String seriesID) {    return new SingleSpaceID(seriesID);  }  public String toString() {    String result = super.toString();    result +=        "(fIdentifier) "            + fIdentifier            + ", (fType) "            + (fType == kImageType ? "image" : "localizer");    return result;  }  void SetName(String name) {    fName = name;  }  public String GetName() {    return fName;  }}