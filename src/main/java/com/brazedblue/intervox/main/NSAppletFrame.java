package com.brazedblue.intervox.main;import com.brazedblue.intervox.display.*;import com.brazedblue.intervox.util.Debug;import com.brazedblue.intervox.util.NeuroSynchUtil;import java.awt.*;import java.awt.event.*;import javax.swing.*;public class NSAppletFrame extends JFrame /* implements anInterface */ {  private static final String kLookAndFeelClassName = "com.sun.java.swing.plaf.mac.MacLookAndFeel";  public static NSAppletFrame fgApplet; // debugging  private static final String kMRJVendor = "Apple Computer, Inc.";  private static final String kVendorProperty = "java.vendor";  NSMainActor fMainActor;  public NSAppletFrame() {    super("Intervox");    NeuroSynchUtil.SetImageGuided(true); // 	for mac OX x    Debug.ResetSystemStreams();    Debug.fGAppletFrame = this; // debugging    NeuroSynchUtil.fgMainFrame = this;    fgApplet = this;    MenuBar menubar = new MenuBar();    setMenuBar(menubar);    Rectangle deskBounds = CustomOS.GetDesktopRect();    deskBounds.width -= 10;    deskBounds.height -= 60;    setLocation(0, 0);    setSize(deskBounds.width, deskBounds.height);    // Set up the GUI.    JDesktopPane desktop = new JDesktopPane(); // a specialized layered pane    setLayeredPane(desktop);    desktop.setSize(deskBounds.getSize());    fMainActor = new NSMainActor(desktop);    String vendor = System.getProperty(kVendorProperty);    validate();    setVisible(true);  }  public static void main(String[] args) {    if (false) {      try {        UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");      } catch (Exception e) {        System.err.println("Couldn't use the " + "look and feel: " + e);      }    }    System.out.println(System.getProperty("java.library.path"));    JFrame frame = new NSAppletFrame();    System.out.println("Main ended");  }  public void dispose() {    if (fMainActor != null) {      fMainActor.stop();    }  }  class MRJComponentAdapter extends ComponentAdapter {    private Point fTopLeft = new Point(0, 40);    MRJComponentAdapter() {}    public void componentMoved(ComponentEvent e) {      fTopLeft = getLocation();    }    public void componentResized(ComponentEvent e) {      // this is for a MRJ bug      if (!fTopLeft.equals(getLocation())) {        setLocation(fTopLeft.x, fTopLeft.y);      }    }    public void componentShown(ComponentEvent e) {      Rectangle deskBounds = CustomOS.GetDesktopRect();      fTopLeft.x = 0;      fTopLeft.y = 40;      setLocation(fTopLeft.x, fTopLeft.y);      setSize(deskBounds.width - 10, deskBounds.height - 50);    }  }}