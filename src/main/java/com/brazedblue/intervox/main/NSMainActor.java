package com.brazedblue.intervox.main;import javax.swing.*;import javax.swing.event.*;import java.io.*;import java.awt.*;import java.util.*;import java.awt.event.*;import java.beans.PropertyVetoException;import com.brazedblue.intervox.util.*;import com.brazedblue.intervox.view3D.Engine3D;import com.brazedblue.intervox.view3D.Image3DFrame;import com.brazedblue.intervox.tracker.*;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.display.*;import com.brazedblue.intervox.serial.*;import com.brazedblue.intervox.device.*;import com.brazedblue.intervox.dicom.*;import com.brazedblue.intervox.data.*;public class NSMainActor implements ActionListener, WindowListener  {	JDesktopPane		fDesktopPane;	  	JInternalFrame		fTrackerFrame;	TrackerController	fTrackerController;	Point				fInternalFrameTopLeft = new Point(0, 0);		NSMainActorImagePanelListener 	fImagePanelListener;	ConfigurationManager			fConfigurationManager = new ConfigurationManager();	DataManager						fDataManager = new DataManager();		MenuItem 						fCopyItem;		static public boolean			fgProfiling = false;	static public NSMainActor		fgMainActor;		static final private String kImportImagesStr = "Import DICOM Images...";	static final private String kImportJPEGImagesStr = "Import JPEG Images...";	static final private String kOpenSeriesStr = "Open Image Series...";	static final private String kConfigurationStr = "Configure...";	static final private String kQuitStr = "Quit";	static final private String kDebugDumpStr = "Debug Dump";	static final private String kTrackerMenuTitleStr = "Tracker";	static final private String kShowStr = "Show";	static final private String kHideStr = "Hide";		static private final String kLocalDictionaryName = "DICOM Dictionary";	static public final String kDicomDictionaryJarfile = "data/DICMDict.txt";		static private final String kDebugChangeStr = "Debug Change";	    public NSMainActor(JDesktopPane deskTopPane) 	{		fDesktopPane = deskTopPane;		fgMainActor = this;				fImagePanelListener = new NSMainActorImagePanelListener(fDesktopPane);				if (NeuroSynchUtil.GetImageGuided())		{			fTrackerController = new TrackerController(GetConfigurationManager().GetDefaultConfiguration());		}				SetupComponents();		SetupMenuBar();//		neurosynch.util.NeuroSynchUtil.WriteSerialVersionID("neurosynch.data.LayoutSelectionsNS");		if (NeuroSynchUtil.GetImageGuided())		{			fTrackerFrame.validate();		}		JFrame parent = GetFrame();		parent.addWindowListener(this);		//	 so that  the serial port will be closed											// 	 when the window is closed                	}		private ConfigurationManager GetConfigurationManager()	{		return fConfigurationManager;	}		private void DebugExecute()	{		try		{			java.util.Vector vector = new java.util.Vector();						ByteArrayOutputStream byteout = new ByteArrayOutputStream();			ObjectOutputStream objectOut = new ObjectOutputStream(byteout);						objectOut.writeObject(vector);						ByteArrayInputStream bytein = new ByteArrayInputStream(byteout.toByteArray());			ObjectInputStream objectIn = new ObjectInputStream(bytein);						java.util.Vector newVector = (java.util.Vector)objectIn.readObject();						System.out.println(newVector.toString());		}		catch (ClassNotFoundException e1)		{				}		catch (IOException e1)		{				}	}		void Show3DImageWindow()	{		Image3DFrame.ShowFrame(GetFrame(), 0);	}		JDesktopPane GetDesktopPane()	{		return fDesktopPane;	}		void SetupComponents()	{		if (NeuroSynchUtil.GetImageGuided())		{			SetupTrackerFrame(false );		}							}		void SetupTrackerFrame(Boolean showInitially)	{		fTrackerFrame = TrackerCtrlBar.CreateTrackerFrame(fTrackerController);				fTrackerFrame.pack();		Dimension deskSize = fDesktopPane.getSize();		Dimension trackerSize = fTrackerFrame.getSize(); 		fTrackerFrame.setLocation(deskSize.width - trackerSize.width, 20);		fTrackerFrame.setLayer(JLayeredPane.PALETTE_LAYER);		if (showInitially) {			fDesktopPane.add(fTrackerFrame);		}	}		void SetupMenuBar()	{		MenuBar menuBar = GetMenuBar();		if (menuBar != null)		{			Menu fileMenu = new Menu("File");							MenuItem item = new MenuItem(kOpenSeriesStr);			item.setShortcut(new MenuShortcut(KeyEvent.VK_O));			item.addActionListener(this);			fileMenu.add(item);						fileMenu.addSeparator();						item = new MenuItem(kImportImagesStr);			item.addActionListener(this);			fileMenu.add(item);						item = new MenuItem(kImportJPEGImagesStr);			item.addActionListener(this);			fileMenu.add(item);						   			fileMenu.addSeparator();						item = new MenuItem(kQuitStr);			item.setShortcut(new MenuShortcut(KeyEvent.VK_Q));			item.setActionCommand(kQuitStr);			item.addActionListener(this);			fileMenu.add(item);			menuBar.add(fileMenu);                           						if (NeuroSynchUtil.GetImageGuided())			{				Menu trackerMenu = fTrackerController.CreateTrackerMenu();					item = new MenuItem(kShowStr);				item.addActionListener(this);				trackerMenu.insert(item, 0);					item = new MenuItem(kConfigurationStr);				item.addActionListener(this);				trackerMenu.insert(item, 1);								trackerMenu.insertSeparator(2);				if (Debug.fgDebugging && false) // debugging, but this code fails with and exception{	item = new MenuItem(kDebugChangeStr);	item.addActionListener(this);	trackerMenu.add(item);    Class c = null;    try {      c = Class.forName("java.awt.datatransfer.DataFlavor");    }    catch (ClassNotFoundException e) {      System.err.println(e);     }        if (c != null)    {        // retrieve and check package information        Package pkg = c.getPackage();        if (pkg == null) {        System.out.println("No version information");        }        else {            System.out.println(pkg);			System.out.println("pkg.getImplementationVersion " + pkg.getImplementationVersion() +					" pkg.getSpecificationVersion " + pkg.getSpecificationVersion());            if (pkg.isCompatibleWith("18"))            {                System.out.println("Compatible with 1");                java.awt.datatransfer.DataFlavor[] flavorsList = {java.awt.datatransfer.DataFlavor.imageFlavor};                                java.util.Map map = java.awt.datatransfer.SystemFlavorMap.getDefaultFlavorMap().getNativesForFlavors(flavorsList);                                String natives = (String)map.get(flavorsList[0]);                                if (natives != null)                {                    System.out.println(natives);                }            }        }    }        }					menuBar.add(trackerMenu);							}			Menu editMenu = new Menu("Edit");			fCopyItem = new MenuItem("Copy");			editMenu.insert(fCopyItem, 0);			fCopyItem.setShortcut(new MenuShortcut(KeyEvent.VK_C));			fCopyItem.setEnabled(false);			menuBar.add(editMenu);		}		else 		{			NeuroSynchUtil.ErrorMessage("No menu bar in FramelessApplet", NeuroSynchUtil.kNoDlog);				} 	}		private void AddImageSeriesPanel(ImageSeriesPanel panel)	{		fImagePanelListener.AddImageSeriesPanel(panel, panel.GetInternalFrame());		fDataManager.AddData(panel.GetData());	}	private void RemoveImageSeriesPanel(ImageSeriesPanel panel, JInternalFrame frame)	{		fDataManager.RemoveData(panel.GetData());		fImagePanelListener.RemoveImageSeriesPanel(frame);	}	private PatientData GetSelectedFile()	{		ImageSeriesPanel frontPanel = fImagePanelListener.GetFrontPanel();				return (frontPanel != null) ? frontPanel.GetData() : null;	}	public void actionPerformed(ActionEvent e)	{		if (e.getActionCommand().equals(kImportImagesStr))		{			ImportDicomFiles();		}		else if (e.getActionCommand().equals(kImportJPEGImagesStr))		{			ImportJPEGFiles();		}		else if (e.getActionCommand().equals(kOpenSeriesStr))		{			OpenSeriesFile();		}		else if (e.getActionCommand().equals(kConfigurationStr) && NeuroSynchUtil.GetImageGuided())		{			ConfigurationManager manager = GetConfigurationManager();						if (manager != null)			{				manager.EditConfigurations(fTrackerController, /*fDesktopPane,*/ GetSelectedFile());			}			else			{				NeuroSynchUtil.ErrorMessage("NSMainActor.actionPerformed null ConfigurationManager.", NeuroSynchUtil.kNoDlog);			}		}		else if (e.getActionCommand().equals(kShowStr) && NeuroSynchUtil.GetImageGuided())		{			if (fTrackerFrame.getParent() == null)			{				fDesktopPane.add(fTrackerFrame);			}			try			{				fTrackerFrame.setClosed(false);			}			catch (java.beans.PropertyVetoException ex)			{						}			fTrackerFrame.show();		}				else if (e.getActionCommand().equals(kQuitStr))		{			Exit();					}				else if (e.getActionCommand().equals(kDebugChangeStr)) // debugging		{			DebugExecute();//			ImageSpacePerspective.DebugIncrement();		}		}		public synchronized void Exit() 		{			stop();		java.lang.Runtime.getRuntime().exit(0);    }    	public synchronized void stop() 		{			if (NeuroSynchUtil.GetImageGuided())		{			fTrackerController.StopTracker();		}		/*		if (fConfigurationManager != null) 		{			fConfigurationManager.UpdateFileIfNecessary();		} */				Engine3D.ShutDown();		    }		public void windowOpened(WindowEvent e)	{	}    /**     * Invoked when a window is in the process of being closed.     * The close operation can be overridden at this point.     */    public void windowClosing(WindowEvent e)	{		Exit();	}    /**     * Invoked when a window has been closed.     */    public void windowClosed(WindowEvent e)	{			}    /**     * Invoked when a window is iconified.     */    public void windowIconified(WindowEvent e)	{	}    /**     * Invoked when a window is de-iconified.     */    public void windowDeiconified(WindowEvent e)	{	}		class NSMainActorImagePanelListener extends InternalFrameAdapter 	{		Hashtable fImageSeriesPanels = new Hashtable();				JInternalFrame		fSelectedFrame;		JLayeredPane		fLayeredPane ;				NSMainActorImagePanelListener(JLayeredPane layeredPane)		{			fLayeredPane = layeredPane;		}				void AddImageSeriesPanel(ImageSeriesPanel panel, JInternalFrame itsFrame)		{			if (GetAncestorLayeredPane(itsFrame) == fLayeredPane)			{				if (!fImageSeriesPanels.containsKey(itsFrame))				{					fImageSeriesPanels.put(itsFrame, panel);					itsFrame.addInternalFrameListener(this);				}				else				{					NeuroSynchUtil.ErrorMessage("JInternalFrame added more than once in " +					"NSMainActorImagePanelListener.AddImageSeriesPanel", NeuroSynchUtil.kNoDlog);				}			}			else			{				NeuroSynchUtil.ErrorMessage("Wrong JInternalFrame added in " +					"NSMainActorImagePanelListener.AddImageSeriesPanel", NeuroSynchUtil.kNoDlog);			}		}				private JLayeredPane GetAncestorLayeredPane(JInternalFrame frame)		{			return JLayeredPane.getLayeredPaneAbove(frame);		}				public void internalFrameActivated(InternalFrameEvent e)		{			if (NeuroSynchUtil.GetImageGuided())			{				UpdateTrackerData();			}			//			ActivateMenuForFrontPanel(true);		}				public void internalFrameDeactivated(InternalFrameEvent e)		{			if (NeuroSynchUtil.GetImageGuided())			{				UpdateTrackerData();			}			//			ActivateMenuForFrontPanel(false);		}				public void internalFrameClosed(InternalFrameEvent e)		{			JInternalFrame frame = (JInternalFrame)e.getSource();			DoImagesFrameClosed(frame);		}				private void DoImagesFrameClosed(JInternalFrame frame)		{			if (NeuroSynchUtil.GetImageGuided())			{				UpdateTrackerData();			}			ImageSeriesPanel panel = (ImageSeriesPanel)fImageSeriesPanels.get(frame);			NSMainActor.this.RemoveImageSeriesPanel(panel, frame);		}				private void RemoveImageSeriesPanel(JInternalFrame frame)		{			if (fImageSeriesPanels.remove(frame) == null)			{				NeuroSynchUtil.ErrorMessage("JInternalFrame not found in " +					"NSMainActorImagePanelListener.internalFrameClosed", NeuroSynchUtil.kNoDlog);			}			else			{				frame.removeInternalFrameListener(this);			}		}				private ImageSeriesPanel GetFrontPanel()		{			ImageSeriesPanel result = null;			int lowIndex = Integer.MAX_VALUE;						JInternalFrame frontFrame = null;						for (Enumeration frames = fImageSeriesPanels.keys(); frames.hasMoreElements(); )			{				JInternalFrame frame = (JInternalFrame)frames.nextElement();								int index = fLayeredPane.getIndexOf(frame);				if (index >= 0 && index < lowIndex)				{					lowIndex = index;					frontFrame = frame;				}			}						if (frontFrame != null)			{				result = (ImageSeriesPanel)fImageSeriesPanels.get(frontFrame);			}						return result;		}				private void UpdateTrackerData()		{			PatientData data = GetSelectedFile();						if (data != null)			{				fTrackerController.SetConfiguration(data.GetConfiguration());					fTrackerController.SetTransformerAccess(data.GetCoRegistrations().GetTransformerAccess());			}			else			{				fTrackerController.SetConfiguration(GetConfigurationManager().GetDefaultConfiguration());					fTrackerController.SetTransformerAccess(null);			}		}		/*		private void ActivateMenuForFrontPanel(boolean activate)		{			ImageSeriesPanel frontPanel = GetFrontPanel();						if (frontPanel != null)			{				if (fCopyItem != null)				{					frontPanel.ActivateCopyItem(fCopyItem, activate);				}			}		} */	}    /**     * Invoked when a window is activated.     */    public void windowActivated(WindowEvent e)	{	}	    /**     * Invoked when a window is de-activated.     */    public void windowDeactivated(WindowEvent e)	{	}	public MenuBar GetMenuBar()	{		JFrame frame = GetFrame();				MenuBar result = frame.getMenuBar();		return result;	}		public JFrame GetFrame()  	{		return (JFrame)NeuroSynchUtil.GetFrame(fDesktopPane);	}		ImageSeriesPanel CreateImagePanel()	{		JInternalFrame frame = new ImagesFrame("Image Series", true, true);		frame.setDefaultCloseOperation(JInternalFrame.DISPOSE_ON_CLOSE);		ImageSeriesPanel imagePanel = new ImageSeriesPanel(frame, fTrackerController);		JScrollPane scrollPane = new JScrollPane(imagePanel);		frame.setContentPane(scrollPane);				if (NeuroSynchUtil.GetImageGuided())		{			frame.addInternalFrameListener(fTrackerController.GetInternalFrameListener());		}		fDesktopPane.add(frame);		Dimension size = fDesktopPane.getSize();		frame.setBounds(fInternalFrameTopLeft.x, fInternalFrameTopLeft.y, 								size.width - fInternalFrameTopLeft.x, size.height - fInternalFrameTopLeft.y);				fInternalFrameTopLeft.y += 20;		fInternalFrameTopLeft.x += 10;		return imagePanel;	}		void OpenSeriesFile()	{		ImageSeriesPanel imagePanel = CreateImagePanel();				TrackerSettingsAccess trackerSettings = null;		if (PatientData.kDontSerializePatientData && NeuroSynchUtil.GetImageGuided())		{			trackerSettings = fTrackerController.GetTrackerSettings();		}				PatientData data = ImageHandler.ReadSeries(GetFrame(), imagePanel.GetProgressBroadcaster(), trackerSettings);				if (data != null)		{			data.SetCofigurationManager(GetConfigurationManager());			if (!PatientData.kDontSerializePatientData && NeuroSynchUtil.GetImageGuided())			{				data.UpdateTrackerSettingsAccess(fTrackerController.GetTrackerSettings());			}			imagePanel.SetData(data);			AddImageSeriesPanel(imagePanel);		} 		else		{			imagePanel.DisposeFrame();		}	}		void ImportDicomFiles()	{			ImageSeriesPanel imagePanel = CreateImagePanel();                PatientData data = new PatientData();                imagePanel.SetData(data);		if (ImageHandler.ImportDicomImages(GetFrame(), imagePanel.GetProgressBroadcaster(), data))		{			data.SetCofigurationManager(GetConfigurationManager());			data.SetConfiguration(GetConfigurationManager().GetDefaultConfiguration());			AddImageSeriesPanel(imagePanel);		}		else		{			imagePanel.DisposeFrame();		}	}	void ImportJPEGFiles()	{		ImageSeriesPanel imagePanel = CreateImagePanel();		PatientData data = ImageHandler.ImportJPEGFiles(GetFrame(), imagePanel.GetProgressBroadcaster(), imagePanel);		if (data != null)		{			data.SetCofigurationManager(GetConfigurationManager());			data.SetConfiguration(GetConfigurationManager().GetDefaultConfiguration());			imagePanel.SetData(data);			AddImageSeriesPanel(imagePanel);		}		else		{			imagePanel.DisposeFrame();		}		} }