package com.brazedblue.intervox.registration;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.device.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.tracker.TrackerSettingsAccess;import com.brazedblue.intervox.util.Debug;import com.brazedblue.intervox.util.NeuroSynchUtil;import java.io.*;import java.util.Enumeration;import java.util.Vector;public class CoRegistrations extends DataModel    implements CoRegistrationsAccess, TransformerAccess, java.io.Serializable {  SortedSpaceLinksTable fTransformers = new SortedSpaceLinksTable();  SortedSpaceLinksTable fRegistrationsTable = new SortedSpaceLinksTable();  SpaceLinkAdapter fSelectedRegistration;  boolean fIsUsingReference = false;  transient FiducialSetsAccess fFiducialsAccessor;  transient SingleSpaceIDResolver fSingleSpaceIDResolver;  static final long serialVersionUID = -8498986794070992465L;  //	later change these uses to registration listener  public static final String kRegistrationAdded = "RegAdded";  public static final String kRegistrationDeleted = "RegDeleted";  private static final boolean kUseSecondaryTransformers = true;  SortedSpaceLinksTable fSecondaryTransformers =      kUseSecondaryTransformers ? new SortedSpaceLinksTable() : null;  public CoRegistrations(FiducialSetsAccess fiducialsAccessor) {    fFiducialsAccessor = fiducialsAccessor;  }  public CoRegistrationsAccess GetCoRegistrationsAccess() {    return this;  }  public TransformerAccess GetTransformerAccess() {    return this;  }  public SpaceLink GetSelectedSpaceLink() {    if (fSelectedRegistration == null) {      fSelectedRegistration = new SpaceLinkAdapter();      fSelectedRegistration.SetLinks(          SingleSpaceID.GetRealSpaceID(), SingleSpaceID.GetDefaultVirtualSpaceID());    }    return fSelectedRegistration;  }  public void SetSelectedSpaceLink(SingleSpaceID fromSpace, SingleSpaceID toSpace) {    if (fSelectedRegistration == null) {      fSelectedRegistration = new SpaceLinkAdapter();    }    fSelectedRegistration.SetLinks(fromSpace, toSpace);    GetDataModel()        .PostChanged(            new DataChangedEvent(                fSelectedRegistration, DataChangedEvent.CHANGED, 0, kSetSelectedSpaceLink));  }  public void SetSingleSpaceIDResolver(SingleSpaceIDResolver resolver) {    fSingleSpaceIDResolver = resolver;  }  private SingleSpaceID ResolveSingleSpaceID(SingleSpaceID spaceID) {    if (fSingleSpaceIDResolver != null) {      spaceID = fSingleSpaceIDResolver.ResolveSingleSpaceID(spaceID);    }    return spaceID;  }  public boolean CanTransformFrom(SingleSpaceID fromSpace) {    boolean result = false;    Enumeration elements = fTransformers.GetElements();    while (elements.hasMoreElements()) {      CoordinateTransformerModel transformer = (CoordinateTransformerModel) elements.nextElement();      if (fromSpace.equals(transformer.GetSpace1()) || fromSpace.equals(transformer.GetSpace2())) {        result = true;        break;      }    }    return result;  }  public void SetFiducialsAccess(FiducialSetsAccess fiducialsAccessor) {    fFiducialsAccessor = fiducialsAccessor;  }  public SpaceLink[] GetAllRegistrationPairings() {    return fRegistrationsTable.GetAllPairings();  }  public DataModel GetDataModel() {    return this;  }  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {    s.defaultReadObject();    if (fSecondaryTransformers == null && kUseSecondaryTransformers) {      fSecondaryTransformers = new SortedSpaceLinksTable();    }  }  public void UpdateTrackerSettingsAccess(TrackerSettingsAccess trackerSettings) {    Enumeration elements = fRegistrationsTable.GetElements();    while (elements.hasMoreElements()) {      ReferencePointPairing pairing = (ReferencePointPairing) elements.nextElement();      Registration[] registrations = pairing.GetElements();      for (int i = 0; i < registrations.length; i++) {        registrations[i].SetProperty(TrackerSettingsAccess.kPropertyLabel, trackerSettings);      }    }  }  private ReferencePointPairing GetReferencePointPairing(      SingleSpaceID space1, SingleSpaceID space2, boolean createIfNULL) {    ReferencePointPairing result = (ReferencePointPairing) fRegistrationsTable.Get(space1, space2);    if (result != null) {      result.Update(fFiducialsAccessor);    } else if (createIfNULL) {      result = new ReferencePointPairing(space1, space2, fFiducialsAccessor);      fRegistrationsTable.Insert(result);      //	for listeners to an empty pairing      PostChanged(new DataChangedEvent(result, DataChangedEvent.CHANGED, 0, kRegistrationAdded));    }    return result;  }  public boolean IsUsingReference() {    return fIsUsingReference;  }  public void SetUsingReference(boolean usingReference) {    fIsUsingReference = usingReference;    Enumeration elements = fTransformers.GetElements();    while (elements.hasMoreElements()) {      CoordinateTransformerModel transformer = (CoordinateTransformerModel) elements.nextElement();      transformer.SetUsingReference(usingReference);    }  }  public TransformationTypeModel GetTransformationType(      SingleSpaceID fromSpace, SingleSpaceID toSpace) {    return GetTransformer(fromSpace, toSpace);  }  public boolean CanUseReferenceFrame() {    boolean result = false;    Enumeration elements = fTransformers.GetElements();    while (elements.hasMoreElements()) {      CoordinateTransformerModel transformer = (CoordinateTransformerModel) elements.nextElement();      if (transformer.CanUseReferenceFrame()) {        result = true;        break;      }    }    return result;  }  private void AddSecondaryTransformer(      CoordinateTransformerModel transformer1,      CoordinateTransformerModel transformer2,      SingleSpaceID fromSpace,      SingleSpaceID middleSpace,      SingleSpaceID toSpace) {    CoordinateTransformerModel coordTransformer =        new SecondaryTransformer(transformer1, transformer2, fromSpace, middleSpace, toSpace);    ;    fSecondaryTransformers.Insert(coordTransformer);    if (Debug.fgDebugging) {      System.out.println(          "Secondary transformer added\r1- "              + fromSpace.toString()              + "\r2- "              + middleSpace.toString()              + "\r3- "              + toSpace.toString());    }  }  private void AddSecondaryTransformers(CoordinateTransformerModel transformer1) {    SingleSpaceID fromSpace = transformer1.GetSpace1();    SingleSpaceID toSpace = transformer1.GetSpace2();    Enumeration elements = fTransformers.GetElements();    while (elements.hasMoreElements()) {      CoordinateTransformerModel transformer2 = (CoordinateTransformerModel) elements.nextElement();      if (transformer2.GetSpace1().equals(toSpace) && !transformer2.GetSpace2().equals(fromSpace)) {        AddSecondaryTransformer(            transformer1, transformer2, fromSpace, toSpace, transformer2.GetSpace2());      }      if (transformer2.GetSpace2().equals(toSpace) && !transformer2.GetSpace1().equals(fromSpace)) {        AddSecondaryTransformer(            transformer1, transformer2, fromSpace, toSpace, transformer2.GetSpace1());      }      if (transformer2.GetSpace1().equals(fromSpace) && !transformer2.GetSpace2().equals(toSpace)) {        AddSecondaryTransformer(            transformer1, transformer2, toSpace, fromSpace, transformer2.GetSpace2());      }      if (transformer2.GetSpace2().equals(fromSpace) && !transformer2.GetSpace1().equals(toSpace)) {        AddSecondaryTransformer(            transformer1, transformer2, toSpace, fromSpace, transformer2.GetSpace1());      }    }  }  public void InstallTransformation(      TransformationMatrix transformer, SingleSpaceID fromSpace, SingleSpaceID toSpace) {    if (transformer != null) {      CoordinateTransformer coordTransformer =          (CoordinateTransformer) fTransformers.Get(fromSpace, toSpace);      if (coordTransformer == null) {        coordTransformer = new CoordinateTransformer(transformer, fromSpace, toSpace);        fTransformers.Insert(coordTransformer);        coordTransformer.SetUsingReference(fIsUsingReference);        if (kUseSecondaryTransformers) {          AddSecondaryTransformers(coordTransformer);        }      } else {        coordTransformer.SetTransformationMatrix(transformer);      }    } else {      //			RemoveTransformer(toSpace, fromSpace);    }  }  public RegistrationsAccess GetRegistrationsAccess(      SingleSpaceID fromSpace, SingleSpaceID toSpace) {    return new CoRegistrationsRegistrationsAccess(fromSpace, toSpace);  }  private synchronized void RemoveTransformer(SingleSpaceID fromSpace, SingleSpaceID toSpace) {    fTransformers.Remove(fromSpace, toSpace);  }  public void InstallTransformation(      TransformationMatrix transformer,      SingleSpaceID fromSpace,      SingleSpaceID toSpace,      Object changer) {    InstallTransformation(transformer, fromSpace, toSpace); // broadcast changes changer  }  public FloatPoint TransformPoint(FloatPoint pt, SingleSpaceID fromSpace, SingleSpaceID toSpace) {    FloatPoint result = null;    CoordinateTransformerModel transformer = GetTransformer(fromSpace, toSpace);    if (transformer != null) {      result = transformer.TransformPoint(pt, fromSpace, toSpace);    }    return result;  }  public ThreeDVector TransformVector(      ThreeDVector pt, SingleSpaceID fromSpace, SingleSpaceID toSpace) {    ThreeDVector result = null;    CoordinateTransformerModel transformer = GetTransformer(fromSpace, toSpace);    if (transformer != null) {      result = transformer.TransformVector(pt, fromSpace, toSpace);    }    return result;  }  public boolean CanTransform(SingleSpaceID fromSpace, SingleSpaceID toSpace) {    boolean result = false;    CoordinateTransformerModel transformer = GetTransformer(fromSpace, toSpace);    if (transformer != null) {      result = transformer.CanTransform(fromSpace, toSpace);    }    return result;  }  public void ProcessLocalizerPoint(LocalizerPointOutput output) {    if (fIsUsingReference) {      Enumeration elements = fTransformers.GetElements();      while (elements.hasMoreElements()) {        CoordinateTransformerModel transformer =            (CoordinateTransformerModel) elements.nextElement();        transformer.ProcessLocalizerPoint(output);      }    }  }  protected CoordinateTransformerBase GetTransformer(      SingleSpaceID fromSpace, SingleSpaceID toSpace) {    CoordinateTransformerBase result =        (CoordinateTransformerBase) fTransformers.Get(fromSpace, toSpace);    if (result == null && kUseSecondaryTransformers) {      result = (CoordinateTransformerBase) fSecondaryTransformers.Get(fromSpace, toSpace);    }    return result;  }  private static class ReferencePointPairing extends DataModel      implements SpaceLink, DataModelListener, java.io.Serializable {    private SingleSpaceID fSpace1;    private SingleSpaceID fSpace2;    private transient FiducialSetsAccess fFiducials1;    private transient FiducialSetsAccess fFiducials2;    private Vector fRegistrations = new Vector();    static final long serialVersionUID = 8840419594596668387L;    private ReferencePointPairing(        SingleSpaceID space1, SingleSpaceID space2, FiducialSetsAccess accessor) {      fSpace1 = space1;      fSpace2 = space2;      Update(accessor);    }    private void SetFiducial1(FiducialSetsAccess fiducials) {      if (fFiducials1 != null) {        //	this shouldn't happen, Sanity check        NeuroSynchUtil.ErrorMessage(            "SetFiducial1, fFiducials1- " + fFiducials1, NeuroSynchUtil.kNoDlog);        fFiducials1.GetDataModel().RemoveListener(this);      }      fFiducials1 = fiducials;      if (fFiducials1 != null) {        fFiducials1.GetDataModel().AddListener(this);      }    }    private void SetFiducial2(FiducialSetsAccess fiducials) {      if (fFiducials2 != null) {        //	this shouldn't happen, Sanity check        NeuroSynchUtil.ErrorMessage(            "SetFiducial2, fFiducials2- " + fFiducials2, NeuroSynchUtil.kNoDlog);        fFiducials2.GetDataModel().RemoveListener(this);      }      fFiducials2 = fiducials;      if (fFiducials2 != null) {        fFiducials2.GetDataModel().AddListener(this);      }    }    void Update(FiducialSetsAccess accessor) {      if (fFiducials1 == null && accessor.HasFiducials(fSpace1)) {        SetFiducial1(accessor.GetNewAccess(fSpace1));      }      if (fFiducials2 == null && accessor.HasFiducials(fSpace2)) {        SetFiducial2(accessor.GetNewAccess(fSpace2));      }    }    public SingleSpaceID GetSpace1() {      return fSpace1;    }    public SingleSpaceID GetSpace2() {      return fSpace2;    }    private synchronized Registration[] GetElements() {      Registration[] result = new Registration[fRegistrations.size()];      fRegistrations.copyInto(result);      return result;    }    private void InsertRegistration(FiducialPoint fid1, FiducialPoint fid2) {      //	each location should be unique      DeleteRegistration(fid1, null);      DeleteRegistration(null, fid2);      Registration newRegistration = new Registration(fid1, fid2);      fRegistrations.addElement(newRegistration);      PostChanged(          new DataChangedEvent(newRegistration, DataChangedEvent.CHANGED, 0, kRegistrationAdded));    }    public boolean HasLocation(Location3D loc1, Location3D loc2) {      return GetRegistration(loc1, loc2) != null;    }    private void DeleteRegistration(FiducialPoint fid1, FiducialPoint fid2) {      Location3D loc1 = (fid1 != null) ? fid1.GetLocation() : null;      Location3D loc2 = (fid2 != null) ? fid2.GetLocation() : null;      Registration toDelete = GetRegistration(loc1, loc2);      if (toDelete != null) {        fRegistrations.removeElement(toDelete);        PostChanged(            new DataChangedEvent(toDelete, DataChangedEvent.CHANGED, 0, kRegistrationDeleted));      }    }    private Registration GetRegistration(Location3D loc1, Location3D loc2) {      Enumeration iter = fRegistrations.elements();      boolean loc1Equals;      boolean loc2Equals;      Registration result = null;      try {        while (iter.hasMoreElements()) {          Registration registration = (Registration) iter.nextElement();          loc1Equals = true;          loc2Equals = true;          if (loc1 != null) {            Location3D comparePt = registration.GetLocation1();            if (comparePt != null && loc1.Equals(comparePt)) {              result = registration;              break;            }          }          if (loc2 != null) {            Location3D comparePt = registration.GetLocation2();            if (comparePt != null && loc2.Equals(comparePt)) {              result = registration;              break;            }          }        }      } catch (ComputationException e) {        //	keep going      }      return result;    }    public void DataModelChanged(DataModel model, DataChangedEvent event) {      if (FiducialPoints.k1PointDeletedMsg.equals(event.GetMessage())          || FiducialPoints.kAllPointsDeletedMsg.equals(event.GetMessage())) {        try {          if ((fFiducials1 != null) && (model == fFiducials1.GetDataModel())) {            for (int i = fRegistrations.size() - 1; i >= 0; i--) {              Registration reg = (Registration) fRegistrations.elementAt(i);              if (!fFiducials1.HasPoint(reg.GetLocation1())) {                fRegistrations.removeElementAt(i);              }            }          }          if ((fFiducials2 != null) && (model == fFiducials2.GetDataModel())) {            for (int i = fRegistrations.size() - 1; i >= 0; i--) {              Registration reg = (Registration) fRegistrations.elementAt(i);              if (!fFiducials2.HasPoint(reg.GetLocation2())) {                fRegistrations.removeElementAt(i);              }            }          }        } catch (ComputationException e) {        }      }    }  }  private class CoRegistrationsRegistrationsAccess implements RegistrationsAccess {    private ReferencePointPairing fPointPairing;    private boolean fReversed; // true, fromSpace == GetSpace2(), false, fromSpace == GetSpace1()    private BroadcasterDataModel fBroadcasterModel = new BroadcasterDataModel();    private SingleSpaceID fFromSpace;    private SingleSpaceID fToSpace;    private static final boolean kNewSpacePair = true;    private static final boolean kCreateIfNULL = true;    private CoRegistrationsRegistrationsAccess(SingleSpaceID fromSpace, SingleSpaceID toSpace) {      SetSpacePair(fromSpace, toSpace);    }    public void SetSpacePair(SingleSpaceID space1, SingleSpaceID space2) {      fFromSpace = ResolveSingleSpaceID(space1);      fToSpace = ResolveSingleSpaceID(space2);      UpdateReferencePointPairing(kNewSpacePair, !kCreateIfNULL);    }    //	 returns false if fPointPairing == null    private boolean UpdateReferencePointPairing(boolean newSpacePair, boolean createIfNull) {      if (fPointPairing == null || newSpacePair) {        if (fPointPairing != null) {          fPointPairing.RemoveListener(fBroadcasterModel);        } else {          CoRegistrations.this.RemoveListener(fBroadcasterModel);        }        fPointPairing = GetReferencePointPairing(fFromSpace, fToSpace, createIfNull);        if (fPointPairing != null) {          fReversed = fPointPairing.GetSpace2().equals(fFromSpace);          fPointPairing.AddListener(fBroadcasterModel);        } else {          CoRegistrations.this.AddListener(fBroadcasterModel);        }      }      return fPointPairing != null;    }    public void RegisterPair(FiducialPoint fid1, FiducialPoint fid2) {      UpdateReferencePointPairing(!kNewSpacePair, kCreateIfNULL);      if (!fReversed) {        fPointPairing.InsertRegistration(fid1, fid2);      } else {        fPointPairing.InsertRegistration(fid2, fid1);      }    }    public boolean HasLocation(Location3D loc1, Location3D loc2) {      if (UpdateReferencePointPairing(!kNewSpacePair, !kCreateIfNULL)) {        if (!fReversed) {          return fPointPairing.HasLocation(loc1, loc2);        } else {          return fPointPairing.HasLocation(loc2, loc1);        }      } else {        return false;      }    }    public RegistrationConst[] GetRegistrationElements() {      RegistrationConst[] result = null;      if (UpdateReferencePointPairing(!kNewSpacePair, !kCreateIfNULL)) {        result = fPointPairing.GetElements();        if (fReversed) {          for (int i = 0; i < result.length; i++) {            result[i] = ((Registration) result[i]).GetFlippedCopy();          }        }      } else {        result = new RegistrationConst[0];      }      return result;    }    public DataModel GetDataModel() {      return fBroadcasterModel;    }  }}