package com.brazedblue.intervox.registration;import com.brazedblue.intervox.device.DeviceOutput;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.tracker.TrackerSettingsAccess;public class LocalizerFiducialPoint implements FiducialPoint, java.io.Serializable {  Location3D fPointerLocation;  ReferenceState fReferenceState;  //	Location3D							fReferenceLocation;  //	Matrix3								fReferenceRotation;  Location3D fOffset;  transient TrackerSettingsAccess fTrackerSettings;  static final long serialVersionUID = -1831539543487317223L;  public LocalizerFiducialPoint(DeviceOutput trackerPoint, DeviceOutput referencePt) {    fTrackerSettings = trackerPoint.GetTrackerSettings();    fPointerLocation = (Location3D) trackerPoint.GetDataOfType(DeviceOutput.ORIG_COORDINATE);    if (fTrackerSettings.IsUsingTrackerOffset()) {      fOffset = (Location3D) trackerPoint.GetDataOfType(DeviceOutput.POINT_COORDINATE);    }    if (referencePt != null) {      Matrix3 referenceRotation = (Matrix3) referencePt.GetDataOfType(DeviceOutput.ROTATION_MATRIX);      Location3D referenceLocation =          (Location3D) referencePt.GetDataOfType(DeviceOutput.ORIG_COORDINATE);      if (referenceRotation != null && referenceLocation != null) {        fReferenceState = new ReferenceState(referenceRotation, new FloatPoint(referenceLocation));      }    }  }  public Location3D GetLocation() {    return fPointerLocation;  }  private void TransformWithReference(FloatPoint point) throws ComputationException {    CheckForReferenceVersion();    ReferenceMatrix refMatrix = new ReferenceMatrix();    refMatrix.SetCurrentReference(fReferenceState);    refMatrix.TransformPoint(point);  }  private void CheckForReferenceVersion() throws ComputationException {    if (!CanUseReference()) {      throw new ComputationException("Fiducial Point doesn't have reference frame.");    }  }  public ReferenceState GetReferenceState() {    return fReferenceState;  }  public String GetName() {    return null;  }  public boolean CanUseReference() {    return (fReferenceState != null);  }  public Location3D GetComputedLocation() throws ComputationException {    FloatPoint result = new FloatPoint(fOffset != null ? fOffset : fPointerLocation);    if (fTrackerSettings.IsUsingReference()) {      TransformWithReference(result);    }    return result;  }  public void SetProperty(Object key, Object datum) {    if (TrackerSettingsAccess.kPropertyLabel.equals(key)) {      fTrackerSettings = (TrackerSettingsAccess) datum;    }  }}