package com.brazedblue.intervox.registration;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.util.*;import java.util.*;public class Registration implements java.io.Serializable, RegistrationConst {	static private final int	kNumOfFiducials = 2;  	FiducialPoint[]				fPoints = new FiducialPoint[kNumOfFiducials];		static final long serialVersionUID =  -419049476117957958L;		    public Registration(FiducialPoint point1, FiducialPoint point2) 	{		fPoints[0] = point1;		fPoints[1] = point2;    }	public boolean CanUseReference()	{		return fPoints[0].CanUseReference() && fPoints[1].CanUseReference();	}		public Location3D GetLocation1() throws ComputationException	{		return  fPoints[0].GetComputedLocation();	}	Registration GetFlippedCopy()	{		return new Registration(fPoints[1], fPoints[0]);	}		public Location3D GetLocation2() throws ComputationException	{		return fPoints[1].GetComputedLocation();	}		public void SetProperty(Object key, Object datum)	{		for (int i = 0; i < fPoints.length; i++)		{			if (fPoints[i] != null)			{				fPoints[i].SetProperty(key, datum);			}		}	}	public String GetName()	{		String result = "";		String name = fPoints[0] != null ? fPoints[0].GetName() : null;		if (name != null)		{			result += name;		}		name = fPoints[1] != null ? fPoints[1].GetName() : null;		if (name != null)		{			result += name;		}				return result;	}		public String toString()	{		return super.toString() + "Point1 " + fPoints[0] + 							"\nPoint2: " + fPoints[1];	}}