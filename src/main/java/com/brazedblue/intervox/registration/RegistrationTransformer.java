package com.brazedblue.intervox.registration;import com.brazedblue.intervox.geometry.*;public class RegistrationTransformer {  private TransformationMatrix fTransformer;  private Unit fUnit;  private float fToUnit;  private FloatPoint fUtilityPt1 = new FloatPoint();  private FloatPoint fUtilityPt2 = new FloatPoint();  private static final ReferenceState fgIdentityReferenceState;  static {    Matrix3 identityMatrix = new Matrix3();    identityMatrix.setIdentity();    fgIdentityReferenceState = new ReferenceState(identityMatrix, new FloatPoint(0, 0, 0));  }  public RegistrationTransformer(TransformationMatrix transformer) {    this(transformer, null, 1);  }  public RegistrationTransformer(TransformationMatrix transformer, Unit unit, float toUnit) {    fTransformer = transformer;    fUnit = unit;    fToUnit = toUnit;  }  public float GetDistance(RegistrationConst registration) throws ComputationException {    fUtilityPt2.Set(registration.GetLocation2());    fUtilityPt1.Set(registration.GetLocation1());    synchronized (fTransformer) {      fTransformer.SetCurrentReference(fgIdentityReferenceState);      fTransformer.InverseTransformPoint(fUtilityPt2);    }    float result = fUtilityPt1.distance(fUtilityPt2);    if (fUnit != null) {      result = fUnit.Convert(result, fToUnit);    }    return result;  }}