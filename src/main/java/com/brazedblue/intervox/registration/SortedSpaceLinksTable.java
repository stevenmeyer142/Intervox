package com.brazedblue.intervox.registration;import java.util.Comparator;import java.io.*;import java.util.Enumeration;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.data.SortedList;class SortedSpaceLinksTable implements Serializable { 	private LinksSortedList 				fList = new LinksSortedList();	transient private SpaceLinkAdapter		fLocalSpaceLink = new SpaceLinkAdapter();		// avoids repeated object creation in Get()	static private SpaceLinkComparator 		fSpaceLinkComparator = new SpaceLinkComparator();		static final long			serialVersionUID = -2588281917769766625L;	    SortedSpaceLinksTable() 	{    }	Enumeration GetElements()	{		return fList.elements();	}	synchronized SpaceLink[] GetAllPairings()	{		SpaceLink[] result = new SpaceLink[fList.size()];				for (int i = 0; i < fList.size(); i++)		{			result[i] = (SpaceLink)fList.elementAt(i);		}				return result;	}	SpaceLink Get(SingleSpaceID space1, SingleSpaceID space2)	{		SpaceLink result = null;		int index = -1;		synchronized (fLocalSpaceLink)		{			fLocalSpaceLink.fSpace1 = space1;			fLocalSpaceLink.fSpace2 = space2;			//			index = Collections.binarySearch(fList, fLocalSpaceLink, fSpaceLinkComparator);			index = fList.GetIndex(fLocalSpaceLink);		}					if (index >= 0)		{			result = (SpaceLink)fList.elementAt(index);		}				return result;	}		void Remove(SingleSpaceID space1, SingleSpaceID space2)	{		int index = -1;		synchronized (fLocalSpaceLink)		{			fLocalSpaceLink.fSpace1 = space1;			fLocalSpaceLink.fSpace2 = space2;						index = fList.GetIndex(fLocalSpaceLink);		}					if (index >= 0)		{			fList.removeElementAt(index);		}	}	 	private void readObject(ObjectInputStream s)      	throws ClassNotFoundException, IOException     {      	s.defaultReadObject();				fLocalSpaceLink = new SpaceLinkAdapter();	   }	void Insert(SpaceLink linkObject)	{		int index = fList.GetIndex(linkObject);				if (index >= 0)		{			fList.removeElementAt(index);			fList.insertElementAt(linkObject, index);		}		else		{			fList.insertElementAt(linkObject, -index - 1);		}	}		static private class LinksSortedList extends SortedList	{		LinksSortedList()		{				}				protected int Compare(Object obj1, Object obj2)		{			return fSpaceLinkComparator.compare(obj1, obj2);		}	}			static class SpaceLinkComparator implements Comparator	{		private SpaceLinkComparator()		{		}				static int Compare(SpaceLink spaceLink1, SpaceLink spaceLink2)		{			int result = 1;						SingleSpaceID space1A = spaceLink1.GetSpace1();			SingleSpaceID space1B = spaceLink1.GetSpace2();		 														// space "A" is lesser of the 2			if (space1A.compareTo(space1B) > 0)		//	switch			{					space1A = spaceLink1.GetSpace2();				space1B = spaceLink1.GetSpace1();			}			SingleSpaceID space2A = spaceLink2.GetSpace1();			SingleSpaceID space2B = spaceLink2.GetSpace2();		 														// space "A" is lesser of the 2			if (space2A.compareTo(space2B) > 0)		//	switch			{					space2A = spaceLink2.GetSpace2();				space2B = spaceLink2.GetSpace1();			}						result = space1A.compareTo(space2A);						if (result == 0)			{				result = space1B.compareTo(space2B);						}						return result;		}				public int compare(Object o1, Object o2)		{			return Compare((SpaceLink)o1, (SpaceLink)o2);/*			SpaceLink spaceLink1 = (SpaceLink)o1;			SpaceLink spaceLink2 = (SpaceLink)o2;						SingleSpaceID space1A = spaceLink1.GetSpace1();			SingleSpaceID space1B = spaceLink1.GetSpace2();		 														// space "A" is lesser of the 2			if (space1A.compareTo(space1B) > 0)		//	switch			{					space1A = spaceLink1.GetSpace2();				space1B = spaceLink1.GetSpace1();			}			SingleSpaceID space2A = spaceLink2.GetSpace1();			SingleSpaceID space2B = spaceLink2.GetSpace2();		 														// space "A" is lesser of the 2			if (space2A.compareTo(space2B) > 0)		//	switch			{					space2A = spaceLink2.GetSpace2();				space2B = spaceLink2.GetSpace1();			}						result = space1A.compareTo(space2A);						if (result == 0)			{				result = space1B.compareTo(space2B);						}						return result; */		}				public boolean equals(Object obj)		{			return obj instanceof SpaceLinkComparator;		}		}}