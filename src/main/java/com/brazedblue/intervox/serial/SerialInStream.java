package com.brazedblue.intervox.serial;import java.io.*;class SerialInStream extends InputStream{     /**     * SerialDriver object      */	SerialDriver serialDriver;		    /**     * Constructor.     * @param a SerialDriver object     */	public SerialInStream(SerialDriver driver)	{		serialDriver = driver;	}	    /**     * Opens port if not already open.     */	public void open() throws IOException		{		serialDriver.Open();	}		    /**     * Closes port if not already closed.     */	public void close() throws IOException	{				serialDriver.Close();	}	    /**     * How many bytes are available to read.     */	public int available() throws IOException 	{		return serialDriver.GetAvailableBytes();  }	    /**     * Read characters into a portion of an array.     *     * @param      cbuf  Destination buffer     * @param      off   Offset at which to start storing characters     * @param      len   Maximum number of characters to read     *     * @return     The number of bytes read     *     * @exception  IOException  If an I/O error occurs     */public int read(byte b[], int off, int len) throws IOException 	{		int avail = available();				int toRead = (avail < (len - off)) ? avail : (len - off);				if (toRead > 0)		{			byte[] readArray = new byte[toRead];					serialDriver.Read(readArray);				   		System.arraycopy(readArray, 0,			     b, off, toRead);				 //			System.out.write(readArray);		}				return toRead;  }    /**     * Reads the next byte of data from this input stream. The value      * byte is returned as an <code>int</code> in the range      * <code>0</code> to <code>255</code>. If no byte is available, the value      * <code>-1</code> is returned.      *     * @return     the next byte of data     * @exception  IOException  if an I/O error occurs.     * @since      JDK1.0     */	public int read() throws IOException	{		byte[] array = new byte[1];				return read(array, 0, 1);	}	protected void finalize() throws Throwable		{		try		{			close();		}		catch (IOException except)		{			// do nothing		}	}}