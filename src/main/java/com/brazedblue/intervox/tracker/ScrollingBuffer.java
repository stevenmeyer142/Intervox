package com.brazedblue.intervox.tracker;public class ScrollingBuffer {	byte[]	fBuffer;	static private final int kGrowSize = 256;	int		fWritePos;		public ScrollingBuffer(int initialSize)	{		fBuffer = new byte[initialSize];	}		public int FindPos(byte ch, int startPos)	{			int pos = -1;		for (int i = startPos; i < fWritePos; i++)		{			if (fBuffer[i] == ch)			{				pos = i;				break;			}		}				return pos;	}		public int FindPos(byte ch)	{		return FindPos(ch, 0);	}		public synchronized void Write(byte[] buf, int length)	{		if (length > 0)		{			while (fWritePos + length > fBuffer.length)			{				GrowBuffer();			}					    System.arraycopy(buf, 0,				     fBuffer, fWritePos, length);						fWritePos += length;		}		 	}			public char GetByte(int pos)	{		char result = (char)-1;				if (pos < Length())		{			result = (char)fBuffer[pos];		}		return result;	}		synchronized void GrowBuffer()	{		byte[] newBuffer = new byte[fBuffer.length + kGrowSize];		System.arraycopy(fBuffer, 0, newBuffer, 0, fWritePos);		fBuffer = newBuffer;	}		synchronized public void Scroll(int pos)	{		if (pos < fWritePos)		{			System.arraycopy(fBuffer, pos, fBuffer, 0, fWritePos - pos);			fWritePos -= pos;		}		else		{			fWritePos = 0;		}	}		public int Length()	{		return fWritePos;	}		synchronized public boolean GetByteArray(byte[] array, int length)	{		boolean result = false;				if (length <= Length())		{			System.arraycopy(fBuffer, 0, array, 0, length);			result = true;		}				return result;	}		synchronized public String GetString(int pos)	{		String result = null;		if (pos < Length())		{			result = new String(fBuffer, 0, pos);		}				return result;	}}