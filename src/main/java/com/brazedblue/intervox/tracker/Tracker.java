package com.brazedblue.intervox.tracker;import java.io.*;import java.util.Vector;import com.brazedblue.intervox.serial.*;import com.brazedblue.intervox.device.*;import com.brazedblue.intervox.util.*;public class Tracker {	long 				fTimeout;	InputStream			fIn;	PrintWriter			fOut;	byte[]				fReadFromInputBuffer = new byte[1024];	ScrollingBuffer		fScrollingBuffer = new ScrollingBuffer(1024);	SerialPort			fPort;	PortDevice			fDevice;	Vector				fListenerList = new Vector();		PortMonitor			fPortMonitor;	      public Tracker(int readsPerSecond, SerialPort port, PortDevice device)	{				fTimeout = 1000 / readsPerSecond;				SetDeviceAndPort(device, port);	}		public void SetDeviceAndPort(PortDevice device, SerialPort port)	{		if (Connected())		{			Disconnect();		}				fPort = port;		fDevice = device;		fIn = fPort.GetInputStream();		fOut = fPort.GetPrintWriter();	}			public void HandleDeviceOutput(DeviceOutput output)	{		fDevice.HandleOutput(output, this);	}		public boolean Connected()	{		return fPort != null && fPort.IsOpen();	}				public void SendString(String string)	{		if (Connected())		{					// threads have been dying on me and I don't know how to restart them any other way			if (fPortMonitor != null && !fPortMonitor.isAlive())			{				NeuroSynchUtil.ErrorMessage("Tracker not alive.", NeuroSynchUtil.kShowDlog);				fPortMonitor.Stop();	// just to be sure it stops	//			fPortMonitor.SetNullTracker();	// also to be on the safe side				fPortMonitor = null;			}			if (fPortMonitor == null)			{				fPortMonitor = new PortMonitor(this);				fPortMonitor.start();			}						fOut.print(string);			fOut.flush();		}	}		public void AddListener(TrackerListener listener)	{		fListenerList.addElement(listener);	}			//	do it this way so that RemoveListener called from PostOutput does not foul up fListenerList	public void run(PortMonitor monitor) 		{			while (!monitor.Stopped())			{				try				{					int bytesRead = fIn.read(fReadFromInputBuffer);					if (bytesRead > 0)					{						fScrollingBuffer.Write(fReadFromInputBuffer, bytesRead);												DeviceOutput output;						do						{							output = fDevice.CreateOutputObject(fScrollingBuffer);													if (output != null)							{								PostOutput(output);							}						} while (output != null);					}				}				catch (Exception e)				{					NeuroSynchUtil.ErrorMessage(e.getMessage(), NeuroSynchUtil.kNoDlog);				}								try				{					monitor.sleep(fTimeout);				}				catch (InterruptedException ex)				{				}						}	    } 		public void PostOutput(DeviceOutput output)	{		int vectorSize = fListenerList.size();				for (int i = vectorSize - 1; i >= 0; i--)		{			TrackerListener listener = (TrackerListener)fListenerList.elementAt(i);			listener.DataRetrieved(output);		}	}	public void Connect()	{		if (!Connected())		{					// dump the buffer			if (fScrollingBuffer.Length() > 0)			{				fScrollingBuffer.Scroll(fScrollingBuffer.Length());			}			try			{				fPort.Open();								if (Connected())				{					fDevice.Connecting(this);				}								PostOutput(new TrackerStateEvent(TrackerController.kConnectCmd, true));							}			catch (IOException e)			{				NeuroSynchUtil.ErrorMessage("Could not open serial port. " + e.getMessage(), NeuroSynchUtil.kShowDlog);			}		}	}		public synchronized void Disconnect()	{		if (Connected())		{			fDevice.Disconnecting(this);						if (fPortMonitor != null)			{				fPortMonitor.Stop();	//				fPortMonitor.SetNullTracker();	// to be on the safe side				fPortMonitor = null;			}			try			{				fPort.Close();								PostOutput(new TrackerStateEvent(TrackerController.kConnectCmd, false));			}			catch (IOException e)			{				NeuroSynchUtil.ErrorMessage("Could not close serial port. " + e.getMessage(), NeuroSynchUtil.kShowDlog);			}		}	}	void ToggleConnect()	{		if (!Connected())		{			Connect();		}		else		{			Disconnect();		}	}/*			void SetContinuous(boolean continuous)	{		if (continuous)		{			SendString(fDevice.GetContinuousCommand());		}		else		{			SendString(fDevice.GetNonContinuousCommand()); 		}	}			void SetAtPoint()	{		String cmd = fDevice.GetAtPointCommand();		if (cmd != null)		{			SendString(cmd);		}	}		void SetToDecimalUnits()	{		String cmd = fDevice.GetDecimalUnitsCommand();		if (cmd != null)		{			SendString(cmd);		}	}		void SetOutputFormat()	{		String cmd = fDevice.GetOutputFormatCommand();		if (cmd != null)		{			SendString(cmd);		}	}		*/}