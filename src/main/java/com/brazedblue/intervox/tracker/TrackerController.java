package com.brazedblue.intervox.tracker;import java.awt.event.*;import java.awt.*;import java.util.*;import javax.vecmath.*;import javax.swing.*;import javax.swing.event.*;import com.brazedblue.intervox.serial.*;import com.brazedblue.intervox.device.*;import com.brazedblue.intervox.util.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.display.OffsetCalculationDisplay;import com.brazedblue.intervox.registration.*;import com.brazedblue.intervox.image.SingleSpaceID;public class TrackerController implements ActionListener, TrackerListener { 	Hashtable 							fButtonItems = new Hashtable();	Hashtable 							fCheckBoxMenuItems = new Hashtable();											//	listeners for stations 1 and 2, see DeviceOutput.NUM_OF_STATIONS	Vector								fListeners =  new Vector();		//	we have to worry about garbage listeners	Hashtable							fConfigurationLabels = new Hashtable();	TrackerControllerInternalFrameAdapter		fInternalFrameListenr = new TrackerControllerInternalFrameAdapter();		Tracker								fTracker;	boolean 							fTracking = false;	TrackerSettings						fTrackerSettings;		LocalizerPointOutput[]				fLatestOutputs = new LocalizerPointOutput[DeviceOutput.NUM_OF_STATIONS];		static public final String		kConnectCmd = "Connect";	static public final String 		kTrackCmd = "Track";	static public final String 		kMobileCmd = "Mobile";	static public final String 		kTrackOffsetCmd = "Track Offset";	static private final String[] 	kCommandStrings = { kConnectCmd, kTrackCmd, kMobileCmd,  kTrackOffsetCmd };	static private final String[] 	kHandledByThisStrings = { kConnectCmd, kTrackCmd, kMobileCmd, kTrackOffsetCmd };		static public final String 		kOffsetNameProperty = "Offset: ";	static public final String 		kDeviceNameProperty = "Device: ";	static public final String 		kPortNameProperty = "Port: ";	static private final boolean	DEBUGGING = true;	    public TrackerController(Configuration configuration) 	{		fTrackerSettings = CreateTrackerSettings();		fTrackerSettings.SetConfiguration(configuration);		fTracker.AddListener(this);    }		public TrackerSettingsAccess GetTrackerSettings()	{		return fTrackerSettings;	}		public Component GetComponent()	{		return null;	}		public void AddConfigurationLabels(Container container)	{		String[] properties = Configuration.GetProperties();				for (int i = 0; i < properties.length; i++)		{			String text = fTrackerSettings.GetConfiguationPropertyLabel(properties[i]);			JLabel label = new JLabel(text);			container.add(label);		}	}		public LocalizerPointOutput GetLatestOutput(int station)	{		return fLatestOutputs[station - DeviceOutput.STATION1];	}		public void RemoveControlButtons(Container container)	{		RemoveSubViewsInList(fButtonItems, container);	}			public void AddConfigurationValues(Container container)	{		String[] properties = Configuration.GetProperties();				for (int i = 0; i < properties.length; i++)		{			String text = fTrackerSettings.GetConfiguationPropertyValue(properties[i]);			JLabel label = new JLabel(text);			container.add(label);			AddConfigurationLabel(label, properties[i]);		}	}				public Menu CreateTrackerMenu()	{		Menu result = new Menu("Tracker");				AddMenuItems(result);		return result;	}		public int GetNumberOfLabels()	{		String[] properties = Configuration.GetProperties();				return properties.length;		}	private void PostStateChange(String cmd, boolean state)	{		BroadcastOtherOutput(new TrackerStateEvent(cmd, state));	}		private void AddConfigurationLabel(JLabel label, String key)	{		if (!fConfigurationLabels.containsKey(key))		{			fConfigurationLabels.put(key, new Vector());		}				Vector labelList = (Vector)fConfigurationLabels.get(key);				if (!labelList.contains(label))		{			labelList.addElement(label);		}	}		public synchronized void RemoveConfigurationLabels(Container c)	{		RemoveSubViewsInList(fConfigurationLabels, c);	}		private void RemoveSubViewsInList(Hashtable list, Container c)	{		Enumeration keys = list.elements();				while (keys.hasMoreElements())		{			Vector componentList = (Vector)keys.nextElement();						for (int i = componentList.size() - 1; i >= 0; i--)			{				Component component = (Component)componentList.elementAt(i);								if (component.getParent() == c)				{					componentList.removeElement(component);				}			}		}		}		protected void UpdateTrackerFromLocalizer(Localizer localizer)	{		if (fTracker == null)		{			fTracker = new Tracker(90, localizer.GetSerialPort(), localizer.GetPortDevice());		}		else		{			boolean isConnected = IsConnected();						if (isConnected)			{				SetConnected(false);			}				fTracker.SetDeviceAndPort(localizer.GetPortDevice(), localizer.GetSerialPort());						if (isConnected)			{				SetConnected(true);			}		}	}		public void SetConnected(boolean connect)	{		if (connect != fTracker.Connected())		{			fTracker.ToggleConnect();		}	}			private synchronized void SetNewConfigurationLabel(String key, String label)	{		Vector labelList = (Vector)fConfigurationLabels.get(key);				if (labelList != null)		{			for (int i = 0; i < labelList.size(); i++)			{				JLabel labelDisplay = (JLabel)labelList.elementAt(i);				labelDisplay.setText(label);			}		}	}		private static String GetPropertyValue(Configuration config, String property)	{		return ((config != null) ? config.GetPropertyString(property) : Configuration.kBlankString);	}		private TrackerSettings CreateTrackerSettings()	{		return new TrackerSettings();	}		private void AddButton(AbstractButton item)	{		String command = item.getActionCommand();				if (!fButtonItems.containsKey(command))		{			fButtonItems.put(command, new Vector());		}				Vector buttonItems = (Vector)fButtonItems.get(command);				if (!buttonItems.contains(item))		{			buttonItems.addElement(item);		}		if (NeuroSynchUtil.StrArrayContainsString(kHandledByThisStrings, command))		{			item.addActionListener(this);		}	}	private void AddCheckBoxMenuItem(CheckboxMenuItem item)	{		String command = item.getActionCommand();				if (!fCheckBoxMenuItems.containsKey(command))		{			fCheckBoxMenuItems.put(command, new Vector());		}				Vector menuItems = (Vector)fCheckBoxMenuItems.get(command);				if (!menuItems.contains(item))		{			menuItems.addElement(item);		}		if (NeuroSynchUtil.StrArrayContainsString(kHandledByThisStrings, command))		{			item.addActionListener(this);		}	}	/*		// this may not be a good method	private void SetLocalizer(Localizer localizer)	{		fTrackerSettings.UpdateLocalizer(localizer);	}	*/		public InternalFrameListener GetInternalFrameListener()	{		return fInternalFrameListenr;	}/*		public void AddActionListener(ActionListener listener, String command)	{		int size = fCheckBoxMenuItems.size();				for (int i = 0; i < size; i++)		{			CheckboxMenuItem item = (CheckboxMenuItem)fCheckBoxMenuItems.elementAt(i);						String itemCmd = item.getActionCommand();						if (itemCmd == command)			{				item.addActionListener(listener);			}		}		size = fButtonItems.size();				for (int i = 0; i < size; i++)		{			AbstractButton item = (AbstractButton)fButtonItems.elementAt(i);						String itemCmd = item.getActionCommand();						if (itemCmd == command)			{				item.addActionListener(listener);			}		}	}*/	public void actionPerformed(ActionEvent e)	{		Object source = e.getSource();				if (source instanceof AbstractButton)		{			AbstractButton button = (AbstractButton)source;			PerformCommand(button.getActionCommand(), button.isSelected());		}		else if (source instanceof CheckboxMenuItem)		{			CheckboxMenuItem item = (CheckboxMenuItem)source;			PerformCommand(item.getActionCommand(), item.getState());		}	}		public void AddControlButtons(Container container)	{		int count = GetNumberOfCommands();				for (int i = 0; i < count; i++)		{			String label = GetCommand(i);			JCheckBox checkBox = new JCheckBox(label);			container.add(checkBox);			AddButton(checkBox);		}	}		public void AddMenuItems(Menu menu)	{		int count = GetNumberOfCommands();				for (int i = 0; i < count; i++)		{			String label = GetCommand(i);			CheckboxMenuItem checkBox = new CheckboxMenuItem(label);			menu.add(checkBox);			AddCheckBoxMenuItem(checkBox);		}	}	public int GetNumberOfCommands()	{		return kCommandStrings.length;	}		public boolean ShouldTrack()	{		return fTracking;	}		public boolean IsConnected()	{		return fTracker != null && fTracker.Connected();	}		public String GetCommand(int index)	{		return kCommandStrings[index];	}		public int GetCommandIndex(String cmd)	{		int result = -1;		int count = GetNumberOfCommands();		for (int i = 0; i < count; i++)		{			if (kCommandStrings[i].equals(cmd))			{				result = i;				break;			}		}				return result;	}		public void PerformCommand(String command, boolean on)	{		if (command.equals(kConnectCmd))		{			SetConnected(on);						if (fTracking)			{				PostStateChange(kTrackCmd, IsConnected());				}		}		else if (command.equals(kTrackCmd))		{			if (on != fTracking)			{				fTracking = on;				PostStateChange(command, on);			}		}		else if (command.equals(kMobileCmd))		{			if (on != fTrackerSettings.IsUsingReference())			{				fTrackerSettings.SetUsingReference(on);				PostStateChange(command, on);			}		}		else if (command.equals(kTrackOffsetCmd))		{						if (on != fTrackerSettings.IsUsingTrackerOffset())			{				fTrackerSettings.SetUsingTrackerOffset(on);				PostStateChange(command, on);			}		}		else		{			NeuroSynchUtil.ErrorMessage("Unknown tracker command.", NeuroSynchUtil.kNoDlog);		}				EnableItems();		}		public boolean IsCommandEnabled(String command)	{		boolean connected = fTracker.Connected();		boolean result = false;				if (command.equals(kConnectCmd))		{			result = true;		}		else if (command.equals(kTrackCmd))		{			if (IsCommandChecked(command))			{		//	always able to uncheck				result = true;			}						else if (connected)			{				result = fTrackerSettings.CanTransform();			}		}		else if (command.equals(kMobileCmd))		{			if (fTrackerSettings.IsUsingReference())			{				result = true;	//	 you can always turn it off			}			else			{				result = fTrackerSettings.CanUseReferenceFrame();			}		}				else if (command.equals(kTrackOffsetCmd))		{			if (fTrackerSettings.IsUsingTrackerOffset())			{				result = true;	//	 you can always turn it off			}			else			{				result = (fTrackerSettings.GetTrackerOffset() != null);			}		}		return result;		}		public boolean IsCommandChecked(String command)	{		boolean result = false;		if (command.equals(kConnectCmd))		{			result = fTracker.Connected();		}		else if (command.equals(kTrackCmd))		{			result = fTracking;		}		else if (command.equals(kMobileCmd))		{			result = fTrackerSettings.IsUsingReference();		}		else if (command.equals(kTrackOffsetCmd))		{			result = fTrackerSettings.IsUsingTrackerOffset();		}		else		{			NeuroSynchUtil.ErrorMessage("Unknown command in IsCommandChecked", NeuroSynchUtil.kNoDlog);		}				return result;	}	public void AddTrackerListener(TrackerListener listener, long frequency, boolean transform, int station)	{/*		TrackerListenerEntry entry = GetEntryForListener(listener);				if (entry == null)		{			fListeners.addElement(new TrackerListenerEntry(listener, frequency, transform, station));		}		else		{			entry.AddStation(station);		} */							//	different element for each kind of listener		fListeners.addElement(new TrackerListenerEntry(listener, frequency, transform, station));	}			public void RemoveListener(TrackerListener listener)	{		TrackerListenerEntry entry = GetEntryForListener(listener);					while (entry != null)		{			fListeners.removeElement(entry);						entry = GetEntryForListener(listener);	//	listener can have more than one entry		}		}		private TrackerListenerEntry GetEntryForListener(TrackerListener listener)	{		TrackerListenerEntry result = null;		for (int i = 0; i < fListeners.size(); i++)		{			TrackerListenerEntry entry =  (TrackerListenerEntry)fListeners.elementAt(i);						if (entry.GetListener() == listener)			{				result = entry;				break;			}		}				return result;	}		public void StopTracker()	{		fTracker.Disconnect();	}		public void SetConfiguration(Configuration config)	{		fTrackerSettings.SetConfiguration(config);	}		public void SetTransformerAccess(TransformerAccess transformerAccess)	{		fTrackerSettings.SetTransformerAccess(transformerAccess);	}/*		public void SetCoordTransform(CoordinateTransformer transformer)	{		fTrackerSettings.SetCoordTransform(transformer);	} */ 	public void EnableItems()	{		int count = GetNumberOfCommands();				for (int i = 0; i < count; i++)		{			String command = GetCommand(i);			boolean enabled = IsCommandEnabled(command);			boolean checked = IsCommandChecked(command);						EnableButton(command, enabled, checked);						EnableMenuItem(command, enabled, checked);		}	}		private void EnableButton(String command, boolean enabled, boolean checked)	{		Vector buttonList = (Vector)fButtonItems.get(command);				if (buttonList != null)		{			for (int i = 0; i < buttonList.size(); i++)			{				AbstractButton button = (AbstractButton)buttonList.elementAt(i);				button.setEnabled(enabled);				button.setSelected(checked);			}		}		}		private void EnableMenuItem(String command, boolean enabled, boolean checked)	{		Vector menuList = (Vector)fCheckBoxMenuItems.get(command);				if (menuList != null)		{			for (int i = 0; i < menuList.size(); i++)			{				CheckboxMenuItem menuItem = (CheckboxMenuItem)menuList.elementAt(i);				menuItem.setEnabled(enabled);				menuItem.setState(checked);			}		}	}		public void DataRetrieved(DeviceOutput output)	{		fTracker.HandleDeviceOutput(output);						if (output.GetDataOfType(DeviceOutput.POINT_COORDINATE) != null)		{			BroadcastCoordinates(output);		}		else		{			BroadcastOtherOutput(output);		}			}/*		private void HandleStatusRetreived(DeviceOutput output)	{		DeviceStatus status = (DeviceStatus)output.GetDataOfType(DeviceOutput.STATUS);				if (!status.IsContinuous())		{			fTracker.SetContinuous(true);		}		if (!status.AtPoint())		{			fTracker.SetAtPoint();		}		if (!status.DecimalUnits())		{			fTracker.SetToDecimalUnits();		}			fTracker.SetOutputFormat();	} */		private void BroadcastCoordinates(DeviceOutput output)	{		if (output instanceof LocalizerPointOutput)		{			fTrackerSettings.ProcessLocalizerPoint((LocalizerPointOutput)output);			fLatestOutputs[output.GetStation() - DeviceOutput.STATION1] = (LocalizerPointOutput)output;				}		else		{			NeuroSynchUtil.ErrorMessage("TrackerController.BroadcastCoordinates, output not instance of LocalizerPointOutput- " + output, NeuroSynchUtil.kNoDlog);		}/*		if (fData != null)		{			if (output.GetStation() == DeviceOutput.STATION2 && fData.IsUsingReference())			{				Object rotation = output.GetDataOfType(DeviceOutput.ROTATION_MATRIX);				Object point = output.GetDataOfType(DeviceOutput.POINT_COORDINATE);				TransformationMatrix transform = fData.GetTransformationMatrix();				if (rotation != null && point != null && transform != null)				{					transform.SetCurrentReference((Matrix3)rotation, (FloatPoint)point);														}						}						if (output.GetStation() == DeviceOutput.STATION1)			{				Object realPoint = output.GetDataOfType(DeviceOutput.POINT_COORDINATE);				if (realPoint != null)				{					if (fData.IsUsingTrackerOffset())					{						FloatPoint offset = fData.GetTrackerOffset();												Object rotation = output.GetDataOfType(DeviceOutput.ROTATION_MATRIX);												if (offset != null && rotation != null)						{							OffsetCalculationDisplay.OffsetPoint((FloatPoint)realPoint, offset, (Matrix3)rotation);						}						else						{							NeuroSynchUtil.ErrorMessage("TrackerController.BroadcastCoordinates, offset- " + offset								+ " angle- " + rotation, NeuroSynchUtil.kNoDlog);//							transformedPt = null;						}					}												// add the transformationhere (more efficient ?)					if ((fData.GetTransformationMatrix() != null) && fData.GetTransformationMatrix().CanTransform())					{						FloatPoint transformedPt = new FloatPoint((FloatPoint)realPoint);												if (transformedPt != null)						{							fData.GetTransformationMatrix().TranslatePoint(transformedPt);														output.SetData(transformedPt, DeviceOutput.TRANSFORMED_COORD);						}					}				}				else				{					NeuroSynchUtil.ErrorMessage("TrackerController.BroadcastCoordinates, coordinate- " + realPoint, NeuroSynchUtil.kNoDlog);				}			}		}*/				int station = output.GetStation();									Enumeration iter = fListeners.elements();		    	while (iter.hasMoreElements()) 		{			TrackerListenerEntry entry = (TrackerListenerEntry)iter.nextElement();						if (entry.ShouldNotify(station))			{				TrackerListener listener = entry.GetListener();				listener.DataRetrieved(output);			}		}	}		private void BroadcastOtherOutput(DeviceOutput output)	{		Enumeration iter = fListeners.elements();		    	while (iter.hasMoreElements()) 		{			TrackerListenerEntry entry = (TrackerListenerEntry)iter.nextElement();						TrackerListener listener = entry.GetListener();			listener.DataRetrieved(output);		}	}		// remove listeners when a frame closes so that memory gets freed	class TrackerControllerInternalFrameAdapter extends InternalFrameAdapter	{		TrackerControllerInternalFrameAdapter()		{		}				public void internalFrameClosed(InternalFrameEvent e)		{			Container source = (Container)e.getSource();						Vector listeners = (Vector)fListeners.clone();							for (int i = listeners.size() - 1; i >= 0; i--)			{				TrackerListenerEntry entry = (TrackerListenerEntry)listeners.elementAt(i);				TrackerListener listener = entry.GetListener();								Component c = listener.GetComponent();								if (c != null && source.isAncestorOf(c))				{					RemoveListener(listener);				}			}		}	}		private class TrackerSettings implements DataModelListener, TrackerSettingsAccess	{		private Configuration 				fConfiguration;		private Localizer					fLocalizer;		private TransformerAccess			fTransformerAccess;				TrackerSettings()		{				}				public CalculatedOffset GetTrackerCalculatedOffset()		{			return (fConfiguration != null) ? fConfiguration.GetSelectedOffset() : null;		}				private boolean CanUseReferenceFrame()		{			return fTransformerAccess != null && fTransformerAccess.CanUseReferenceFrame();		}				private boolean CanTransform()		{			return fTransformerAccess != null && fTransformerAccess.CanTransformFrom(SingleSpaceID.GetRealSpaceID());		}			private void SetTransformerAccess(TransformerAccess transformerAccess)		{			fTransformerAccess = transformerAccess;		} 				private String GetConfiguationPropertyLabel(String key)		{			return key;		}		private String GetConfiguationPropertyValue(String key)		{			return GetPropertyValue(fConfiguration, key);		}		private void SetConfiguration(Configuration config)		{			if (config != fConfiguration)			{				if (fConfiguration != null)				{					fConfiguration.RemoveListener(this);				}								fConfiguration = config;				if (fConfiguration != null)				{					fConfiguration.AddListener(this);					UpdateLocalizer(fConfiguration.GetLocalizer());				}				UpdateLabels();			}		}				public void UpdateLabels()	{		if (DEBUGGING && false)		{			Debug.PrintStackTrace("UPDATE LABELS");		}		String[] properties = Configuration.GetProperties();				for (int i = 0; i < properties.length; i++)		{/*			if (oldConfig == null || newConfig == null || !oldConfig.GetPropertyString(properties[i]).equals( newConfig.GetPropertyString(properties[i]) ) )			{				SetNewConfigurationLabel(properties[i], GetPropertyValue(newConfig, properties[i]));			} */						SetNewConfigurationLabel(properties[i], GetConfiguationPropertyValue(properties[i]));		}		}		public void DataModelChanged(DataModel model, DataChangedEvent event)		{			if (fConfiguration != null && model == fConfiguration)			{				UpdateLocalizer(fConfiguration.GetLocalizer());				UpdateLabels();			}		}				private void ProcessLocalizerPoint(LocalizerPointOutput output)		{			output.SetTrackerSettings(this);						if (fConfiguration != null)			{				fConfiguration.ProcessLocalizerPoint(output);			}			if (fTransformerAccess != null)			{				fTransformerAccess.ProcessLocalizerPoint(output);			} 		}			public boolean IsUsingReference()		{			return (fTransformerAccess != null) ? fTransformerAccess.IsUsingReference() : false;		}				private void SetUsingReference(boolean set)		{			if (fTransformerAccess != null)			{			 	fTransformerAccess.SetUsingReference(set);			}		}				public boolean IsUsingTrackerOffset()		{			return (fConfiguration != null) ? fConfiguration.IsUsingTrackerOffset() : false;		}						private void SetUsingTrackerOffset(boolean set)		{			if (fConfiguration != null)			{			 	fConfiguration.SetUsingTrackerOffset(set);			}		}				private Location3D GetTrackerOffset()		{			return (fConfiguration != null) ? fConfiguration.GetSelectedOffsetPoint() : null;		}		/*		private TransformationMatrix GetTransformationMatrix()		{			return (fTransformer != null) ? fTransformer.GetTransformationMatrix() : null;		} */				private void UpdateLocalizer(Localizer localizer)				{			if (DEBUGGING && false)			{				System.out.println("localizer " + (String)(localizer != null ? localizer.toString() : "null"));				System.out.println("fLocalizer " + (String)(fLocalizer != null ? fLocalizer.toString() : "null"));								Debug.PrintStackTrace("UpdateLocalizer");			}							// change 10/6/05  localizer object was changed without updating tracker			if (localizer != null/* && !localizer.equals(fLocalizer) */)			{				fLocalizer = localizer;								UpdateTrackerFromLocalizer(fLocalizer);			}		}	}	private static class TrackerListenerEntry 	{		long 				fLastPost;		long				fFrequency;		boolean 			fTranslate;		TrackerListener 	fListener;		int					fStations;							TrackerListenerEntry(TrackerListener listener, long frequency, boolean translate, int stations)		{			fLastPost = System.currentTimeMillis();			fTranslate = translate;			fFrequency = frequency;			fListener = listener;			fStations = stations;		}						// used only for coordinates retrieved		boolean ShouldNotify(int station)		{			boolean result = false;			if (ListensToStation(station))			{				long currentTime = System.currentTimeMillis();								if (currentTime >= fLastPost + fFrequency)				{					result = true;					fLastPost = currentTime;				}			}			return result;		}			boolean WantsTranslation()		{			return fTranslate;		}				TrackerListener GetListener()		{			return fListener;		}				public void  AddStation(int station)		{			if (station == DeviceOutput.ALL_STATIONS || station != fStations)			{				fStations = DeviceOutput.ALL_STATIONS;			}				}				boolean ListensToStation(int station)		{			return (fStations == DeviceOutput.ALL_STATIONS || station == fStations);		}	}}