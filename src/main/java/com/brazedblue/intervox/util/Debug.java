package com.brazedblue.intervox.util;import java.io.*;import java.awt.*;import java.awt.event.*;import java.util.Calendar;//import com.apple.mrj.*;public class Debug  /* implements anInterface */ { 	static public boolean fgDebugging = true;	static private PrintStream fgFileOut = null;	static private final String kDebugOutFileName = "Debug.out";	static private final String kDebugDirectoryName = "Debug";		static public Frame		fGAppletFrame; 	static public void DebugPrintIntArray(int[] array, int width)	{		if (fgDebugging)		{			for (int i = 0; i < array.length; i++)			{				if (array[i] > 0)					System.out.write('X');				else					System.out.write(' ');								if ((i % width) == (width - 1))				{					System.out.write('\r');				}			}		}	}	public static void PrintTime(String message)	{			Calendar rightNow = Calendar.getInstance();			System.out.println(message + "\rTime " + rightNow.get(Calendar.HOUR_OF_DAY) + ":" + rightNow.get(Calendar.MINUTE) + ":" +							   rightNow.get(Calendar.SECOND) + ":" + rightNow.get(Calendar.MILLISECOND));	}		public static void PrintStackTrace(String message)	{		if (true) // print time		{			PrintTime("");		}  		Throwable e = new Throwable(message);		e.printStackTrace();	}		static public String ByteToBinaryString(byte b)	{		char[] buf = new char[8];		int mask = 1 << 7;				for (int i = 0; i < 8; i++)		{			buf[i] = (b & mask) == 0 ? '0' : '1';			mask = mask >> 1;		}		return new String(buf);	}		static public void DumpIntRGBArray(int[] array, int width, int height)	{			PrintStream stream = GetFilePrintStream();						stream.println("RGBArray width " + width + ", height " + height);			for (int i = 0; i < array.length; i++)			{				stream.println(array[i]);			}						stream.flush();	}		static public void PrintRadAngleAsDegree(float angle, PrintStream stream)	{		double degreeAngle = angle * (180 / Math.PI);		stream.print(degreeAngle);	}		static public String ShortToBinaryString(short b)	{		char[] buf = new char[16];		int mask = 1 << 15;				for (int i = 0; i < 16; i++)		{			buf[i] = (b & mask) == 0 ? '0' : '1';			mask = mask >> 1;		}				return new String(buf);	}	static public void ResetSystemStreams()	{//		if (NeuroSynchUtil.IsMacintosh())//		{//			com.apple.mrj.MRJOSType newType = new com.apple.mrj.MRJOSType("TEXT");//			com.apple.mrj.MRJFileUtils.setDefaultFileType(newType); //		}				String debugDirectory = NeuroSynchUtil.GetWorkingDirectory() + kDebugDirectoryName;		File directory = new File(debugDirectory);				boolean dirExists = directory.exists();		if (!dirExists)		{			dirExists = directory.mkdir();		}				String[] files = directory.list();				int lastFile = -1;					//	create new file beginning with number, always incrementing		for (int i = 0; files != null && i < files.length; i++)		{			int numOfDigits = 0;						String file = files[i];						while (numOfDigits < file.length() && Character.isDigit(file.charAt(numOfDigits)))			{				numOfDigits++;			}						try			{				int value = Integer.parseInt(file.substring(0, numOfDigits));								if (value > lastFile)				{					lastFile = value;				}			}			catch (NumberFormatException e)			{				System.out.println("Couldn't parse int, " + e.getMessage());			}		}				lastFile++;				try		{			FileOutputStream outStream = new FileOutputStream(debugDirectory +  File.separator + Integer.toString(lastFile) + kDebugOutFileName);						System.setOut(new DualPrintStream(outStream, true, System.out));			if (System.err != System.out)			{				System.setErr(new DualPrintStream(outStream, true, System.err));			}		}		catch (IOException e)		{			NeuroSynchUtil.ErrorMessage("Couldn't make the debug out file, " + e.getMessage(), true);		}	}		static public void MemoryPrint(String message)	{		if (false)		{			long freeMem = Runtime.getRuntime().freeMemory();			long totalMemory = Runtime.getRuntime().totalMemory();						System.out.println(message + "\rtot mem: " + Long.toString(totalMemory)					+ "\rfree mem: " + Long.toString(freeMem)					+ "\rtot mem - free mem: " + Long.toString(totalMemory - freeMem));				}	}		static public void PrintTreeToFile(Component c)	{		if (fgDebugging)		{			PrintStream stream = GetFilePrintStream();			stream.println("Printing tree");			PrintChildren(c, stream);			PrintParents(c, stream);		}		}		static public void PrintParents(Component c, PrintStream stream)	{		if (fgDebugging)		{			stream.println("Printing parents");			do			{				stream.println(c.toString());				stream.println("---------------");				stream.println("");				c = c.getParent();			} while (c != null);		}	}		static public void PrintChildren(Component c, PrintStream stream)	{		if (fgDebugging)		{			stream.println("Printing Children");						if (c instanceof Component)			{			    Component[] cArray = ((Container)c).getComponents();								for (int i = 0; i < cArray.length; i++)				{					stream.println(cArray[i].toString());					PrintChildren(cArray[i], stream);				}			}			stream.println("#########################");			stream.println("");		}	}		static public PrintStream GetFilePrintStream()	{	/*	if (fgFileOut == null)		{                    fgFileOut = new PrintStream(System.out);			try 			{				fgFileOut = new PrintStream(new FileOutputStream(kDebugOutFileName));			}			catch (IOException e)			{				NeuroSynchUtil.ErrorMessage("Couldn't open " + kDebugOutFileName + "\r" + e.getMessage(), NeuroSynchUtil.kShowDlog);			} 		}				return fgFileOut; */                                return System.out;	}		static public void DebugFileWrite(byte[] bytes, int size)	{		if (fgDebugging)		{			PrintStream stream = GetFilePrintStream();						stream.write(bytes, 0, size);		}	} 	static public void DebugFilePrintln(String text)	{		if (fgDebugging)		{			PrintStream stream = GetFilePrintStream();						stream.println(text);			stream.flush();		}	}		static public void AddKeyListenersToChildren(Container c)	{		int count = c.getComponentCount();				for (int i = 0; i < count; i++)		{			Component child = c.getComponent(i);						child.addKeyListener(new DebugKeyAdapter());					if (child instanceof Container)			{				AddKeyListenersToChildren((Container)child);			}		}		}	static public void WriteDouble(double value, int colWidth)	{		String string = Double.toString(value);				if (string.length() > colWidth)		{			string = string.substring(0, colWidth - 1);		}				System.out.print(string);		for (int i = 0; i < colWidth - string.length(); i++)		{			System.out.print(' ');		}	}}class DebugKeyAdapter extends KeyAdapter{	DebugKeyAdapter() {}		public void keyTyped(KeyEvent e)	{		System.out.println("Key pressed- " + e.toString());	}}