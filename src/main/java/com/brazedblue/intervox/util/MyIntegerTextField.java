// class grabbed form package javax.swing.colorchooser and made public/* * @(#)JIntegerTextField.java	1.3 98/08/26 * * Copyright 1998 by Sun Microsystems, Inc., * 901 San Antonio Road, Palo Alto, California, 94303, U.S.A. * All rights reserved. * * This software is the confidential and proprietary information * of Sun Microsystems, Inc. ("Confidential Information").  You * shall not disclose such Confidential Information and shall use * it only in accordance with the terms of the license agreement * you entered into with Sun. */package com.brazedblue.intervox.util;import java.awt.*;import java.awt.event.*;import java.beans.PropertyChangeEvent;import java.beans.PropertyVetoException;import java.beans.VetoableChangeListener;import javax.swing.*;import javax.swing.event.*;import javax.swing.text.*;/** * A text field which takes integer values * * <p>copied from java.swing.colorchooser.JIntegerTextField and modified * * @version 1.3 08/26/98 * @author Steve Wilson */public class MyIntegerTextField extends JTextField {  private int fDefaultNumOfDigits = 8;  private MyIntegerTextFieldVetoableChangeListener fChangeListener = null;  public MyIntegerTextField(int min, int max, int initialValue) {    super(        new MyIntegerTextFieldNumericDocument(min, max),        initialValue + "",        String.valueOf(max).length() + 1);    installKeyboardActions();  }  public void SetValidateOnClose(boolean set) {    MyIntegerTextFieldNumericDocument doc = (MyIntegerTextFieldNumericDocument) getDocument();    doc.fDeferRangeError = set;  }  public VetoableChangeListener GetVetoableChangeListener() {    if (fChangeListener == null) {      fChangeListener = new MyIntegerTextFieldVetoableChangeListener();    }    return fChangeListener;  }  public Dimension getPreferredSize() {    Dimension size = super.getPreferredSize();    Insets insets = getInsets();    FontMetrics fMetrics = getFontMetrics(getFont());    size.height = fMetrics.getHeight() + insets.bottom + insets.top;    size.width = fDefaultNumOfDigits * fMetrics.charWidth('0') + insets.left + insets.right;    return size;  }  protected void installKeyboardActions() {    KeyStroke upKey = KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0);    KeyStroke downKey = KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0);    registerKeyboardAction(new MyIntegerTextFieldValueDelta(1), upKey, JComponent.WHEN_FOCUSED);    registerKeyboardAction(new MyIntegerTextFieldValueDelta(-1), downKey, JComponent.WHEN_FOCUSED);  }  public int getIntegerValue() {    return ((MyIntegerTextFieldNumericDocument) getDocument()).getIntegerValue();  }  public void setText(String s) {    MyIntegerTextFieldNumericDocument doc = (MyIntegerTextFieldNumericDocument) getDocument();    int oldValue = doc.currentVal;    try {      doc.currentVal = doc.parse(s);    } catch (Exception e) {      Toolkit.getDefaultToolkit().beep();      return;    }    if (oldValue != doc.currentVal) {      doc.checkingEnabled = false;      super.setText(s);      doc.checkingEnabled = true;    }  }  boolean ValueIsValid() {    MyIntegerTextFieldNumericDocument doc = (MyIntegerTextFieldNumericDocument) getDocument();    return doc.IsValid(getText());  }  /*  	private void CheckForInternalFrame()  	{  		if (fFrame == null)  		{  			fFrame = NeuroSynchUtil.GetInternalFrame(this);  			if (fFrame != null)  			{       			 MyIntegerTextFieldNumericDocument doc = (MyIntegerTextFieldNumericDocument)getDocument();  				 doc.fDeferRangeError = true;  				fFrame.addVetoableChangeListener(new MyIntegerTextFieldVetoableChangeListener());  			}  		}  	}  */  private class MyIntegerTextFieldVetoableChangeListener implements VetoableChangeListener {    private MyIntegerTextFieldVetoableChangeListener() {}    public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {      if ((evt.getPropertyName() == JInternalFrame.IS_CLOSED_PROPERTY)          && Boolean.TRUE.equals(evt.getNewValue())) {        if (!ValueIsValid()) {          String message = "Entered integer value is not valid";          Object source = evt.getSource();          //	this is needed to bring Frame up when dialog closes          NeuroSynchUtil.ErrorMessage(message, NeuroSynchUtil.kShowDlog, null);          Window frame = source instanceof Window ? (Window) source : null;          if (frame != null) {            frame.toFront();          }          throw new PropertyVetoException(message, evt);        }      }    }  }  ;  class MyIntegerTextFieldValueDelta implements ActionListener {    int delta;    public MyIntegerTextFieldValueDelta(int delta) {      this.delta = delta;    }    public void actionPerformed(ActionEvent e) {      MyIntegerTextFieldNumericDocument doc = (MyIntegerTextFieldNumericDocument) getDocument();      int min = doc.min;      int max = doc.max;      int value = getIntegerValue();      value += delta;      if (value < min) {        value = max;      } else if (value > max) {        value = min;      }      setText(String.valueOf(value));    }  }}class MyIntegerTextFieldNumericDocument extends PlainDocument {  private String KNotInRange = "Value not in range";  int min;  int max;  int currentVal = 0;  boolean checkingEnabled = true;  boolean fDeferRangeError = false;  public MyIntegerTextFieldNumericDocument(int min, int max) {    this.min = min;    this.max = max;  }  public int getIntegerValue() {    return currentVal;  }  public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {    if (str == null) {      return;    }    if (!checkingEnabled) {      super.insertString(offs, str, a);      return;    }    String proposedResult = null;    if (getLength() == 0) {      proposedResult = str;    } else {      StringBuffer currentBuffer = new StringBuffer(getText(0, getLength()));      currentBuffer.insert(offs, str);      proposedResult = currentBuffer.toString();    }    try {      currentVal = parse(proposedResult);      super.insertString(offs, str, a);    } catch (Exception e) {      String message = e.getMessage();      if (message != KNotInRange || !fDeferRangeError) {        Toolkit.getDefaultToolkit().beep();      } else {        super.insertString(offs, str, a);      }    }  }  public void remove(int offs, int len) throws BadLocationException {    if (!checkingEnabled) {      super.remove(offs, len);      return;    }    String currentText = getText(0, getLength());    String beforeOffset = currentText.substring(0, offs);    String afterOffset = currentText.substring(len + offs, currentText.length());    String proposedResult = beforeOffset + afterOffset;    try {      currentVal = parse(proposedResult);      super.remove(offs, len);    } catch (Exception e) {      String message = e.getMessage();      if (message != KNotInRange || !fDeferRangeError) {        Toolkit.getDefaultToolkit().beep();      } else {        super.remove(offs, len);      }    }  }  public int parse(String proposedResult) throws NumberFormatException {    int value = 0;    if (proposedResult.length() != 0) {      value = Integer.parseInt(proposedResult);    }    if (value >= min && value <= max) {      return value;    } else {      throw new NumberFormatException(KNotInRange);    }  }  public boolean IsValid(String text) {    boolean result = true;    try {      parse(text);    } catch (Exception e) {      result = false;    }    return result;  }}