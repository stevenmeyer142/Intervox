package com.brazedblue.intervox.util;import com.brazedblue.intervox.display.CloseActionListener;import com.brazedblue.intervox.display.CustomOS;import com.brazedblue.intervox.display.ValidatingDialog;import java.awt.*;import java.awt.event.KeyEvent;import java.awt.peer.*;import java.beans.VetoableChangeListener;import java.io.*;import java.text.*;import java.util.*;import javax.swing.*;public class NeuroSynchUtil /* implements anInterface */ {  public static Frame fgMainFrame;  public static final boolean kNoDlog = false;  public static final boolean kShowDlog = true;  private static final String kMacintoshOSName = "Mac OS";  private static final String kOSXName = "Mac OS X";  private static boolean fgImageGuidedSurgery = true;  private static final String kOSXJavaPackageDir = "/Contents/Resources/Java";  public NeuroSynchUtil() {}  public static void CenterComponent(Component c) {    Container parent = c.getParent();    if (parent != null) {      Dimension parentSize = parent.getSize();      Dimension childSize = c.getSize();      c.setLocation(          (parentSize.width - childSize.width) / 2, (parentSize.height - childSize.height) / 2);    } else {      ErrorMessage("NeuroSynchUtil.CenterComponent, parent- " + parent, kNoDlog);    }  }  public static boolean GetImageGuided() {    return fgImageGuidedSurgery;  }  public static void SetImageGuided(boolean set) {    fgImageGuidedSurgery = set;  }  public static String GetDecimalString(double value, int decimalPlaces) {    String doubleString = Double.toString(value);    String result = doubleString;    int periodIndex = result.indexOf('.');    if (periodIndex >= 0 && periodIndex + decimalPlaces + 1 < result.length()) {      result = doubleString.substring(0, periodIndex + decimalPlaces + 1);      int expIndex = doubleString.indexOf('E'); // 	this could be better done      if (expIndex == -1) {        expIndex = doubleString.indexOf('e');      }      if (expIndex != -1) {        result += doubleString.substring(expIndex);      }    }    return result;  }  public static PrintStream GetErrorStream() {    return System.out;  }  public static int Limit(int val, int low, int high) {    return Math.max(Math.min(val, high), low);  }  public static boolean IsMacintosh() {    String osName = GetOSName();    return osName.equalsIgnoreCase(kMacintoshOSName);  }  public static String GetWorkingDirectory() {    String userDir = System.getProperty("user.dir");    if (IsOSX()) { //  walk back out of package      if (userDir.endsWith(kOSXJavaPackageDir)) {        String correctDir = userDir.substring(0, userDir.length() - kOSXJavaPackageDir.length());        int nextDir = correctDir.lastIndexOf('/');        if (nextDir > 0) {          userDir = correctDir.substring(0, nextDir + 1);        }      }    }    return userDir;  }  public static boolean IsOSX() {    String osName = GetOSName();    return osName.equalsIgnoreCase(kOSXName);  }  private static String GetOSName() {    return System.getProperty("os.name");  }  public static void WriteSerialVersionID(String className) {    try {      Class theClass = Class.forName(className);      WriteSerialVersionID(theClass);    } catch (ClassNotFoundException e) {      ErrorMessage(e.getMessage(), kNoDlog);    }  }  public static String AskUser(      String title, String message, String[] choices, int defaultIndex, int cancelIndex) {    JOptionPane pane = new JOptionPane(message, JOptionPane.QUESTION_MESSAGE);    JButton buttons[] = new JButton[choices.length];    for (int i = 0; i < choices.length; i++) {      buttons[i] = new JButton(choices[i]);    }    pane.setOptions(buttons);    JDialog dlog = pane.createDialog(null, title);    if (defaultIndex >= 0 && defaultIndex < buttons.length) {      dlog.getRootPane().setDefaultButton(buttons[defaultIndex]);    }    if (cancelIndex >= 0 && cancelIndex < buttons.length) {      KeyStroke cancelKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, false);      buttons[cancelIndex].registerKeyboardAction(          null, cancelKeyStroke, JComponent.WHEN_IN_FOCUSED_WINDOW);    }    CloseActionListener buttonListener = new CloseActionListener(dlog);    for (int i = 0; i < buttons.length; i++) {      buttons[i].addActionListener(buttonListener);    }    dlog.pack();    CustomOS.CenterDialog(dlog);    dlog.setVisible(true);    Object selection = buttonListener.GetCloseObject();    String result = null;    if (selection != null) {      result = ((JButton) selection).getText();    }    return result;  }  /*  	static public JInternalFrame GetInternalFrame(Component c)  	{  		Container parent = c.getParent();  		do  		{  			if (parent instanceof JInternalFrame)  			{  				break;  			}  			parent = parent.getParent();  		}  		while (parent != null);  		return (JInternalFrame)parent;  	}  */  public static int GetUserIntegerInput(      String title, String message, int min, int max, int initialValue) {    ValidatingDialog dlog = new ValidatingDialog(null, title, true);    Container contentPane = dlog.getContentPane();    contentPane.setLayout(new FlowLayout());    Box box = new Box(BoxLayout.Y_AXIS);    contentPane.add(box);    JLabel label = new JLabel(message);    box.add(label);    MyIntegerTextField intText = new MyIntegerTextField(min, max, initialValue);    box.add(intText);    VetoableChangeListener listener = intText.GetVetoableChangeListener();    intText.SetValidateOnClose(true);    dlog.addVetoableChangeListener(listener);    box = new Box(BoxLayout.Y_AXIS);    contentPane.add(box);    box.add(Box.createVerticalGlue());    JButton okButton = new JButton("OK");    box.add(okButton);    dlog.getRootPane().setDefaultButton(okButton);    CloseActionListener buttonListener = new CloseActionListener(dlog);    okButton.addActionListener(buttonListener);    dlog.pack();    CustomOS.CenterDialog(dlog);    dlog.setVisible(true);    return intText.getIntegerValue();  }  public static String GetUserInput(String title, String message, String value) {    Object result =        JOptionPane.showInputDialog(            null, message, title, JOptionPane.PLAIN_MESSAGE, null, null, value);    return (result != null) ? (String) result : null;  }  public static String GetUserInput(      String title, String message, String[] choices, String initialChoice) {    Object result =        JOptionPane.showInputDialog(            null, message, title, JOptionPane.PLAIN_MESSAGE, null, choices, initialChoice);    return (result != null) ? (String) result : null;  }  public static void WriteSerialVersionID(Class aClass) {    ObjectStreamClass strClass = ObjectStreamClass.lookup(aClass);    if (strClass != null) {      long id = strClass.getSerialVersionUID();      System.out.println(aClass.getName() + ": " + Long.toString(id));    } else {      ErrorMessage(          aClass.getName() + " is not serialized, NeuroSynchUtil.GetSerialVersionIDString",          kNoDlog);    }  }  public static boolean SubstringMatches(String str, String matchStr, int index) {    boolean result = false;    if (str.length() >= (matchStr.length() + index)) {      String subString = str.substring(index, matchStr.length() + index);      result = subString.equals(matchStr);    }    return result;  }  public static void MyYield() {    Thread.yield();    try {      Thread.sleep(50); // I need this because sometimes the yield doesn't work    } catch (InterruptedException e) {    }  }  public static void WriteSerialVersionID(Object obj) {    WriteSerialVersionID(obj.getClass());  }  private static void MessageBox(String message, Frame frame) {    JOptionPane.showMessageDialog(        frame != null ? frame : fgMainFrame, message, "Error", JOptionPane.ERROR_MESSAGE);  }  public static void Validate(      Component c) { // swing apps should call revalidate, but it's not working    c.validate();  }  public static Frame GetFrame(Container c) {    Container parent = c.getParent();    while (parent.getParent() != null) {      parent = parent.getParent();    }    return (Frame) parent;  }  public static int Randomize(int low, int high) {    double randNum = Math.random();    return low + (int) Math.round(randNum * (high - low));  }  public static int UnsignedByte(byte b) {    return (b < 0) ? b + 256 : b;  }  public static String GetDelimetedString(      StringCharacterIterator iter, String string, char start, char end) {    String result = null;    int curPos = iter.getIndex();    int startPos = string.indexOf(start, curPos) + 1;    if (startPos >= 0) {      int endPos = string.indexOf(end, startPos);      if (endPos > startPos) {        result = string.substring(startPos, endPos);        iter.setIndex(endPos);      }    }    return result;  }  // is string only composed of numbers in radix range (no whitespace, no nothing)  public static boolean IsIntegerString(String string, int radix) {    boolean result = string.length() > 0;    for (int i = 0; i < string.length(); i++) {      if (Character.digit(string.charAt(i), radix) == -1) {        result = false;        break;      }    }    return result;  }  public static boolean StrArrayContainsString(String[] array, String string) {    boolean result = false;    for (int i = 0; i < array.length; i++) {      if (array[i].equals(string)) {        result = true;        break;      }    }    return result;  }  public static void ErrorMessage(String message, boolean doDialog, Frame frame) {    if (doDialog) {      MessageBox(message, frame);    }    GetErrorStream().println(message);  }  public static void ErrorMessage(String message, boolean doDialog) {    ErrorMessage(message, doDialog, null);  }  public static void ErrorMessage(String message) {    ErrorMessage(message, kNoDlog, null);  }  public static float GetDistanceBetweenPts(float x1, float y1, float x2, float y2) {    float squareSum = Square(x1 - x2) + Square(y1 - y2);    if (squareSum > 0) {      return (float) Math.sqrt(squareSum);    } else {      return 0;    }  }  public static float Square(float value) {    return value * value;  }  /*  static public ComponentPeer GetFirstHeavyweightPeer(Component c, Point offset)  {  	ComponentPeer result = null;  	while (c != null)  	{  		ComponentPeer peer = c.getPeer();  		if (!(peer instanceof java.awt.peer.LightweightPeer))  		{  			result = peer;  			break;  		}  		if (offset != null)  		{  			if (c instanceof JComponent)  			{  				JComponent jc = (JComponent)c;  				offset.x += jc.getX();  				offset.y += jc.getY();  			}  			else  			{  				Point position = c.getLocation();  				offset.x += position.x;  				offset.y += position.y;  			}  		}  		c = c.getParent();  	}  	return result;  }  */  public static int GetPosIntegerPostfix(String str) {    int result = 0;    int firstdigit = str.length();    while (firstdigit > 0 && Character.isDigit(str.charAt(firstdigit - 1))) {      firstdigit--;    }    if (firstdigit < str.length()) {      String numString = str.substring(firstdigit, str.length());      try {        result = Integer.parseInt(numString);      } catch (NumberFormatException exception) {        ErrorMessage("GetPosIntegerPostfix, couldn't parse int", kNoDlog);      }    } else {      ErrorMessage("GetPosIntegerPostfix, no postfix digit", kNoDlog);    }    return result;  }  public static String ByteToHexString(byte b) {    String result = null;    int bValue = UnsignedByte(b);    int first = bValue / 16;    int second = bValue % 16;    char[] chArray = new char[2];    chArray[0] = (char) (first < 10 ? '0' + first : 'A' + (first - 10));    chArray[1] = (char) (second < 10 ? '0' + second : 'A' + (second - 10));    result = new String(chArray, 0, 2);    return result;  }  public static float StringTofloat(String string) throws NumberFormatException {    float result = 0;    //		String lowercase = string.toLowerCase();    try {      result = Float.valueOf(string).floatValue();    } catch (NumberFormatException e) {      NeuroSynchUtil.ErrorMessage(          "FloatPoint.ToFloat bad format " + string + ":" + e.getMessage(), kNoDlog);    }    return result;  }  public static boolean Str2InStr1(String str1, String str2, boolean ignoreCase) {    boolean result = false;    int str2Length = str2.length();    int lengthDiff = str1.length() - str2Length;    for (int i = 0; i <= lengthDiff; i++) {      if (str1.regionMatches(ignoreCase, i, str2, 0, str2Length)) {        result = true;        break;      }    }    return result;  }  public static int[] RectangleToInts(Rectangle rect) {    int[] result = new int[4];    result[0] = rect.x;    result[1] = rect.y;    result[2] = rect.width;    result[3] = rect.height;    return result;  }}