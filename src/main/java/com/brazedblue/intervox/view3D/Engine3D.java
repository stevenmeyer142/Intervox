package com.brazedblue.intervox.view3D;import java.awt.Rectangle;import java.awt.Color;import java.awt.Point;import com.brazedblue.intervox.geometry.FloatPoint;import com.brazedblue.intervox.geometry.Matrix4;import com.brazedblue.intervox.geometry.Location3D;abstract public class Engine3D  /* implements anInterface */ {		private static Engine3D fgEngine3D;	protected static boolean fgInitialized = false;		public Engine3D() 	{			}		public static View3D New3DView(Rectangle frame)	{		Engine3D engine = GetEngine3D();		long qdRef = engine.Create3DView(frame);				// add failure handling for no creation		return new View3D(engine, frame, qdRef);	}	    /**     * Creates a Mesh3D object from slices data     * @param      width         slice image width.     * @param      height 		 slice image height      * @param      slices 		 byte values with bit set for each of 7 regions     * @param      value 		 bit of this region	 * @param	   geomID		 geometry identifier     * @return 	   Mesh3D object     *                                  */	public static Mesh3D NewMesh3D(int width, int height, byte[][] slices, int value, long geomID, int resolution)	{		Engine3D engine = GetEngine3D();		long meshRef = engine.CreateGeometryFromRegion(width, height, slices, value, geomID, resolution);		// add failure handling for no creation		return new Mesh3D(engine, meshRef);	}                public static int GetMeshResolution(Mesh3D mesh)        {            Engine3D engine = GetEngine3D();                        return engine.GetGeometryResolution(mesh.GetRef());       }		public static Mesh3D NewMesh3DVersion(Mesh3D otherMesh, long geomID)	{		Engine3D engine = GetEngine3D();		long meshRef = engine.CreateGeometryFromVersion(otherMesh.GetRef(), geomID);				return new Mesh3D(engine, meshRef);	}		public static Engine3D GetEngine3D()	{		if (fgEngine3D == null)		{			// fgEngine3D = Quicktime3D.GetStaticMe();			fgEngine3D = OpenGL.GetStaticMe();		}		return fgEngine3D;	}		public static void ShutDown()	{		if (fgInitialized && fgEngine3D != null)		{			fgEngine3D.ShutDown3D();		}	}	   /**     * set zoom focus     * @param      focus      		point to zoom to     * @param      glContext 		the context      *                                  */	abstract protected void SetZoomFocus(Point focus, long qdView);	abstract protected void Dispose3DGeometry(long qdGeometry);	abstract protected void SetGeometryColor(Color color, long qdGeometry);	abstract protected void SetGeometryTransparency(float transparency, long qdGeometry);    /**     * Creates a 3D mesh from slices data     * @param      width         slice image width.     * @param      height 		 slice image height      * @param      slices 		 byte values with bit set for each of 7 regions     * @param      value 		 bit of this region	 * @param	   geomID		 geometry identifier     * @return 	   int generated by native code     *                                  */	        abstract protected void DebugSetOpenGLLighting(long qdView, float[][] values);        abstract protected void DebugGetOpenGLLighting(long qdView, float[][] values);	abstract protected void AbsoluteZoomContext(float zoom, long qdView);	abstract protected long CreateGeometryFromRegion(int width, int height, byte[][] slices, int value, long geomID, int resolution);	abstract protected long CreateGeometryFromVersion(long l, long geomID);	abstract protected void ShutDown3D();	abstract protected long Create3DView(Rectangle frame);	abstract protected void SetPointerLocation(long qdView, Location3D start, Location3D end);	abstract protected void RemoveAllGeometriesFromView(long qdView);	abstract protected boolean ViewHasGeometry(long qdGeometry, long qdView);	abstract protected void ShowPointer(long qdView, boolean show);	abstract protected void Get3DPixelData(long qdView, int[] pixArray, int width, int height);	abstract protected void AddGeometryToView(long qdGeometry, long qdView);	abstract protected void RemoveGeometryFromView(long qdGeometry, long qdView);	abstract protected void UpdateGeometryInView(long qdGeometry, long qdView);	abstract protected void Dispose3DView(long qdView);	abstract protected void SetRotationMatrix(Matrix4 rotation, long qdView);	abstract protected void SetLowResView(boolean lowRes, long qdView);       abstract protected int GetGeometryResolution(long fMeshRef); 		    /**     * set(update) fiducial point locations     * @param      locations  array of Location3D     * @param      labels  		array of "String"     * @param      qdView 		 the view      *                                  */	abstract protected void SetFiducials(Location3D[] locations, String[] labels, long qdView);	     /**     * display the fiducials     * @param      show  		display fiducials     * @param      qdView 		the view      *                                  */	abstract protected void SetShowsFiducials(boolean show, long qdView);   /**     * zoom the context view     * @param      howMuch       factor (i.e. .5 = zoom in 50 %)     * @param      qdView 		 the view      *                                  */	abstract protected void ZoomContext(float howMuch, long qdView);}