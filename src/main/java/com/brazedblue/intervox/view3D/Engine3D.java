package com.brazedblue.intervox.view3D;import com.brazedblue.intervox.geometry.Location3D;import java.awt.Color;import java.awt.Point;import java.awt.Rectangle;public abstract class Engine3D /* implements anInterface */ {  private static Engine3D fgEngine3D;  protected static boolean fgInitialized = false;  public Engine3D() {}  public static View3D New3DView(Rectangle frame) {    Engine3D engine = GetEngine3D();    long qdRef = engine.Create3DView(frame);    // add failure handling for no creation    return new View3D(engine, frame, qdRef);  }  /**   * Creates a Mesh3D object from slices data   *   * @param width slice image width.   * @param height slice image height   * @param slices byte values with bit set for each of 7 regions   * @param value bit of this region   * @param geomID geometry identifier   * @return Mesh3D object   */  public static Mesh3D NewMesh3D(      int width, int height, byte[][] slices, int value, long geomID, int resolution) {    Engine3D engine = GetEngine3D();    long meshRef =        engine.CreateGeometryFromRegion(width, height, slices, value, geomID, resolution);    // add failure handling for no creation    return new Mesh3D(engine, meshRef);  }  public static int GetMeshResolution(Mesh3D mesh) {    Engine3D engine = GetEngine3D();    return engine.GetGeometryResolution(mesh.GetRef());  }  public static Mesh3D NewMesh3DVersion(Mesh3D otherMesh, long geomID) {    Engine3D engine = GetEngine3D();    long meshRef = engine.CreateGeometryFromVersion(otherMesh.GetRef(), geomID);    return new Mesh3D(engine, meshRef);  }  public static Engine3D GetEngine3D() {    if (fgEngine3D == null) {      // fgEngine3D = Quicktime3D.GetStaticMe();      fgEngine3D = OpenGL.GetStaticMe();    }    return fgEngine3D;  }  public static void ShutDown() {    if (fgInitialized && fgEngine3D != null) {      fgEngine3D.ShutDown3D();    }  }  /**   * set zoom focus   *   * @param focus point to zoom to   * @param glContext the context   */  protected abstract void SetZoomFocus(Point focus, long qdView);  protected abstract void Dispose3DGeometry(long qdGeometry);  protected abstract void SetGeometryColor(Color color, long qdGeometry);  protected abstract void SetGeometryTransparency(float transparency, long qdGeometry);  /**   * Creates a 3D mesh from slices data   *   * @param width slice image width.   * @param height slice image height   * @param slices byte values with bit set for each of 7 regions   * @param value bit of this region   * @param geomID geometry identifier   * @return int generated by native code   */  protected abstract void DebugSetOpenGLLighting(long qdView, float[][] values);  protected abstract void DebugGetOpenGLLighting(long qdView, float[][] values);  protected abstract void AbsoluteZoomContext(float zoom, long qdView);  protected abstract long CreateGeometryFromRegion(      int width, int height, byte[][] slices, int value, long geomID, int resolution);  protected abstract long CreateGeometryFromVersion(long l, long geomID);  protected abstract void ShutDown3D();  protected abstract long Create3DView(Rectangle frame);  protected abstract void SetPointerLocation(long qdView, Location3D start, Location3D end);  protected abstract void RemoveAllGeometriesFromView(long qdView);  protected abstract boolean ViewHasGeometry(long qdGeometry, long qdView);  protected abstract void ShowPointer(long qdView, boolean show);  protected abstract void Get3DPixelData(long qdView, int[] pixArray, int width, int height);  protected abstract void AddGeometryToView(long qdGeometry, long qdView);  protected abstract void RemoveGeometryFromView(long qdGeometry, long qdView);  protected abstract void UpdateGeometryInView(long qdGeometry, long qdView);  protected abstract void Dispose3DView(long qdView);  protected abstract void SetRotation(float xRot, float yRot, long qdView);  protected abstract void SetLowResView(boolean lowRes, long qdView);  protected abstract int GetGeometryResolution(long fMeshRef);  /**   * set(update) fiducial point locations   *   * @param locations array of Location3D   * @param labels array of "String"   * @param qdView the view   */  protected abstract void SetFiducials(Location3D[] locations, String[] labels, long qdView);  /**   * display the fiducials   *   * @param show display fiducials   * @param qdView the view   */  protected abstract void SetShowsFiducials(boolean show, long qdView);  /**   * zoom the context view   *   * @param howMuch factor (i.e. .5 = zoom in 50 %)   * @param qdView the view   */  protected abstract void ZoomContext(float howMuch, long qdView);}