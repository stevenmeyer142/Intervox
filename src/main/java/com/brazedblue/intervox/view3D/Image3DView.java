package com.brazedblue.intervox.view3D;import java.awt.*;import java.awt.event.*;import javax.swing.border.*;import com.brazedblue.intervox.image.*;import com.brazedblue.intervox.data.*;import com.brazedblue.intervox.util.*;import com.brazedblue.intervox.geometry.*;import com.brazedblue.intervox.device.*;import com.brazedblue.intervox.registration.*;import com.brazedblue.intervox.tracker.TrackerSettingsAccess;import com.brazedblue.intervox.display.*;//import com.brazedblue.intervox.display.mac.CopyingImageAdorner;import javax.swing.*;// parallel code between Image3DView and ImageSeriesViewpublic class Image3DView extends JPanel implements NSImageView, ActionListener, DataModelListener {	private View3D							f3DView;		private FocalPointModel					fFocalPoint;	private boolean							fDisplayPointer = false;	private PatientData						fData = null;		private Dimension						f3DViewSize = new Dimension(kDefaultImageWidth, kDefaultImageHeight);		private AdornedComponent				fImageView;	private ImageAdorner					fImageAdorner;	private RGBArrayImageSource 			fImageSource = new RGBArrayImageSource(false);	private int[]							fRGBArray;	private ImageViewType					fImageViewType;		private FloatPoint						fSeriesSize = null;		private JPanel							fButtonPanel;	private JPanel							fControlsPanel;	private ImageSeriesViewControls			fImageSeriesViewControls;	private ImageControlSettings			fImageControlSettings;	private ImageSettingsFactory			fImageSettingsFactory;	private Image3DViewFocalPointListener	fFocalPointListener = new Image3DViewFocalPointListener();		private Image3DViewZoomListener			fZoomListener;	private Image3DViewFiducialsListener	fFiducialsListener;		static private final String 			kRegionCommand = "Region";	static private final String 			kPointerCommand = "Pointer";	static private final String 			kFiducialsCommand = "Fiducials";	static private final float 				kZoomIn = 0.8f;	static private final float 				kZoomOut = 1 / kZoomIn;			private static final int 				kZoomMax = 20;		private static final int 				kDefaultImageWidth = 256;	private static final int 				kDefaultImageHeight = 256;	 	public Image3DView(float magnification, boolean displaysPointer)	{		this(magnification, displaysPointer, new Image3DViewType(1.0f));	}         /*        * 	Used by DebugTestOpenGL        */       View3D DebugGetView3D()        {            return GetView3D();        }	  	public Image3DView(float magnification, boolean displaysPointer, ImageViewType imageViewType) 	{		fImageViewType = imageViewType;				fImageView = new AdornedComponent();		add(fImageView);		Image3DViewMouseListener l = new Image3DViewMouseListener();		fImageView.addMouseListener(l);		fImageView.addMouseMotionListener(l);		fImageAdorner = new ImageAdorner(1.0f);		fImageAdorner.SetView(fImageView);		fImageView.AddComponentAdorner(fImageAdorner);		fImageView.SetComponentSizer(fImageAdorner);				f3DViewSize.width = (int)(f3DViewSize.width * magnification);		f3DViewSize.height = (int)(f3DViewSize.height * magnification);				fImageAdorner.SetImage(CreateImage());		//		Create3DView();				setLayout(null);				fControlsPanel = new JPanel();		fControlsPanel.setLayout(new BoxLayout(fControlsPanel, BoxLayout.Y_AXIS));		add(fControlsPanel);				if (displaysPointer)		{			JCheckBox pointerbtn = new JCheckBox(kPointerCommand);			pointerbtn.setActionCommand(kPointerCommand);			fControlsPanel.add(pointerbtn);			pointerbtn.addActionListener(this);				}				JCheckBox fiducialBtn = new JCheckBox(kFiducialsCommand);		fiducialBtn.setActionCommand(kFiducialsCommand);		fControlsPanel.add(fiducialBtn);		fiducialBtn.addActionListener(this);		 		fButtonPanel = new JPanel(new FlowLayout());				fButtonPanel.setBorder(new TitledBorder(new BevelBorder(BevelBorder.RAISED), "3D Regions", TitledBorder.TOP, TitledBorder.ABOVE_TOP));		add(fButtonPanel);				fZoomListener = new Image3DViewZoomListener();		fImageView.AddComponentAdorner(fZoomListener);				fFiducialsListener = new Image3DViewFiducialsListener();    }		private void DisplayPointer(TransformerAccess transformer, FloatPoint location, Matrix3 rotation, SingleSpaceID fromSpace, ThreeDVector pointerDirection)	{				rotation.transform(pointerDirection);		transformer.TransformVector(pointerDirection, fromSpace, GetSpaceID());				FloatPoint handlePoint = new FloatPoint(location);				handlePoint.Add(pointerDirection);				SetPointerLocation(location, handlePoint);		UpdateImageFrom3DView();				}			private float GetPointerLength()	{		return -20;	}	/*	public boolean GetAutoScrolls()	{		return false;	} */			private Dimension GetImageViewSize()	{		return fImageView.getPreferredSize();	}			public void SetSpaceID(SingleSpaceID spaceID)	{		RegionsOfInterest regions = GetRegionsOfInterest();		if (regions != null)		{			regions.RemoveListener(this);		}				boolean newSpace = !spaceID.equals(fImageViewType.GetSingleSpaceID());		fImageViewType.SetSpaceID(spaceID); 		regions = GetRegionsOfInterest();		if (regions != null)		{			regions.AddListener(this);		}				if (newSpace)		{			HideAllRegions();			UpdateRegionsBtns();		}	}		private boolean IsEditingConfiguration()	{		return fData == null;	}		public ImageControlSettings GetImageControlSettings()	{		if (fImageControlSettings == null)		{			fImageControlSettings = IsEditingConfiguration() ? DefaultImageControlSettings.GetEditConfigSettings() : fImageSettingsFactory.GetCurrentSettings();		}		//	this shit don't work I need an ImageControlSettingsField		return fImageControlSettings;	}			private void SetPointerLocation(Location3D start, Location3D end)	{		if (fSeriesSize == null)		{			Image3DField series = GetImage3DField();						fSeriesSize = new FloatPoint(series.MaxCoord(FloatPoint.X), series.MaxCoord(FloatPoint.Y),						series.MaxCoord(FloatPoint.Z));		}/*				FloatPoint startPt = new FloatPoint(start);		startPt.negate();		startPt.Add(fSeriesSize);				FloatPoint endPt = new FloatPoint(end);		endPt.negate();		endPt.Add(fSeriesSize);	*/					GetView3D().SetPointerLocation(TranslatePoint(start), TranslatePoint(end));	}		public Dimension getPreferredSize()	{		Dimension zeroDimen = new Dimension(0, 0);		Dimension btnPanelPrefSize = fButtonPanel.isVisible() ? fButtonPanel.getPreferredSize() : zeroDimen;		Dimension controlsPanelPrefSize = fControlsPanel.isVisible() ? fControlsPanel.getPreferredSize() : zeroDimen;				Dimension result =  fImageView.getPreferredSize();		result.height += btnPanelPrefSize.height > controlsPanelPrefSize.height ?  								btnPanelPrefSize.height : controlsPanelPrefSize.height;				Dimension cntrlPanelSize = GetControlPanelSize(result.width);				if (cntrlPanelSize != null)		{			result.height += cntrlPanelSize.height;		}		fZoomListener.AdjustPreferredSize(result);		return result;	}		public void doLayout()	{		Dimension zeroDimen = new Dimension(0, 0);		Dimension imageSize = fImageView.getPreferredSize();		fImageView.setBounds(0, 0, imageSize.width, imageSize.height);		int btnPanelLeft = 0;		Dimension size = zeroDimen;		if (fControlsPanel.isVisible())		{			fControlsPanel.setLocation(0, imageSize.height);			size = fControlsPanel.getPreferredSize();			fControlsPanel.setSize(size);			btnPanelLeft = fControlsPanel.getWidth();		}				size = getSize();		Dimension buttonPreferredSize = zeroDimen;		if (fButtonPanel.isVisible())		{			fButtonPanel.setLocation(btnPanelLeft, imageSize.height);			buttonPreferredSize = fButtonPanel.getPreferredSize();						fButtonPanel.setSize(size.width - btnPanelLeft, buttonPreferredSize.height);		}		fZoomListener.Layout();		Dimension cntrlPanelSize = GetControlPanelSize(size.width);				if (cntrlPanelSize != null)		{			fImageSeriesViewControls.setBounds(0, imageSize.height + buttonPreferredSize.height, cntrlPanelSize.width, cntrlPanelSize.height);			fImageSeriesViewControls.doLayout();		}	}		public void HideAllRegions()	{		GetView3D().RemoveAllGeometriesFromView();		UpdateImageFrom3DView();	}			public CoRegistrationsAccess GetCoRegistrations()	{		return (fData != null) ? fData.GetCoRegistrations() : null;	}	/*    * @deprecated as of JDK 1.4 Drag and Drop Support*//*	public ImageCopier GetImageCopier()	{		 return fImageAdorner;	} */	public SingleSpaceID GetSpaceID()	{		return fImageViewType.GetSingleSpaceID();	}/*		public void DisplayTrackerOutput(DeviceOutput output, TransformerAccess transformer)	{		if (fDisplayPointer && f3DView != null)		{			Object realPoint = output.GetDataOfType(DeviceOutput.POINT_COORDINATE);			Object rotation = output.GetDataOfType(DeviceOutput.ROTATION_MATRIX);			if (transformer.CanTransform(output.GetSpaceID(), GetSpaceID()) && rotation != null)			{				FloatPoint virtualPoint = new FloatPoint((FloatPoint)realPoint);				transformer.TransformPoint(virtualPoint, output.GetSpaceID(), GetSpaceID());				ThreeDVector pointerDirection = new ThreeDVector(GetPointerLength(), 0, 0);				TrackerSettingsAccess trackerSettings = output.GetTrackerSettings();									if (trackerSettings.IsUsingTrackerOffset())				{					CalculatedOffset offsetCalculations = trackerSettings.GetTrackerCalculatedOffset();										Location3D offset = offsetCalculations.GetOffset();										if (offset != null && !offset.equals(FloatPoint.kZero))					{						pointerDirection.Set(offset);												pointerDirection.scale(GetPointerLength() / pointerDirection.length());					}				}				DisplayPointer(transformer, (FloatPoint)virtualPoint, (Matrix3)rotation, output.GetSpaceID(), pointerDirection);			}		}			}*/		public void SetShowsImageSpaceSelect(boolean shows)	{		ImageControlSettings settings = GetImageControlSettings();				if (settings != null)		{			settings.SetShowsControl(settings.kImageSpaceSelectControl, shows);		}	}		public void SetShowsSettings(boolean shows)	{		ImageControlSettings settings = GetImageControlSettings();				if (settings != null)		{			settings.SetShowsControl(settings.kSettingsControl, shows);		}	}			private void SetupImageSettingsControls()	{		ImageControlSettings settings = GetImageControlSettings();		boolean shown = (settings != null);		if (shown)		{			if (fImageSeriesViewControls == null)			{				fImageSeriesViewControls = new ImageSeriesViewControls();				add(fImageSeriesViewControls);			}						fImageSeriesViewControls.SetImageControlSettings(settings);			fImageSeriesViewControls.SetImageViewType(fImageViewType);		}		/*		if (fImageSeriesViewControls != null)		{			fImageSeriesViewControls.setVisible(shown);		} */				if (fControlsPanel != null)		{			fControlsPanel.setVisible(settings.ShowsControl(settings.kImageSpaceSelectControl));		}				if (fButtonPanel != null)		{			fButtonPanel.setVisible(fData != null);  // this is a hack, should be in settings controls		}	}				//	view was removed		//	done with view/*	public void Removed()	{		RegionsOfInterest regions = GetRegionsOfInterest();		if (regions != null)		{			regions.RemoveListener(this);		}	} */		private boolean IsDisplayingRegion(Region3DModel region)	{		Mesh3D mesh = region.GetMesh3D();		boolean result = mesh != null && GetView3D().ViewHasGeometry(mesh);				return result;	}	private void ShowFiducials(boolean show)	{		GetView3D().SetShowsFiducials(show);		if (fFiducialsListener != null && show)		{			fFiducialsListener.Update3DView();		}		UpdateImageFrom3DView();	}		private void ShowPointer(boolean show)	{		if (show != fDisplayPointer)		{			GetView3D().ShowPointer(show);			fDisplayPointer = show;			if (show)			{				Location3D location = (fFocalPoint != null) ? fFocalPoint.GetFocalPointLocation() : null;								if (location == null)				{					location = new FloatPoint(0, 0, 0);				}				DisplayPoint(location);					}			else			{				UpdateImageFrom3DView();			}					}	}		public void DisplayPoint(Location3D point)	{		if (fDisplayPointer)		{			FloatPoint end = new FloatPoint(point);						Image3DField field = GetImage3DField();			FloatPoint center = new FloatPoint(field.MaxCoord(FloatPoint.X) / 2, field.MaxCoord(FloatPoint.Y) / 2, field.MaxCoord(FloatPoint.Z) / 2);			end.Subtract(center);						if (!end.Equals(FloatPoint.kZero))			{				end.scale(50.0f / end.distance(FloatPoint.kZero));			}			else			{				end.set(50, 50, 50);			}			end.Add(point);						SetPointerLocation(point, end);						UpdateImageFrom3DView();		}		}		private Image CreateImage()	{		if (fImageSource == null)		{			fRGBArray = new int[f3DViewSize.width * f3DViewSize.height];			fImageSource.SetRGBArrayData(fRGBArray, f3DViewSize.width, f3DViewSize.height);		}				return createImage(fImageSource);	}        public Dimension getMinimumSize()        {            return getPreferredSize();        }		public void UpdateImageFrom3DView()	{		if (fRGBArray == null || fRGBArray.length != f3DViewSize.height * f3DViewSize.width)		{			fRGBArray = new int[f3DViewSize.height * f3DViewSize.width];		}				GetView3D().Get3DPixelData(fRGBArray, f3DViewSize.width, f3DViewSize.height);				if (false)		{			Debug.DumpIntRGBArray(fRGBArray, f3DViewSize.width, f3DViewSize.height);		}				fImageSource.SetRGBArrayData(fRGBArray, f3DViewSize.width, f3DViewSize.height);	}		public void UpdateRegionsBtns()	{		RegionsOfInterest regions = GetRegionsOfInterest();		if (regions != null)		{			fButtonPanel.removeAll();			String[] labels = regions.GetRegionsLabels();			for (int i = 0; i < labels.length; i++)			{				if (regions.HasMesh3D(labels[i]))				{					JCheckBox btn = new JCheckBox(labels[i]);					btn.setActionCommand(kRegionCommand + labels[i]);					fButtonPanel.add(btn);					btn.addActionListener(this);										Region3DModel region = regions.GetRegionWithLabel(labels[i]);					boolean checked = IsDisplayingRegion(region);										btn.setSelected(checked);				}			}		}		invalidate();				fButtonPanel.revalidate();	}		protected Dimension GetControlPanelSize(int maxWidth)	{		Dimension result = null;				if (fImageSeriesViewControls != null && fImageSeriesViewControls.isVisible())		{			fImageSeriesViewControls.setMaximumSize(new Dimension(maxWidth, Integer.MAX_VALUE));			result = fImageSeriesViewControls.getPreferredSize();		}				return result;	}		private void Create3DView()	{		if (f3DView == null)		{			if (Debug.fgDebugging)			{				Debug.PrintStackTrace("Displayable " + isDisplayable());			}			Rectangle frame = new Rectangle(f3DViewSize.width, f3DViewSize.height);			f3DView = Engine3D.New3DView(frame);		}		else if (Debug.fgDebugging)		{			NeuroSynchUtil.ErrorMessage("Image3DView.Create3DView(), view already created", NeuroSynchUtil.kNoDlog);		}	}			public void SetData(PatientData data)	{		fData = data;				if (fData != null)		{			fImageViewType.SetSpaceID(fData.GetImageSpacesAccessor().ResolveSingleSpaceID(fImageViewType.GetSingleSpaceID()));						UpdateRegionsBtns();			RegionsOfInterest regions = GetRegionsOfInterest();			if (regions != null)			{				regions.AddListener(this);			}						fFiducialsListener.SetFiducialsAccess(data.GetFiducialSetsAccess(GetSpaceID()));						if (fImageSettingsFactory == null)			{				fImageSettingsFactory = data.GetImageSettingsFactory();			}		}				SetupImageSettingsControls();	}		//	Delay creation of View3D until needed.  For some reason View3D crashes if it's	// created as one of the initial views	private View3D GetView3D()	{		if (f3DView == null)		{			Create3DView();		}				return f3DView;	}		protected Image3DField GetImage3DField()	{		Image3DField result = null;				if (fData != null)		{			result = fData.GetImage3DField(GetSpaceID());		}				return result;	}		private Location3D TranslatePoint(Location3D point)	{		if (fSeriesSize == null)		{			Image3DField series = GetImage3DField(); 						fSeriesSize = new FloatPoint(series.MaxCoord(FloatPoint.X), series.MaxCoord(FloatPoint.Y),						series.MaxCoord(FloatPoint.Z));		}				FloatPoint translatedPt = new FloatPoint(point);		translatedPt.negate();		translatedPt.Add(fSeriesSize);				return translatedPt;	}	/*	public void paintComponent(Graphics g) 	{		Color oldColor = g.getColor();		g.setColor(Color.black);		g.fillRect(0, 0, f3DViewSize.width, f3DViewSize.height);		g.setColor(oldColor);				if (fImage != null)		{			g.drawImage(fImage, 0, 0, this);		}				fZoomListener.Paint(g);    } */			public void DisplayRegion(String whichRegion)	{		RegionsOfInterest regions = GetRegionsOfInterest();		if (regions != null && regions.HasMesh3D(whichRegion))		{			Mesh3D mesh = regions.GetMesh3D(whichRegion);						GetView3D().AddGeometryToView(mesh);			UpdateImageFrom3DView();		}		else if (Debug.fgDebugging)		{			NeuroSynchUtil.ErrorMessage("Image3DView not initialize, DisplayRegion", NeuroSynchUtil.kNoDlog);		}	}		public void HideRegion(String whichRegion)	{		RegionsOfInterest regions = GetRegionsOfInterest();		if (regions != null && regions.HasMesh3D(whichRegion))		{			Mesh3D mesh = regions.GetMesh3D(whichRegion);						GetView3D().RemoveGeometryFromView(mesh);			UpdateImageFrom3DView();		}		else if (Debug.fgDebugging)		{			NeuroSynchUtil.ErrorMessage("Image3DView not initialize, HideRegion", NeuroSynchUtil.kNoDlog);		}		}		protected RegionsOfInterest GetRegionsOfInterest()	{				return (fData != null) ? fData.GetRegionsOfInterest(GetSpaceID()) : null;	}		public void DataModelChanged(DataModel model, DataChangedEvent event)	{		RegionsOfInterest regions = GetRegionsOfInterest();		if (regions == model && event.getSource() != null && event.getSource() instanceof Region3DModel)		{			Region3DModel region = (Region3DModel)event.getSource();						if (IsDisplayingRegion(region))			{					//	this updates the view with the changed geometry				Mesh3D mesh = region.GetMesh3D();				GetView3D().UpdateGeometryInView(mesh);				UpdateImageFrom3DView();						}						UpdateRegionsBtns();		}	}		private void TranslateImageToView(Point pt)	{//		float magnification = fImageViewType.GetMagnification();//		pt.x = Math.round(pt.x * magnification);//		pt.y = Math.round(pt.y * magnification);		fImageAdorner.TranslateImageToView(pt);	}		private void TranslateViewToImage(Point pt)	{		fImageAdorner.TranslateViewToImage(pt);//		float magnification = fImageViewType.GetMagnification();//		pt.x = Math.round(pt.x / magnification);//		pt.y = Math.round(pt.y / magnification);	}	public void dispose()	{		Dispose();	}		public void Dispose()	{		RegionsOfInterest regions = GetRegionsOfInterest();		if (regions != null)		{			regions.RemoveListener(this);		}				if (fFocalPointListener != null && fFocalPoint != null)		{			fFocalPoint.RemoveFocalPointListener(fFocalPointListener);		}				fFocalPointListener = null;		fFocalPoint = null;				View3D qdView = f3DView;		f3DView = null;		if (qdView != null)		{			qdView.Dispose();		}				if (fFiducialsListener != null)		{			fFiducialsListener.Dispose();						fFiducialsListener = null;		}		}		class Image3DViewMouseListener extends MouseAdapter implements MouseMotionListener	{		int x = -1;		int y = -1;				Image3DViewMouseListener()		{				}				public void mouseClicked(MouseEvent e)		{			if (e.isControlDown())			{				GetView3D().Zoom(kZoomIn);							UpdateImageFrom3DView();				}			else if (e.isShiftDown())			{				GetView3D().Zoom(kZoomOut);							UpdateImageFrom3DView();				}		}				public void mouseDragged(MouseEvent e)		{			Point translatedPoint = new Point(e.getPoint());			TranslateViewToImage(translatedPoint);						int deltaX = translatedPoint.x - x;			int deltaY = translatedPoint.y - y;						if (deltaX != 0 || deltaY != 0)			{				GetView3D().Rotate3DView(deltaX, deltaY);				UpdateImageFrom3DView();				}						x = translatedPoint.x;			y = translatedPoint.y;		}				public void mouseMoved(MouseEvent e)		{				}				public void mousePressed(MouseEvent e)		{			Point translatedPoint = new Point(e.getPoint());			TranslateViewToImage(translatedPoint);			x = translatedPoint.x;			y = translatedPoint.y;						GetView3D().SetLowResView(true);		}				public void mouseReleased(MouseEvent e)		{			GetView3D().SetLowResView(false);			UpdateImageFrom3DView();			repaint();		}	}		public void actionPerformed(ActionEvent e)	{		String cmdString = e.getActionCommand();		if (e.getActionCommand().equals(kPointerCommand))		{			AbstractButton button = (AbstractButton)e.getSource();			ShowPointer(button.isSelected());		}				else if (e.getActionCommand().equals(kFiducialsCommand))		{			AbstractButton button = (AbstractButton)e.getSource();			ShowFiducials(button.isSelected());		}				else if (NeuroSynchUtil.SubstringMatches(cmdString, kRegionCommand, 0))		{			String region = cmdString.substring(kRegionCommand.length());			JCheckBox check = (JCheckBox)e.getSource();			if (check.isSelected())			{				DisplayRegion(region);			}			else			{				HideRegion(region);			}		}	}			// NSImageView override	public void ImageAdjustmentsChanged()	{		// do nothing	}			// NSImageView override	public int GetAxis()	{		return OrthoImageSetController.k3D;	}	/*		// NSImageView override	public boolean DisplaysFiducials()	{		return false;	} */	/*		// NSImageView override	public JScrollBar GetScrollbar()	{		return null;	} *//*		// NSImageView override	public void Repaint()	{		repaint();	} */	/*		// NSImageView override	public Location3D GetFloatPoint(Point viewPt)	{		return null;	} */	/*		// NSImageView override	public void AddImageViewListener(NSImageViewListener listener)	{			} */		// NSImageView override/*	public void RemoveImageViewListener(NSImageViewListener listener)	{			} *//*		// NSImageView override	public boolean HandlesClick(java.awt.event.MouseEvent e)	{		return false;	} *//*	public void AddMouseListener(MouseListener mouseListener) {}		public void RemoveMouseListener(MouseListener mouseListener) {} */		// NSImageView override	public Component GetComponent()	{		return this;	}		// NSImageView override	public void SetFocalPoint(FocalPointModel focalPoint)	{		if (fFocalPointListener != null && fFocalPoint != null)		{			fFocalPoint.RemoveFocalPointListener(fFocalPointListener);		}				fFocalPoint = focalPoint;				if (fFocalPointListener != null && fFocalPoint != null)		{			fFocalPoint.AddFocalPointListener(fFocalPointListener);		}	} 		private class Image3DViewZoomListener extends MouseAdapter implements AdjustmentListener, ActionListener, ComponentAdorner	{		private JScrollBar 				fScrollbar;		private final int				kMinValue = 1;		private final int				kMaxValue = 20;		private final int 				kNoZoom = 2;		private final int				kFocusDisplayDelayMilliSec = 2000;		private int						fCurrentValue = kNoZoom;				private long					fFocusDisplayLimit = 0;				private Timer					fTimer;				Image3DViewZoomListener()		{			fScrollbar = new JScrollBar(JScrollBar.VERTICAL);			add(fScrollbar);			fScrollbar.setValues(fCurrentValue, 1, kMinValue, kMaxValue);					fScrollbar.addAdjustmentListener(this); 			fImageView.addMouseListener(this);			fTimer = new Timer(kFocusDisplayDelayMilliSec, this);		}				public void adjustmentValueChanged(AdjustmentEvent e)		{			Adjustable adjustable = e.getAdjustable();						int value = adjustable.getValue();						if (value != fCurrentValue)			{				float zoom = value;							GetView3D().AbsoluteZoom(zoom);							UpdateImageFrom3DView();				fCurrentValue = value;					UpdateTimerDelay();			}		}				private int GetScrollBarWidth()		{	  		int result = 0;						if (fScrollbar != null)			{				Dimension prefSize = fScrollbar.getPreferredSize();				result = prefSize.width;			}						return result;		}				private void AdjustPreferredSize(Dimension preferredSize)		{			int scrollBarWidth = GetScrollBarWidth();			preferredSize.width += scrollBarWidth;		}				private void UpdateTimerDelay()		{			fFocusDisplayLimit = System.currentTimeMillis()  + kFocusDisplayDelayMilliSec;			if (!fTimer.isRunning())			{				fTimer.start();			}		}				private void Layout()		{			Dimension imageViewSize = GetImageViewSize();			int scrollBarWidth = GetScrollBarWidth();			fScrollbar.setLocation(imageViewSize.width, 0);			fScrollbar.setSize(scrollBarWidth, imageViewSize.height);		}				public void mouseClicked(MouseEvent e)		{			if (!e.isControlDown() && !e.isShiftDown())			{				UpdateTimerDelay();				Point translatedPoint = new Point(e.getPoint());				TranslateViewToImage(translatedPoint);								float magnification = fImageViewType.GetMagnification();				Dimension imageViewSize = GetImageViewSize();				final int centerx = imageViewSize.width / 2;				final int centery = imageViewSize.height / 2;								translatedPoint.x = centerx - (int)((centerx - translatedPoint.x) / magnification);				translatedPoint.y = centerx - (int)((centery - translatedPoint.y) / magnification);								GetView3D().SetZoomFocus(translatedPoint);						UpdateImageFrom3DView();				}		}				public void Paint(Graphics g, AdornedComponent c)		{			if (System.currentTimeMillis() < fFocusDisplayLimit || fScrollbar.getValueIsAdjusting())			{				Dimension imageViewSize = GetImageViewSize();				final int kLineLength = 30;				final int centerx = imageViewSize.width / 2;				final int centery = imageViewSize.height / 2;								Color oldColor = g.getColor();				g.setColor(Color.white);				g.drawLine(centerx - kLineLength / 2, centery -1, centerx + kLineLength / 2, centery - 1);				g.drawLine(centerx -1, centery - kLineLength / 2, centerx - 1, centery + kLineLength / 2 );				g.drawLine(centerx - kLineLength / 2, centery  + 1, centerx + kLineLength / 2, centery + 1);				g.drawLine(centerx + 1, centery - kLineLength / 2, centerx + 1, centery + kLineLength / 2 );				g.setColor(Color.red);				g.drawLine(centerx - kLineLength / 2, centery, centerx + kLineLength / 2, centery);				g.drawLine(centerx, centery - kLineLength / 2, centerx, centery + kLineLength / 2);				g.setPaintMode();				g.setColor(oldColor);			}		}				public void actionPerformed(ActionEvent e)		{			if (fFocusDisplayLimit < System.currentTimeMillis())			{				fTimer.stop();				repaint();			}		}		}		private class Image3DViewFiducialsListener implements DataModelListener	{		FiducialSetsAccess		fFiducialsAccess;						private Image3DViewFiducialsListener()		{				}				public void DataModelChanged(DataModel model, DataChangedEvent event)		{			Update3DView();				}				private void SetFiducialsAccess(FiducialSetsAccess fiducials)		{			if (fFiducialsAccess != null)			{					fFiducialsAccess.GetDataModel().RemoveListener(this);			}						fFiducialsAccess = fiducials;						if (fFiducialsAccess != null)			{					fFiducialsAccess.GetDataModel().AddListener(this);			}			//			Update3DView();					}				private void Dispose()		{			if (fFiducialsAccess != null)			{					fFiducialsAccess.GetDataModel().RemoveListener(this);			}						fFiducialsAccess = null;		}				private void Update3DView()		{			Location3D[]  locations = null;			String[] labels = null;			if (fFiducialsAccess != null)			{				FiducialPoint[] points = fFiducialsAccess.GetFiducials();								if (points.length > 0)				{					locations = new Location3D[points.length];					labels = new String[points.length];										for (int i = 0; i < points.length; i++)					{						locations[i] = points[i].GetLocation();						locations[i] = TranslatePoint(locations[i]);												labels[i] = points[i].GetName();					}				}			}						GetView3D().SetFiducials(locations, labels);			UpdateImageFrom3DView();		}	}					// this class is a duplicate of ImageSeriesViewImageTypeListener/*	private class Image3DViewImageTypeListener implements ImageViewTypeListener	{		Image3DViewImageTypeListener()		{				}				public void propertyChange(PropertyChangeEvent evt)		{			if (evt.getPropertyName().equals(ImageViewType.kSpaceChanged))			{				ImageViewTypeChanged();			}			BroadcastChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());		}			} */						//		private class Image3DViewFocalPointListener implements FocalPointListener	{		private Image3DViewFocalPointListener()		{				}				public void DisplayTrackerOutput(DeviceOutput output, TransformerAccess transformer)		{			if (fDisplayPointer)			{				Object realPoint = output.GetDataOfType(DeviceOutput.POINT_COORDINATE);				Object rotation = output.GetDataOfType(DeviceOutput.ROTATION_MATRIX);				if (transformer.CanTransform(output.GetSpaceID(), GetSpaceID()) && rotation != null)				{					FloatPoint virtualPoint = new FloatPoint((FloatPoint)realPoint);					transformer.TransformPoint(virtualPoint, output.GetSpaceID(), GetSpaceID());						ThreeDVector pointerDirection = new ThreeDVector(GetPointerLength(), 0, 0);					TrackerSettingsAccess trackerSettings = output.GetTrackerSettings();											if (trackerSettings.IsUsingTrackerOffset())					{						CalculatedOffset offsetCalculations = trackerSettings.GetTrackerCalculatedOffset();												Location3D offset = offsetCalculations.GetOffset();												if (offset != null && !offset.equals(FloatPoint.kZero))						{							pointerDirection.Set(offset);														pointerDirection.scale(GetPointerLength() / pointerDirection.length());						}					}						DisplayPointer(transformer, (FloatPoint)virtualPoint, (Matrix3)rotation, output.GetSpaceID(), pointerDirection);				}			}		}				public void FocalPointChanged(Location3D focalPoint)		{			DisplayPoint(focalPoint);		}	}} 