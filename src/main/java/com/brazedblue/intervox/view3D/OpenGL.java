package com.brazedblue.intervox.view3D;import java.awt.Rectangle;import java.awt.Color;import java.awt.Point;import java.io.*;import com.brazedblue.intervox.geometry.FloatPoint;import com.brazedblue.intervox.geometry.Matrix4;import com.brazedblue.intervox.geometry.Location3D;import com.brazedblue.intervox.util.NeuroSynchUtil;import com.brazedblue.intervox.util.Debug;class OpenGL extends Engine3D {	        private static OpenGL 	fgStaticMe = null;	private boolean		fTexFontInitialized = false;	private boolean		fInitialized = false;		NativeError 		fErrorRecord = new NativeError();	private OpenGLJNI 	fJNICalls;		private static boolean fgDebugAllocation = Debug.fgDebugging && false;	static private final String kTexFontFile = "data/default.txf";		OpenGL() 	{            fJNICalls = new OpenGLJNI(); 	}                private void LoadLibrary()        {            fJNICalls.LoadLibrary();		//	fJNICalls.pGLUTInit(fErrorRecord.GetErrStrings());			ErrorMessage();            fJNICalls.pSetDebugging(Debug.fgDebugging);                      fInitialized = true;       }		static OpenGL GetStaticMe()	{		if (fgStaticMe == null)		{                    fgStaticMe = new OpenGL();                    fgStaticMe.LoadLibrary();		}				return fgStaticMe;	}			private void ErrorMessage()	{		fErrorRecord.DisplayIfError();	}	protected long Create3DView(Rectangle frame) 	{		long result = 0;				if (fInitialized)		{ 			result = fJNICalls.pCreateGLContext(NeuroSynchUtil.RectangleToInts(frame), fErrorRecord.GetErrStrings());			ErrorMessage();						if (fgDebugAllocation)			{				NeuroSynchUtil.ErrorMessage("Opengl context created: " + result, NeuroSynchUtil.kNoDlog);								}		}				return result;	}		protected void Dispose3DView(long qdView) 	{		if (qdView != 0)		{				if (fInitialized)			{				fJNICalls.pDisposeGLContext(qdView, fErrorRecord.GetErrStrings());				ErrorMessage();				if (fgDebugAllocation)				{					Debug.PrintStackTrace("Opengl context disposed: " + qdView);										}			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in Quicktime3D.DisposeQDGeometry", NeuroSynchUtil.kShowDlog);			}		}	    /**     * fill int array with render image     * @param      qdView        id of 3d context.     * @param      pixArray 	 array for image in rgba format      * @param      width 		 image width      * @param      height 		 image height     *                                  */	protected void Get3DPixelData(long qdView, int[] pixArray, int width, int height)	{		if (fInitialized)		{			if (Debug.fgDebugging && false)			{				Debug.PrintStackTrace("qdView " + qdView + ", width " + width + ", height " + height									  + ", pixArray " + pixArray);			}			fJNICalls.pGetGLPixelData(qdView, pixArray, width, height, fErrorRecord.GetErrStrings());			if (Debug.fgDebugging && false)			{				Debug.PrintTime("GetPixeData returned");			}			ErrorMessage();		}	}	   /**     * zoom the context view     * @param      zoom      default * (.9 pow (zoom - 2) )      * @param      glContext 		 the context      *                                  */	protected void AbsoluteZoomContext(float zoom, long glContext)	{		if (glContext != 0)		{			if (fInitialized)			{				fJNICalls.pAbsoluteZoomContext(zoom, glContext, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.AbsoluteZoomContext", NeuroSynchUtil.kShowDlog);			}		}   /**     * set zoom focus     * @param      focus      		point to zoom to     * @param      glContext 		the context      *                                  */	protected void SetZoomFocus(Point focus, long glContext)	{		if (glContext != 0)		{			if (fInitialized)			{				fJNICalls.pSetZoomFocus(focus.x, focus.y, glContext, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.SetZoomFocus", NeuroSynchUtil.kShowDlog);			}			}		    /**     * Creates a 3D mesh from slices data     * @param      width         slice image width.     * @param      height 		 slice image height      * @param      slices 		 byte values with bit set for each of 7 regions     * @param      value 		 bit of this region	 * @param	   geomID		 geometry identifier     * @return 	   int generated by native code     *                                  */	protected long CreateGeometryFromRegion(int width, int height, byte[][] slices, int value, long geomID, int resolution) 	{			long result = 0;		if (fInitialized)		{			result = fJNICalls.pCreateGeometryFromRegion(width, height, slices, value, geomID, resolution, fErrorRecord.GetErrStrings()); 			ErrorMessage();						if (fgDebugAllocation)			{				NeuroSynchUtil.ErrorMessage("Opengl mesh created: " + result, NeuroSynchUtil.kNoDlog);								}		}				return result;	}     /**     * GetResolution of created mesh     * @param      mesh 		 other mesh     * @return 	   int 	resolution     *                                  */       protected int GetGeometryResolution(long meshID)        {            int result = 0;            if (fInitialized)            {                    result = fJNICalls.pGetGeometryResolution(meshID,  fErrorRecord.GetErrStrings());                     ErrorMessage();            }                        return result;        }		/**     * create a mesh which shares the geometrical structure     * @param      mesh 		 other mesh    * @param	   geomID		 geometry identifier     * @return 	   int generated by native code     *                                  */	 	protected long CreateGeometryFromVersion(long mesh, long geomID)	{		long result = 0;		if (fInitialized)		{			result = fJNICalls.pCreateGeometryFromVersion(mesh,  geomID, fErrorRecord.GetErrStrings()); 			ErrorMessage();						if (fgDebugAllocation)			{				NeuroSynchUtil.ErrorMessage("Opengl mesh created: " + result, NeuroSynchUtil.kNoDlog);								}		}				return result;	}	/**     * display the fiducials     * @param      show  		display fiducials     * @param      qdView 		the view      *                                  */	protected void SetShowsFiducials(boolean show, long qdView)	{		if (qdView != 0)		{			if (fInitialized)			{			/*  using				try				{					InitializeTexFont();				}				catch (IOException e)				{					// do nothing				} */								fJNICalls.pSetShowsFiducials(show, qdView, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.pSetFiducials", NeuroSynchUtil.kShowDlog);			}	}	protected void SetRotationMatrix(Matrix4 rotation, long glContext) 	{		if (glContext != 0)		{			if (fInitialized)			{				fJNICalls.pSetRotation(glContext, rotation.GetColumnMajorArray(), fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.SetRotationMatrix", NeuroSynchUtil.kShowDlog);			}		}	protected void AddGeometryToView(long glMesh, long glContext) 	{		if (glContext != 0 && glMesh != 0)		{			if (fInitialized)			{				fJNICalls.pAddGeometryToView(glMesh, glContext, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.AddGeometryToView", NeuroSynchUtil.kShowDlog);			}		}	protected void ShutDown3D() {	if (fInitialized)	{		fJNICalls.pDebugCheckDeallocation(fErrorRecord.GetErrStrings());		ErrorMessage();			} 	}	// do nothing	protected void Dispose3DGeometry(long glMesh) 	{		if (glMesh != 0)		{			if (fInitialized)			{				fJNICalls.pDispose3DGeometry(glMesh, fErrorRecord.GetErrStrings());				ErrorMessage();				if (fgDebugAllocation)				{					NeuroSynchUtil.ErrorMessage("Opengl mesh disposed: " + glMesh, NeuroSynchUtil.kNoDlog);										}			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.Dispose3DGeometry", NeuroSynchUtil.kShowDlog);			}				}		protected void SetGeometryColor(Color color, long glMesh)	{		if (glMesh != 0)		{			if (fInitialized)			{				float red = (float)color.getRed() / 255f;				float green = (float)color.getGreen() / 255f;				float blue = (float)color.getBlue() / 255f;					fJNICalls.pSetGeometryColor( glMesh, red, green, blue, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.SetGeometryColor", NeuroSynchUtil.kShowDlog);			}		}	    /**     * zoom the context view     * @param      howMuch       factor (i.e. .5 = zoom in 50 %)     * @param      qdView 		 the view      *                                  */	protected void ZoomContext(float howMuch, long glContext)	{		if (glContext != 0)		{			if (fInitialized)			{				fJNICalls.pZoomContext(howMuch, glContext, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.ZoomContext", NeuroSynchUtil.kShowDlog);			}		}		protected void SetGeometryTransparency(float transparency, long glMesh)	{		if (glMesh != 0)		{			if (fInitialized)			{				fJNICalls.pSetGeometryTransparency(glMesh, transparency, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.SetGeometryTransparency", NeuroSynchUtil.kShowDlog);			}		}              protected void DebugSetOpenGLLighting(long qdView, float[][] values)        { 		if (qdView != 0)		{			if (fInitialized)			{								fJNICalls.pDebugSetOpenGLLighting(qdView, values, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.SetPointerLocation", NeuroSynchUtil.kShowDlog);			}	        }        protected void DebugGetOpenGLLighting(long qdView, float[][] values)        { 		if (qdView != 0)		{			if (fInitialized)			{								fJNICalls.pDebugGetOpenGLLighting(qdView, values, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.SetPointerLocation", NeuroSynchUtil.kShowDlog);			}	        }		protected void SetPointerLocation(long qdView, Location3D start, Location3D end) 	{		if (qdView != 0)		{			if (fInitialized) 			{				float[] startPts = FloatPoint.GetFloatArray(start);				float[] endPts = FloatPoint.GetFloatArray(end);								fJNICalls.pSetPointerLocation(qdView, startPts, endPts, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.SetPointerLocation", NeuroSynchUtil.kShowDlog);			}		}	protected void RemoveAllGeometriesFromView(long qdView) 	{		if (qdView != 0)		{			if (fInitialized)			{				fJNICalls.pRemoveAllGeometriesFromView(qdView, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.SetGeometryTransparency", NeuroSynchUtil.kShowDlog);			}		}		protected boolean ViewHasGeometry(long glMesh, long qdView) 	{ 		boolean result = false;		if (qdView != 0 && glMesh != 0)		{			if (fInitialized)			{				result = fJNICalls.pViewHasGeometry(glMesh, qdView, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.ViewHasGeometry", NeuroSynchUtil.kShowDlog);			}				return result;		}		protected void ShowPointer(long glContext, boolean show) 	{		if (glContext != 0)		{			if (fInitialized)			{				fJNICalls.pShowPointer(glContext, show, fErrorRecord.GetErrStrings());				ErrorMessage();					}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in Quicktime3D.ShowPointer", NeuroSynchUtil.kShowDlog);			}		}	protected void RemoveGeometryFromView(long glMesh, long qdView) 	{		if (qdView != 0 && glMesh != 0)		{			if (fInitialized)			{				fJNICalls.pRemoveGeometryFromView(glMesh, qdView, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.RemoveGeometryFromView", NeuroSynchUtil.kShowDlog);			}	}		/**     * set(update) fiducial point locations     * @param      locations  	array of "Location3D"     * @param      labels  		array of "String"     * @param      qdView 		the view      *                                  */	protected void SetFiducials(Location3D[] locations, String[] labels, long qdView)	{		if (qdView != 0)		{			if (fInitialized)			{				try 				{                                        float floatLocations[][] = new float[locations.length][];                                        for (int i = 0; i < locations.length; i++)                                        {                                            floatLocations[i] = FloatPoint.GetFloatArray(locations[i]);                                        }                                        					fJNICalls.pSetFiducials(floatLocations, labels, qdView, fErrorRecord.GetErrStrings());					ErrorMessage();				}				catch (Exception e)				{				}			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.pSetFiducials", NeuroSynchUtil.kShowDlog);			}	}		protected void UpdateGeometryInView(long qdGeometry, long qdView) {	/* do nothing for opengl */}		protected void SetLowResView(boolean lowRes, long qdView)	{		if (qdView != 0)		{			if (fInitialized)			{				fJNICalls.pSetLowResView(qdView, lowRes, fErrorRecord.GetErrStrings());				ErrorMessage();			}		}		else		{			NeuroSynchUtil.ErrorMessage("Invalid operands in OpenGL.SetLowResView", NeuroSynchUtil.kShowDlog);			}	}}