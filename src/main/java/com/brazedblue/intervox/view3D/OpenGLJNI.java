package com.brazedblue.intervox.view3D;class OpenGLJNI {  private boolean fLibraryLoaded = false;  OpenGLJNI() {}  void LoadLibrary() {    if (!fLibraryLoaded) {      System.out.println(System.getProperty("sun.arch.data.model"));      String javaLibPath = System.getProperty("java.library.path");      System.out.println(javaLibPath);      System.loadLibrary("gmp");      System.loadLibrary("Intervox");      fLibraryLoaded = true;    }  }  native void pRemoveAllGeometriesFromView(long qdView, String[] errRecord);  native void pRemoveGeometryFromView(long qdGeometry, long qdView, String[] errRecord);  native boolean pViewHasGeometry(long qdGeometry, long qdView, String[] errRecord);  native void pAddGeometryToView(long qdGeometry, long qdView, String[] errRecord);  native void pDebugSetOpenGLLighting(long qdView, float[][] values, String[] errRecord);  native void pDebugGetOpenGLLighting(long qdView, float[][] values, String[] errRecord);  /**   * set zoom focus   *   * @param x x to zoom to   * @param y y to zoom to   * @param glContext the context   * @param errRecord record for error info   */  native void pSetZoomFocus(int x, int y, long glContext, String[] fErrorRecord);  /**   * fill int array with render image   *   * @param qdView id of 3d context.   * @param pixArray array for image in rgba format   * @param width image width   * @param height image height   * @param errRecord record for error info   */  native void pGetGLPixelData(      long qdView, int[] rgbArrary, int width, int height, String[] errRecord);  native void pDispose3DGeometry(long qdGeometry, String[] errRecord);  native int pGetGeometryResolution(long geometry, String[] errRecord);  native long pCreateGLContext(int[] frameRect, String[] errRecord);  native void pDisposeGLContext(long object, String[] errRecord);  native void pSetRotation(long qdView, float xRot, float yRot, String[] errRecord);  native void pDebugCheckDeallocation(String[] errRecord);  /**   * Creates a 3D mesh from slices data   *   * @param width slice image width.   * @param height slice image height   * @param slices byte values with bit set for each of 7 regions   * @param value bit of this region   * @param geomID geometry identifier   * @param errRecord record for error info   * @return int generated by native code   */  native long pCreateGeometryFromRegion(      int width,      int height,      byte[][] slices,      int value,      long geomID,      int resolution,      String[] errRecord);  /**   * create a mesh which shares the geometrical structure   *   * @param mesh other mesh   * @param geomID geometry identifier   * @param errRecord record for error info   * @return int generated by native code   */  native long pCreateGeometryFromVersion(long mesh, long geomID, String[] errRecord);  /**   * zoom the context view   *   * @param howMuch factor (i.e. .5 = zoom in 50 %)   * @param qdView the view   * @param errRecord record for error info   */  native void pZoomContext(float howMuch, long glContext, String[] errRecord);  /**   * zoom the context view   *   * @param zoom default * (.9 pow (zoom - 2) )   * @param qdView the view   * @param errRecord record for error info   */  native void pAbsoluteZoomContext(float howMuch, long glContext, String[] errRecord);  /**   * set(update) fiducial point locations   *   * @param locations array of "Location3D"   * @param labels array of "String"   * @param qdView the view   * @param errRecord record for error info   */  native void pSetFiducials(float[][] locations, String[] labels, long qdView, String[] errRecord);  /**   * display the fiducials   *   * @param show display fiducials   * @param qdView the view   * @param errRecord record for error info   */  native void pSetShowsFiducials(boolean show, long qdView, String[] errRecord);  native void pSetGeometryColor(      long qdGeometry, float red, float green, float blue, String[] errRecord);  native void pSetGeometryTransparency(long qdGeometry, float transparency, String[] errRecord);  native void pSetLowResView(long qdView, boolean lowRes, String[] errRecord);  native void pSetPointerLocation(long qdView, float[] start, float[] end, String[] errRecord);  native void pShowPointer(long qdView, boolean show, String[] errRecord);  /** initialize glut library */  native void pGLUTInit(String[] errRecord);  /**   * enable/disable debugging code   *   * @param debugging   */  native void pSetDebugging(boolean debugging);}