package com.brazedblue.intervox.view3D;import java.awt.Rectangle;import java.awt.Color;import java.awt.Point;import com.brazedblue.intervox.geometry.Matrix4;import com.brazedblue.intervox.geometry.Location3D;import com.brazedblue.intervox.util.Debug;import com.brazedblue.intervox.util.NeuroSynchUtil;class View3D { 	long 		fQDViewRef = 0;	Engine3D	fEngine3D;//	Matrix4		fRotation = new Matrix4();//	Matrix4		fRotater = new Matrix4();   // set to rotation then multiply		Rectangle 	fFrame;	        View3D(Engine3D engine3D, Rectangle frame, long qdRef) 	{		fEngine3D = engine3D;		fFrame = frame; //		fRotation.SetIdentity();		fQDViewRef = qdRef;   }		public void SetFiducials(Location3D[] locations, String[] labels)	{		fEngine3D.SetFiducials(locations, labels, fQDViewRef);	}		public void SetShowsFiducials(boolean show)	{		fEngine3D.SetShowsFiducials(show, fQDViewRef);	}		public void SetPointerLocation(Location3D start, Location3D end)	{		fEngine3D.SetPointerLocation(fQDViewRef, start, end);	}		public void RemoveAllGeometriesFromView()	{		fEngine3D.RemoveAllGeometriesFromView(fQDViewRef);	}		public boolean ViewHasGeometry(Mesh3D mesh)	{		return fEngine3D.ViewHasGeometry(mesh.GetRef(), fQDViewRef);	}                void DebugSetOpenGLLighting(float[][] values)        {            fEngine3D.DebugSetOpenGLLighting(fQDViewRef, values);        }        void DebugGetOpenGLLighting(float[][] values)        {            fEngine3D.DebugGetOpenGLLighting(fQDViewRef, values);        }		public void Zoom(float howMuch)	{		fEngine3D.ZoomContext(howMuch, fQDViewRef);	}		public void AbsoluteZoom(float zoom)	{		fEngine3D.AbsoluteZoomContext(zoom, fQDViewRef);	}		public void SetZoomFocus(Point focus)	{		Point adjustedFocus = new Point(focus.x -= fFrame.width / 2, focus.y -= fFrame.height / 2);				fEngine3D.SetZoomFocus(focus, fQDViewRef);		}		public void ShowPointer(boolean show)	{		fEngine3D.ShowPointer(fQDViewRef, show);	}		public void Get3DPixelData(int[] pixArray, int width, int height)	{		fEngine3D.Get3DPixelData(fQDViewRef, pixArray, width, height);	}		public void AddGeometryToView(Mesh3D mesh)	{		fEngine3D.AddGeometryToView(mesh.GetRef(), fQDViewRef);	}		public void RemoveGeometryFromView(Mesh3D mesh)	{		fEngine3D.RemoveGeometryFromView(mesh.GetRef(), fQDViewRef);	}		public void UpdateGeometryInView(Mesh3D mesh)	{		fEngine3D.UpdateGeometryInView(mesh.GetRef(), fQDViewRef);	}		public void Dispose()	{		if (fQDViewRef != 0)		{			long ref = fQDViewRef;			fQDViewRef = 0;			fEngine3D.Dispose3DView(ref);		}	}	protected void finalize()	{		Dispose();	}		public void Rotate3DView(int deltaX, int deltaY)	{		float yRot = (float) (deltaX * 180.0f) / fFrame.width;		float xRot = -(float) (deltaY * 180.0f) / fFrame.height;//		RotateMatrix(deltaX, deltaY);				fEngine3D.SetRotation(xRot, yRot, fQDViewRef);		//		fEngine3D.SetRotationMatrix(fRotation, fQDViewRef);	}	//	protected void RotateMatrix(int deltaX, int deltaY)//	{//		if (!fFrame.isEmpty())//		{//			//			if (Debug.fgDebugging && false)//			{//				NeuroSynchUtil.ErrorMessage("TO ROTATE   deltaX " + deltaX + "\rdeltaY " + deltaY + "\r" + fRotation.toString() , NeuroSynchUtil.kNoDlog);//			}////			float yRot = -(float) (deltaX * Math.PI) / fFrame.width;//			float xRot = (float) (deltaY * Math.PI) / fFrame.height;//			//			if (yRot != 0)//			{//				fRotater.SetRotY(yRot);//				fRotation.Multiply(fRotater, fRotation);//			}////			if (xRot != 0)//			{//				fRotater.SetRotX(xRot);//				fRotation.Multiply(fRotater, fRotation);//			}////			if (Debug.fgDebugging && false)//			{//				NeuroSynchUtil.ErrorMessage("Rotated   xRot " + xRot + "\ryRot " + yRot + "\r" + fRotation.toString() + "\r\r", NeuroSynchUtil.kNoDlog);//			}//		}//		//	}		public void SetLowResView(boolean lowRes)	{		fEngine3D.SetLowResView(lowRes, fQDViewRef);	} }