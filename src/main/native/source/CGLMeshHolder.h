// CGLMeshHolder.h// Created by Steve on Fri, Jun 30, 2000 @ 10:42 AM.#ifndef __CGLMeshHolder__#define __CGLMeshHolder__#ifndef __CGLRenderable__#include "CGLRenderable.h"#endif#ifndef _STDDEF_H#include <stddef.h>#endif#include <JavaVM/jni.h>#include <OpenGL/gl.h>#ifndef __C3DPoint__#include "utility/C3DPoint.h"#endif#define kUseMeshRenderer 1class CGLMesh;class CSlicesSet;class CGLMeshRenderer;class CGLMeshHolder : public CGLRenderable{	long			fGeomID;	GLenum 			fMaterialFace;	#if kUseMeshRenderer		bool			fOwnsMeshRenderer;	CGLMeshRenderer		*fMeshRenderer;#else	CGLMesh		*fLowResMesh;	CGLMesh		*fHighResMesh;		GLuint		fHighResListID;	GLuint		fLowResListID;		C3DPoint	fCenter;	long		fWeight; #endif	float		fColor[4];	float		fSpecularity;	float		fAmbience;	float		fDiffuseness;	float		fShininess;        	public:	        static const GLenum kDefaultGLFace;		CGLMeshHolder();		virtual ~CGLMeshHolder();		void Render(bool lowRes);                jint GetResolution();	#ifndef kNOJNI	void CreateGeometries(JNIEnv *env, jint width, jint height, jobjectArray objArrays,                         jint regionValue, jint geomID, int resolution);#endif		long GetGeomID()  { return fGeomID; }	static void DebugTestDraw();		void SetGeometryColor(float red, float green, float blue);		void SetTransparency(float transparency) { fColor[3] = transparency; }		bool IsOpaque() { return fColor[3] == 1.0f; }	virtual void DebugDraw(bool lowRes); //Override	void SetGeomID(long id) { fGeomID = id; }		bool GetCenter(C3DPoint &center, long &weight);	        void SetMaterialProperties(float specularity, float ambience, float diffuseness, float shininess);        void GetMaterialProperties(float& specularity, float& ambience, float& diffuseness, float& shininess);		void GrabGeometries(CGLMeshHolder *other, jint geomID);#if !kUseMeshRenderer		void SetLowResMesh(CGLMesh *mesh) { fLowResMesh = mesh; }		void SetHighResMesh(CGLMesh *mesh) { fHighResMesh = mesh; }		void SetMaterialFace(GLenum face) { fMaterialFace = face; } 	void DebugShowNormals(bool lowRes);	private :		void ComputeWeightedCenter(CSlicesSet &slicesSet, short region);	#endif	private:	void Deallocate();};#endif