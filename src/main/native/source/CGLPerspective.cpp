// CGLPerspective.cp// Created by Steve on Mon, Aug 7, 2000 @ 11:29 AM.#include "NativeOpenGL.h"#ifndef __CGLPerspective__#include "CGLPerspective.h"#endif#include "OpenGL/glu.h"#include <math.h>CGLPerspective::CGLPerspective() : fOrthogonal(true), fRotate(false), fViewBox(-1, 1, -1, 1), fNear(-1), fFar(1), fFocus(0, 0), 		fZoom(1.0) {}CGLPerspective::~CGLPerspective(){}#pragma segment Mainvoid CGLPerspective::Update(){	fRotate = false;  	::glMatrixMode(GL_PROJECTION);  	::glLoadIdentity();		DblRect viewBox;	GetViewBox(viewBox);	if (fOrthogonal)	{  		::glOrtho(viewBox.left, viewBox.right, viewBox.bottom, viewBox.top, fNear, fFar);			}	else	{		double depth = (fFar - fNear);    				double near = viewBox.bottom - viewBox.top;		if (near < 0)		{			near = -near;		}           						if (depth > 0)		{			double far = near + depth;						::glFrustum(viewBox.left, viewBox.right, viewBox.bottom, viewBox.top, near, far);							double transZ = near - fNear;			::glTranslated(0, 0, -transZ);		}		else		{			double far = near - depth;						::glFrustum(-viewBox.left, -viewBox.right, viewBox.bottom, viewBox.top, near, far);							double transZ = near + fNear;			::glTranslated(0, 0, -transZ);			::glRotated(180, 0, 1, 0);		}	} 		::glMatrixMode(GL_MODELVIEW);}#pragma segment Mainvoid CGLPerspective::SetValues(double left, double right, double bottom, double top, double near, double far){	fViewBox.left = left;	fViewBox.right = right;	fViewBox.bottom = bottom;	fViewBox.top = top;		fFocus.h = (left + right) / 2;	fFocus.v = (bottom + top) / 2;		fNear = near;	fFar = far;}#pragma segment Mainvoid CGLPerspective::Zoom(float factor){	fZoom *= factor;		}#pragma segment Mainvoid CGLPerspective::GetViewBox(DblRect &box){	double halfWidth = (fViewBox.right - fViewBox.left) * fZoom / 2;	double halfHeight = (fViewBox.bottom - fViewBox.top) * fZoom / 2;	box.left = fFocus.h - halfWidth;	box.right = fFocus.h + halfWidth;	box.top = fFocus.v - halfHeight;	box.bottom =  fFocus.v + halfHeight;}#pragma segment Mainvoid CGLPerspective::SetZoomFocus(double h, double v){	fFocus.h += h * fZoom;	fFocus.v += v * fZoom;}#pragma segment void CGLPerspective::AbsoluteZoom(float zoom){	fZoom = ::pow(0.9, zoom - 2);}