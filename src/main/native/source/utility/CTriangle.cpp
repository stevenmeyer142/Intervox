// CTriangle.cp// Created by Steve on Tue, Dec 22, 1998 @ 1:40 PM.#include "NativeOpenGL.h"#ifndef __CTriangle__#include "CTriangle.h"#endif#include "CVertex.h"#include "CTempMemPointer.h"#if !kOpenGL#include "QD3DMath.h"#include "QD3DGeometry.h"#endif#include "CMyError.h"const long 	kTriangleArraySize = 10000;#if KPtrStaticListCMySortedList*  	CTriangle::gOldArrays = NULL;#elseCMySortedList  	CTriangle::gOldArrays;#endifCTriangle*		CTriangle::gCurrentArray = NULL;long			CTriangle::gCurrentArrayIndex = kTriangleArraySize;long gTrianglesInitialized = 0;long gTrianglesDeleted = 0;CTriangle::CTriangle() : fCode(kTriangleCode), fPoint1(NULL), fPoint2(NULL), fPoint3(NULL){}CTriangle::~CTriangle(){	}#pragma segment Mainvoid CTriangle::AddVertex(float x, float y, float z /*, short scalableCoord */){	if (!fPoint1)	{		fPoint1 = new CVertex(x, y, z /*, scalableCoord */);	}	else if (!fPoint2)	{		fPoint2 = new CVertex(x, y, z /*, scalableCoord */);	}	else if (!fPoint3)	{		fPoint3 = new CVertex(x, y, z /*, scalableCoord */);				ComputeNormal();	}	else	{//		ProgramBreak_AC("To many vertices.");	}}#pragma segment MainCTriangle* CTriangle::GetNewInstance(){	if (gCurrentArrayIndex >= kTriangleArraySize)	{		CTempMemPointer* tempMemPtr = new CTempMemPointer();		tempMemPtr->Allocate (sizeof(CTriangle) * kTriangleArraySize);		gCurrentArray = (CTriangle*)tempMemPtr->GetPointer ();		gCurrentArrayIndex = 0;#if KPtrStaticList		if (gOldArrays == NULL)		{			gOldArrays = new CMySortedList();		}				gOldArrays->Push(tempMemPtr);#else		gOldArrays.Push(tempMemPtr);#endif	}		return gCurrentArray + gCurrentArrayIndex++;}#pragma segment Mainvoid CTriangle::operator delete(void*  ){	gTrianglesDeleted++;}#pragma segment Main#pragma segment Mainvoid* CTriangle::operator new(size_t ){	gTrianglesInitialized++;	return GetNewInstance();}#pragma segment Mainvoid CTriangle::Cleanup(){	gCurrentArray = NULL;	gCurrentArrayIndex = kTriangleArraySize;		gTrianglesDeleted = 0;	gTrianglesInitialized = 0;#if KPtrStaticList	if (gOldArrays != NULL)	{		long size = gOldArrays->GetSize();		for (long i = 1; i <= size; i++)		{			CTempMemPointer* tempMemPtr = (CTempMemPointer*)gOldArrays->At(i);			delete tempMemPtr;		}				gOldArrays->RemoveAllItems();	}#else	long size = gOldArrays.GetSize();	if (size > 0)	{		for (long i = 1; i <= size; i++)		{			CTempMemPointer* tempMemPtr = (CTempMemPointer*)gOldArrays.At(i);			delete tempMemPtr;		}				gOldArrays.RemoveAllItems();	}#endif}#pragma segment Mainvoid CTriangle::CheckSanity(CTriangle *triangle){	if (triangle->fCode != kTriangleCode)	{		CMyError::DebugMessage ("Vertex buggy");	}}#pragma segment Mainvoid CTriangle::ComputeNormal(){#if 0	if (fPoint1  && fPoint2 && fPoint3)	{		TQ3Point3D	point1, point2, point3;		fPoint1->GetQDPoint (point1);		fPoint2->GetQDPoint (point2);		fPoint3->GetQDPoint (point3);					Q3Point3D_CrossProductTri (&point1, &point2, &point3, &fNormal);				Q3Vector3D_Normalize(&fNormal, &fNormal);			}#endif	if (fPoint1  && fPoint2 && fPoint3)	{		C3DFloatPoint pt1, pt2, pt3; 		fPoint1->GetPoint(pt1);		fPoint2->GetPoint(pt2);		fPoint3->GetPoint(pt3);		pt2 -= pt1;		pt3 -= pt1;		fNormal = pt2.CrossProduct (pt3);				fNormal.Normalize();			}}#pragma segment Main#if !kOpenGLTQ3GeometryObject CTriangle::DebugGetNormalLine(short length){	TQ3LineData lineData;	lineData.lineAttributeSet = NULL;	lineData.vertices[0].attributeSet = NULL;	lineData.vertices[1].attributeSet = NULL;		DebugGetCenterPoint(lineData.vertices[0].point);	TQ3Vector3D vector3D;	GetNormal (vector3D);	Q3Vector3D_Scale (&vector3D, length, &vector3D);	Q3Point3D_Vector3D_Add (&lineData.vertices[0].point, &vector3D, &lineData.vertices[1].point);	return Q3Line_New (&lineData);	}#endif#pragma segment Main#if !kOpenGLvoid CTriangle::DebugGetCenterPoint(TQ3Point3D &point){	fPoint1->GetQDPoint (point);}#endif#pragma segment Mainvoid CTriangle::GetIndices(CGLMIndex *indicesPtr){	indicesPtr[0] = fPoint1->GetIndex();	indicesPtr[1] = fPoint2->GetIndex();	indicesPtr[2] = fPoint3->GetIndex();}void CTriangle::Scale(float factor){	if (fPoint1)	{		fPoint1->Scale(factor);	}	if (fPoint2)	{		fPoint2->Scale(factor);	}	if (fPoint3)	{		fPoint3->Scale(factor);	}}