// CTriangleList.cp// Created by Steve on Thu, Dec 3, 1998 @ 1:03 PM.#include "NativeOpenGL.h"#ifndef __CTriangleList__#include "CTriangleList.h"#endif#include "CTriangle.h"#include "CVertex.h"// #include "CQ3PolyhedronData.h"// #include "QD3DGroup.h"CTriangleList::CTriangleList(ListIndex initialSize)  :CMySortedList(initialSize){}CTriangleList::~CTriangleList(){	}#pragma segment Main#if !kOpenGLTQ3PolyhedronTriangleData* CTriangleList::GetPolyhedronTriangleArray(CQ3PolyhedronData &polyData){	long count = GetCount();	TQ3PolyhedronTriangleData *result = polyData.GetNewTrianglesPtr (count);	if (result == NULL)	{		return result;	}	TQ3PolyhedronTriangleData triData;	triData.edgeFlag = kQ3PolyhedronEdgeAll;	triData.triangleAttributeSet = NULL;		for (long i = 1; i <= count; i++)	{		CTriangle *triangle; 		if (FetchItemAt(i, &triangle))		{				triData.vertexIndices[0] = triangle->fPoint1->fIndex;			triData.vertexIndices[1] = triangle->fPoint2->fIndex;			triData.vertexIndices[2] = triangle->fPoint3->fIndex;						result[i - 1] = triData;		}	}		return result;}#endif#pragma segment Mainvoid CTriangleList::InsertTriangle(CTriangle *triangle){	if (triangle->fPoint1 && triangle->fPoint2 && triangle->fPoint3)	{	                Push (triangle);	}	else	{//		ProgramBreak_AC("Problemos");	}}#if kDebugTriangle void* CTriangleList::At(ArrayIndex_AC index)//Override{	void* result = CMySortedList::At(index);		CTriangle::CheckSanity ((CTriangle*)result);		return result;	}#endif#pragma segment Main#if !kOpenGLvoid CTriangleList::DebugGetNormals(TQ3GroupObject group){	long count = GetCount();		for (long i = 1; i <= count; i++)	{		CTriangle *triangle = (CTriangle*)At(i);				TQ3GeometryObject normal = triangle->DebugGetNormalLine (40);				if (normal != NULL) {			Q3Group_AddObject(group, normal);			Q3Object_Dispose(normal);		}						}	}#endif