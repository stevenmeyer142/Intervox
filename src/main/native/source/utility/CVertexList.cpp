// CVertexList.cp// Created by Steve on Thu, Dec 3, 1998 @ 12:40 PM.#include "NativeOpenGL.h"#ifndef __CVertexList__#include "CVertexList.h"#endif#include "CVertex.h"#include "CTriangle.h"#include "CSlicesSet.h"//  #include "CQ3PolyhedronData.h"#include "CMyError.h"//	for debugging//#include "QD3DMath.h"CVertexList::CVertexList(ListIndex initialSize) : CMySortedList(initialSize){//	SetAllocationIncrement(initialSize);//	SetKeepSorted (true);}CVertexList::~CVertexList(){}#pragma segment MainCVertex *CVertexList::InsertVertex(CVertex *vertex){	bool found;	ListIndex index = GetInsertIndexOf (vertex, found);		if (!found)	{		if (fDebug)		{			::printf("vertex not found  %f, %f, %f. index %d\n", vertex->fX, vertex->fY, vertex->fZ, (int)index);		}		InsertElementAt (vertex, index, true);	}	else	{		if (fDebug)		{			::printf("vertexfound  %f, %f, %f. index %d\n", vertex->fX, vertex->fY, vertex->fZ, (int)index);		}		vertex = (CVertex*)At(index);	}		return vertex;}#pragma segment MainCompareResult CVertexList::CompareFloat(float float1, float float2){	// problems with equals and floats	float dif = float1 - float2;	CompareResult result = kItem1EqualItem2_AC;	if (dif > .0001)		result = kItem1GreaterThanItem2_AC;	else if (dif < -.0001)		result = kItem1LessThanItem2_AC;			return result;}#pragma segment Main#if !kOpenGLTQ3Vertex3D* CVertexList::GetVertexArray(CQ3PolyhedronData &polyData){	long count = GetSize();	TQ3Vertex3D *result = polyData.GetNewVerticesPtr(count);	if (result == NULL)	{		return result;	}	TQ3Vertex3D aVertex;	aVertex.attributeSet = NULL;		for (long i = 1; i <= count; i++)	{		CVertex *vertex = (CVertex*)At(i);				vertex->GetQDPoint (aVertex.point);			TQ3Vector3D normal;			vertex->GetNormal (normal);		aVertex.attributeSet = Q3AttributeSet_New();			Q3AttributeSet_Add(aVertex.attributeSet, kQ3AttributeTypeNormal,					&normal);		CMyError::ThrowErrorIfNULL (aVertex.attributeSet);				result[i - 1] = aVertex;	}		polyData.SetVerticesInitialized ();		return result;}#endif#pragma segment MainCompareResult CVertexList::Compare(const void* item1,  const void* item2)//Override{	CVertex *vertex1 = (CVertex*)item1;	CVertex *vertex2 = (CVertex*)item2;			CompareResult result = CompareFloat(vertex1->fZ, vertex2->fZ);		if (result == kItem1EqualItem2_AC)	{		result = CompareFloat(vertex1->fY, vertex2->fY);		if (result == kItem1EqualItem2_AC)		{			result = CompareFloat(vertex1->fX, vertex2->fX);		}	}		if (fDebug)	{		::printf("Compare, vertex1 (%f,%f,%f), vertex2 (%f,%f,%f), result %d\n",				 vertex1->fX, vertex1->fY, vertex1->fZ, vertex2->fX,  vertex2->fY,  vertex2->fZ, (int) result);	}	return result;}#pragma segment Mainvoid CVertexList::InsertTriangle(CTriangle *triangle){	if (triangle->fPoint1 && triangle->fPoint2 && triangle->fPoint3)	{		CVertex* vertex = InsertVertex(triangle->fPoint1);				if (vertex != triangle->fPoint1)		{			delete triangle->fPoint1;			triangle->fPoint1 = vertex;					}		vertex = InsertVertex(triangle->fPoint2);				if (vertex != triangle->fPoint2)		{			delete triangle->fPoint2;			triangle->fPoint2 = vertex;					}		vertex = InsertVertex(triangle->fPoint3);				if (vertex != triangle->fPoint3)		{			delete triangle->fPoint3;			triangle->fPoint3 = vertex;					}				C3DFloatPoint normal;		triangle->GetNormal (normal);		triangle->fPoint1->AddNormal (normal);		triangle->fPoint2->AddNormal (normal);		triangle->fPoint3->AddNormal (normal);	}}#pragma segment Mainvoid CVertexList::SetIndices(){	long count = GetSize();		for (long i = 1; i <= count; i++)	{		CVertex * vertex = (CVertex*)At(i);		vertex->SetIndex(i - 1);	}}#pragma segment Mainvoid CVertexList::Offset(const C3DPoint &point){	long count = GetSize();	for (long i = 1; i <= count; i++)	{		CVertex * vertex = (CVertex*)At(i);		vertex->fX += point.fX;		vertex->fY += point.fY;		vertex->fZ += point.fZ;	}}#if kVertexDebug	void* CVertexList::At(ListIndex index)//Override{	void* result = CMySortedList::At(index);		CVertex::CheckSanity ((CVertex*)result);		return result;}#endif