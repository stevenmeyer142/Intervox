// C3DFloatPoint.cp// Created by Steve on Wed, Oct 28, 1998 @ 4:01 PM.#include "NativeOpenGL.h"#include "C3DFloatPoint.h"#include <math.h>C3DFloatPoint::C3DFloatPoint(float x, float y, float z)  :					fX(x), fY(y), fZ(z){}#pragma segment MainC3DFloatPoint::~C3DFloatPoint(){}#pragma segment MainC3DFloatPoint& C3DFloatPoint::operator+=(const C3DFloatPoint& pt){	fX += pt.fX;	fY += pt.fY;	fZ += pt.fZ;	return *this;}#pragma segment MainC3DFloatPoint& C3DFloatPoint::operator-=(const C3DFloatPoint& pt){	fX -= pt.fX;	fY -= pt.fY;	fZ -= pt.fZ;		return *this;}#pragma segment MainC3DFloatPoint C3DFloatPoint::operator-() const{	return C3DFloatPoint(-fX, -fY, -fZ);}#pragma segment MainC3DFloatPoint::C3DFloatPoint() : fX(0), fY(0), fZ(0){	}#pragma segment Mainbool C3DFloatPoint::IsZero(){	return fX == 0 && fY == 0 && fZ == 0;}#pragma segment MainC3DFloatPoint C3DFloatPoint::Abs() const{	return C3DFloatPoint(fX < 0 ? -fX : fX,					fY < 0 ? -fY : fY,					fZ < 0 ? -fZ : fZ);}#pragma segment MainC3DFloatPoint C3DFloatPoint::operator+(const C3DFloatPoint& pt) const{	return C3DFloatPoint(*this) += pt;}#pragma segment MainC3DFloatPoint C3DFloatPoint::CrossProduct(const C3DFloatPoint& pt) const{	C3DFloatPoint result;		float x = fY * pt.fZ - fZ * pt.fY;	float y = fZ * pt.fX - fX * pt.fZ;	float z = fX * pt.fY - fY * pt.fX;		return C3DFloatPoint(x, y, z);}#pragma segment Mainfloat C3DFloatPoint::Length(){	float result = fX * fX + fY * fY + fZ * fZ;	return (float)sqrt(result);	}#pragma segment Mainvoid C3DFloatPoint::Scale(float factor){	fX *= factor;	fY *= factor;	fZ *= factor;	}#pragma segment Mainvoid C3DFloatPoint::Normalize(){	float length = Length ();		if (length != 0.0)	{		Scale(1.0f / length);	}}#ifndef kNoACSvoid C3DFloatPoint::Write(CStream_AC &stream){	char string[256];	::sprintf(string, "{%f, %f, %f}", fX, fY, fZ);	stream << string;	}#endif#pragma segment C3DFloatPoint::C3DFloatPoint(const C3DFloatPoint &pt) : fX(pt.fX), fY(pt.fY), fZ(pt.fZ){	}#pragma segment C3DFloatPoint::C3DFloatPoint(float *location)  : fX(location[0]), fY(location[1]), fZ(location[2]){	}